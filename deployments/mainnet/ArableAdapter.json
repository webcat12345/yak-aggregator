{
  "address": "0x70f0AC4CbAc1B078ac3c1c63cb18f1595d5D81aA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "id",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPoolTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9f8b277c23ca1bfb1d70cad262ee07e0c90abc9c6ff500f3af91d1d177f73f67",
  "receipt": {
    "to": null,
    "from": "0xd22044706DeA3c342f68396bEDBCf6a2536d951D",
    "contractAddress": "0x70f0AC4CbAc1B078ac3c1c63cb18f1595d5D81aA",
    "transactionIndex": 0,
    "gasUsed": "1999113",
    "logsBloom": "0x
    "blockHash": "0x623c785fbf8770264a5aeb80d2260529ac38e726bbe78165387a90bf572a5f98",
    "transactionHash": "0x9f8b277c23ca1bfb1d70cad262ee07e0c90abc9c6ff500f3af91d1d177f73f67",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 18154208,
        "transactionHash": "0x9f8b277c23ca1bfb1d70cad262ee07e0c90abc9c6ff500f3af91d1d177f73f67",
        "address": "0x70f0AC4CbAc1B078ac3c1c63cb18f1595d5D81aA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x623c785fbf8770264a5aeb80d2260529ac38e726bbe78165387a90bf572a5f98"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18154208,
        "transactionHash": "0x9f8b277c23ca1bfb1d70cad262ee07e0c90abc9c6ff500f3af91d1d177f73f67",
        "address": "0x70f0AC4CbAc1B078ac3c1c63cb18f1595d5D81aA",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x00000000000000000000000070f0ac4cbac1b078ac3c1c63cb18f1595d5d81aa"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000395f8",
        "logIndex": 1,
        "blockHash": "0x623c785fbf8770264a5aeb80d2260529ac38e726bbe78165387a90bf572a5f98"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18154208,
        "transactionHash": "0x9f8b277c23ca1bfb1d70cad262ee07e0c90abc9c6ff500f3af91d1d177f73f67",
        "address": "0xc7198437980c041c805A1EDcbA50c1Ce5db95118",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000070f0ac4cbac1b078ac3c1c63cb18f1595d5d81aa",
          "0x000000000000000000000000f39b1c8b977030f5fc81117c244bf7b9514ee562"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x623c785fbf8770264a5aeb80d2260529ac38e726bbe78165387a90bf572a5f98"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18154208,
        "transactionHash": "0x9f8b277c23ca1bfb1d70cad262ee07e0c90abc9c6ff500f3af91d1d177f73f67",
        "address": "0xD24C2Ad096400B6FBcd2ad8B24E7acBc21A1da64",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000070f0ac4cbac1b078ac3c1c63cb18f1595d5d81aa",
          "0x000000000000000000000000f39b1c8b977030f5fc81117c244bf7b9514ee562"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x623c785fbf8770264a5aeb80d2260529ac38e726bbe78165387a90bf572a5f98"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18154208,
        "transactionHash": "0x9f8b277c23ca1bfb1d70cad262ee07e0c90abc9c6ff500f3af91d1d177f73f67",
        "address": "0x111111111111ed1D73f860F57b2798b683f2d325",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000070f0ac4cbac1b078ac3c1c63cb18f1595d5d81aa",
          "0x000000000000000000000000f39b1c8b977030f5fc81117c244bf7b9514ee562"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x623c785fbf8770264a5aeb80d2260529ac38e726bbe78165387a90bf572a5f98"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18154208,
        "transactionHash": "0x9f8b277c23ca1bfb1d70cad262ee07e0c90abc9c6ff500f3af91d1d177f73f67",
        "address": "0x025AB35fF6AbccA56d57475249baaEae08419039",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000070f0ac4cbac1b078ac3c1c63cb18f1595d5d81aa",
          "0x000000000000000000000000f39b1c8b977030f5fc81117c244bf7b9514ee562"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0x623c785fbf8770264a5aeb80d2260529ac38e726bbe78165387a90bf572a5f98"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18154208,
        "transactionHash": "0x9f8b277c23ca1bfb1d70cad262ee07e0c90abc9c6ff500f3af91d1d177f73f67",
        "address": "0xA7D7079b0FEaD91F3e65f86E8915Cb59c1a4C664",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000070f0ac4cbac1b078ac3c1c63cb18f1595d5d81aa",
          "0x000000000000000000000000f39b1c8b977030f5fc81117c244bf7b9514ee562"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 6,
        "blockHash": "0x623c785fbf8770264a5aeb80d2260529ac38e726bbe78165387a90bf572a5f98"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18154208,
        "transactionHash": "0x9f8b277c23ca1bfb1d70cad262ee07e0c90abc9c6ff500f3af91d1d177f73f67",
        "address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000070f0ac4cbac1b078ac3c1c63cb18f1595d5d81aa",
          "0x000000000000000000000000f39b1c8b977030f5fc81117c244bf7b9514ee562"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0x623c785fbf8770264a5aeb80d2260529ac38e726bbe78165387a90bf572a5f98"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 18154208,
        "transactionHash": "0x9f8b277c23ca1bfb1d70cad262ee07e0c90abc9c6ff500f3af91d1d177f73f67",
        "address": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000070f0ac4cbac1b078ac3c1c63cb18f1595d5d81aa",
          "0x000000000000000000000000f39b1c8b977030f5fc81117c244bf7b9514ee562"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0x623c785fbf8770264a5aeb80d2260529ac38e726bbe78165387a90bf572a5f98"
      }
    ],
    "blockNumber": 18154208,
    "cumulativeGasUsed": "1999113",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "ArableAdapter",
    "0xF39b1c8b977030F5FC81117C244Bf7B9514Ee562",
    235000
  ],
  "solcInputHash": "30fea43f8b47c0563b28a8124c9d7d35",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverAVAX(uint256)\":{\"params\":{\"_amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"_tokenAddress\":\"token address\",\"_tokenAmount\":\"amount to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"_spender\":\"address\",\"_token\":\"address\"}},\"setAllowances()\":{\"details\":\"Should use modifier `onlyOwner` to avoid griefing\"},\"swap(uint256,uint256,address,address,address)\":{\"params\":{\"_amountIn\":\"input amount in starting token\",\"_amountOut\":\"amount out in ending token\",\"_fromToken\":\"ERC20 token being sold\",\"_to\":\"address where swapped funds should be sent to\",\"_toToken\":\"ERC20 token being bought\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"swap(uint256,uint256,address,address,address)\":{\"notice\":\"Execute a swap from token to token assuming this contract already holds input tokensInteract through the router\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/ArableSFAdapter.sol\":\"ArableSFAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                              \\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IWETH.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\n\\nabstract contract YakAdapter is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(\\n        address indexed _tokenFrom, \\n        address indexed _tokenTo, \\n        uint _amountIn, \\n        uint _amountOut\\n    );\\n\\n    event UpdatedGasEstimate(\\n        address indexed _adapter,\\n        uint _newEstimate\\n    );\\n\\n    event Recovered(\\n        address indexed _asset, \\n        uint amount\\n    );\\n\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n    address internal constant AVAX = address(0);\\n    uint internal constant UINT_MAX = type(uint).max;\\n\\n    uint public swapGasEstimate;\\n    string public name;\\n\\n    function setSwapGasEstimate(uint _estimate) public onlyOwner {\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param _token address\\n     * @param _spender address\\n     */\\n    function revokeAllowance(address _token, address _spender) external onlyOwner {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param _tokenAddress token address\\n     * @param _tokenAmount amount to recover\\n     */\\n    function recoverERC20(address _tokenAddress, uint _tokenAmount) external onlyOwner {\\n        require(_tokenAmount > 0, 'YakAdapter: Nothing to recover');\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param _amount amount\\n     */\\n    function recoverAVAX(uint _amount) external onlyOwner {\\n        require(_amount > 0, 'YakAdapter: Nothing to recover');\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint _amountIn, \\n        address _tokenIn, \\n        address _tokenOut\\n    ) external view returns (uint) {\\n        return _query(\\n            _amountIn, \\n            _tokenIn, \\n            _tokenOut\\n        );\\n    }\\n\\n    /**\\n     * Execute a swap from token to token assuming this contract already holds input tokens\\n     * @notice Interact through the router\\n     * @param _amountIn input amount in starting token\\n     * @param _amountOut amount out in ending token\\n     * @param _fromToken ERC20 token being sold\\n     * @param _toToken ERC20 token being bought\\n     * @param _to address where swapped funds should be sent to\\n     */\\n    function swap(\\n        uint _amountIn, \\n        uint _amountOut,\\n        address _fromToken, \\n        address _toToken, \\n        address _to\\n    ) external {\\n        _approveIfNeeded(_fromToken, _amountIn);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        emit YakAdapterSwap(\\n            _fromToken, \\n            _toToken,\\n            _amountIn, \\n            _amountOut \\n        );\\n    } \\n\\n    /**\\n     * @notice Return expected funds to user\\n     * @dev Skip if funds should stay in the contract\\n     * @param _token address\\n     * @param _amount tokens to return\\n     * @param _to address where funds should be sent to\\n     */\\n    function _returnTo(address _token, uint _amount, address _to) internal {\\n        if (address(this)!=_to) {\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Wrap AVAX\\n     * @param _amount amount\\n     */\\n    function _wrap(uint _amount) internal {\\n        IWETH(WAVAX).deposit{value: _amount}();\\n    }\\n\\n    /**\\n     * @notice Unwrap WAVAX\\n     * @param _amount amount\\n     */\\n    function _unwrap(uint _amount) internal {\\n        IWETH(WAVAX).withdraw(_amount);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of a swap\\n     * @dev Must return tokens to address(this)\\n     * @dev Wrapping is handled external to this function\\n     * @param _amountIn amount being sold\\n     * @param _amountOut amount being bought\\n     * @param _fromToken ERC20 token being sold\\n     * @param _toToken ERC20 token being bought\\n     * @param _to Where recieved tokens are sent to\\n     */\\n    function _swap(\\n        uint _amountIn, \\n        uint _amountOut, \\n        address _fromToken, \\n        address _toToken, \\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint _amountIn,\\n        address _tokenIn, \\n        address _tokenOut\\n    ) internal virtual view returns (uint);\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Should use modifier `onlyOwner` to avoid griefing\\n     */\\n    function setAllowances() public virtual;\\n\\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal virtual;\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x8640baef184d9eec0190581dd4e19ee3c0aea5df1a8c0084694ac194900527fd\",\"license\":\"GPL-3.0-only\"},\"contracts/adapters/ArableSFAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                              \\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interface/IStabilityFund.sol\\\";\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"../lib/SafeMath.sol\\\";\\nimport \\\"../YakAdapter.sol\\\";\\n\\ncontract ArableSFAdapter is YakAdapter {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n\\n    bytes32 public constant id = keccak256(\\\"ArableSFAdapter\\\");\\n    address public vault;\\n    mapping(address => uint) public tokenDecimals;\\n\\n    constructor(string memory _name, address _vault, uint _swapGasEstimate) {\\n        name = _name; \\n        vault = _vault;\\n        setSwapGasEstimate(_swapGasEstimate);\\n        setPoolTokens();\\n    }\\n\\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {}\\n\\n    function setPoolTokens() public {\\n        uint whitelistedTknsLen = IStabilityFund(vault).getStableTokensCount();\\n        for (uint i = 0; i < whitelistedTknsLen; i++) {\\n            address token = IStabilityFund(vault).getStableTokens()[i];\\n            tokenDecimals[token] = IERC20(token).decimals();\\n            uint allowance = IERC20(token).allowance(address(this), vault);\\n            if (allowance < UINT_MAX) {\\n                IERC20(token).safeApprove(vault, UINT_MAX);\\n            }\\n        }\\n    }\\n\\n    function adjustForDecimals(\\n        uint _amount, \\n        address _tokenDiv, \\n        address _tokenMul\\n    ) internal view returns (uint) {\\n        uint decimalsDiv = tokenDecimals[_tokenDiv];\\n        uint decimalsMul = tokenDecimals[_tokenMul];\\n        return _amount.mul(10**decimalsMul) / 10**decimalsDiv;\\n    }\\n\\n    function hasVaultEnoughBal(\\n        address _token, \\n        uint _amount\\n    ) private view returns (bool) {\\n        return IERC20(_token).balanceOf(vault) >= _amount;\\n    }\\n\\n    function _query(\\n        uint _amountIn, \\n        address _tokenIn, \\n        address _tokenOut\\n    ) internal override view returns (uint) {\\n        if (\\n            _amountIn==0 || \\n            _tokenIn==_tokenOut ||\\n            !IStabilityFund(vault).isStableToken(_tokenIn) ||\\n            !IStabilityFund(vault).isStableToken(_tokenOut) ||\\n            IStabilityFund(vault).isTokenDisabled(_tokenIn) ||\\n            IStabilityFund(vault).isTokenDisabled(_tokenOut) ||\\n            !IStabilityFund(vault).swapEnabled()\\n        ) { return 0; }\\n\\n        uint amountOut = adjustForDecimals(\\n            _amountIn, \\n            _tokenIn, \\n            _tokenOut\\n        );\\n        uint swapFee = IStabilityFund(vault).swapFee();\\n        uint swapFeeDivisor = 1 ether;\\n        uint feeAmount = amountOut.mul(swapFee) / swapFeeDivisor;\\n        uint amountOutAfterFees = amountOut.sub(feeAmount);\\n        if (!hasVaultEnoughBal(_tokenOut, amountOutAfterFees)) {\\n            return 0;\\n        }\\n\\n        return amountOutAfterFees;\\n    }\\n\\n    function _swap(\\n        uint _amountIn, \\n        uint _amountOut, \\n        address _tokenIn, \\n        address _tokenOut, \\n        address _to\\n    ) internal override {\\n        IStabilityFund(vault).swap(\\n            _tokenIn,\\n            _amountIn,\\n            _tokenOut\\n        );\\n        // Confidently transfer amount-out\\n        _returnTo(_tokenOut, _amountOut, _to);\\n    }\\n\\n    function setAllowances() public override onlyOwner {}\\n\\n}\",\"keccak256\":\"0x50fc2317ad0b7682974b015a2a0f549217e218d3f803c29eefaf7839addeda88\",\"license\":\"GPL-3.0-only\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IERC20 {\\n    event Approval(address,address,uint);\\n    event Transfer(address,address,uint);\\n    function name() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function transferFrom(address,address,uint) external returns (bool);\\n    function allowance(address,address) external view returns (uint);\\n    function approve(address,uint) external returns (bool);\\n    function transfer(address,uint) external returns (bool);\\n    function balanceOf(address) external view returns (uint);\\n    function nonces(address) external view returns (uint);  // Only tokens that support permit\\n    function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) external;  // Only tokens that support permit\\n    function swap(address,uint256) external;  // Only Avalanche bridge tokens \\n    function swapSupply(address) external view returns (uint);  // Only Avalanche bridge tokens \\n}\",\"keccak256\":\"0xc71d31ef4f838908478ceb97d1ba0d95c4046393bd1cf26d6079d57d7c094e8d\",\"license\":\"MIT\"},\"contracts/interface/IStabilityFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IStabilityFund {\\n    function swap(address token0, uint256 amount, address token1) external;\\n    function swapEnabled() external view returns (bool);\\n    function isStableToken(address) external view returns (bool);\\n    function isTokenDisabled(address) external view returns (bool);\\n    function getStableTokens() external view returns (address[] memory);\\n    function getStableTokensCount() external view returns (uint256);\\n    function swapFee() external view returns (uint256);\\n}\",\"keccak256\":\"0x6a3b7994631943584432d8139f6093f9da905b07de1549b4e142de5e4815b459\",\"license\":\"MIT\"},\"contracts/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 amount) external;\\n    function deposit() external payable;\\n}\",\"keccak256\":\"0xaff69efb1b24f6448740e4c71a16d86eedcd2407606ac449dd09dad5043b7923\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8b25f8514264f6d0ed4279a311d1be64012183292b1e7d6707107928dbac1142\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: New owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1331d91852367ea5319eed242ef8ebbf245a0271f2b19093f5521ae206c9a1b3\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x95e46e79b970b6e35511a773d310d63d7de30a5314e9bbfc4d8b465acec6f521\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'SafeMath: ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'SafeMath: ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'SafeMath: ds-math-mul-overflow');\\n    }\\n}\",\"keccak256\":\"0xee319854a4e682f8fab4f0404aa9604c9eea8190f6ec72c9cc67f25785b3ae01\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200220438038062002204833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b506040908152602082015191015190925090506000620001056200019e565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508251620001649060029060208601906200073c565b50600380546001600160a01b0319166001600160a01b0384161790556200018b81620001a2565b6200019562000259565b50505062000975565b3390565b620001ac6200019e565b6001600160a01b0316620001bf6200054d565b6001600160a01b0316146200021b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181905560408051828152905130917ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a919081900360200190a250565b60035460408051635fc1bad360e01b815290516000926001600160a01b031691635fc1bad3916004808301926020929190829003018186803b1580156200029f57600080fd5b505afa158015620002b4573d6000803e3d6000fd5b505050506040513d6020811015620002cb57600080fd5b5051905060005b8181101562000549576003546040805163a195c25360e01b815290516000926001600160a01b03169163a195c2539160048083019286929190829003018186803b1580156200032057600080fd5b505afa15801562000335573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156200035f57600080fd5b81019080805160405193929190846401000000008211156200038057600080fd5b9083019060208201858111156200039657600080fd5b8251866020820283011164010000000082111715620003b457600080fd5b82525081516020918201928201910280838360005b83811015620003e3578181015183820152602001620003c9565b505050509050016040525050508281518110620003fc57fe5b60200260200101519050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156200044057600080fd5b505afa15801562000455573d6000803e3d6000fd5b505050506040513d60208110156200046c57600080fd5b50516001600160a01b03808316600081815260046020818152604080842060ff9097169096556003548651636eb1769f60e11b81523093810193909352909416602482015293519093919263dd62ed3e9260448082019391829003018186803b158015620004d957600080fd5b505afa158015620004ee573d6000803e3d6000fd5b505050506040513d60208110156200050557600080fd5b505190506000198110156200053e576003546200053e906001600160a01b0384811691166000196200055c602090811b62000e6e17901c565b5050600101620002d2565b5050565b6000546001600160a01b031690565b801580620005eb5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e9062000595903090869060040162000866565b60206040518083038186803b158015620005ae57600080fd5b505afa158015620005c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005e9919062000811565b155b620006135760405162461bcd60e51b81526004016200060a9062000918565b60405180910390fd5b6200066e8363095ea7b360e01b84846040516024016200063592919062000880565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b03938416179052906200067316565b505050565b600080836001600160a01b0316836040516200069091906200082a565b6000604051808303816000865af19150503d8060008114620006cf576040519150601f19603f3d011682016040523d82523d6000602084013e620006d4565b606091505b509150915081620006f95760405162461bcd60e51b81526004016200060a9062000899565b805115620007365780806020019051810190620007179190620007e8565b620007365760405162461bcd60e51b81526004016200060a90620008ce565b50505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620007745760008555620007bf565b82601f106200078f57805160ff1916838001178555620007bf565b82800160010185558215620007bf579182015b82811115620007bf578251825591602001919060010190620007a2565b50620007cd929150620007d1565b5090565b5b80821115620007cd5760008155600101620007d2565b600060208284031215620007fa578081fd5b815180151581146200080a578182fd5b9392505050565b60006020828403121562000823578081fd5b5051919050565b60008251815b818110156200084c576020818601810151858301520162000830565b818111156200085b5782828501525b509190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b61187f80620009856000396000f3fe6080604052600436106100f75760003560e01c80638da5cb5b1161008a578063eab90da611610059578063eab90da614610336578063ef99893a14610387578063f2fde38b146103c8578063fbfa77cf146103fb576100fe565b80638da5cb5b146102a85780638ee573ac146102d9578063af640d0f1461030c578063dbd9a4d414610321576100fe565b8063715018a6116100c6578063715018a6146101f55780637ae267731461020a57806384a33e63146102455780638980f11f1461026f576100fe565b806306fdde0314610103578063114e4ce41461018d5780634ebb7916146101a457806369cff80d146101ce576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b50610118610410565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015257818101518382015260200161013a565b50505050905090810190601f16801561017f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019957600080fd5b506101a261049b565b005b3480156101b057600080fd5b506101a2600480360360208110156101c757600080fd5b503561079e565b3480156101da57600080fd5b506101e36108cf565b60408051918252519081900360200190f35b34801561020157600080fd5b506101a26108d5565b34801561021657600080fd5b506101a26004803603604081101561022d57600080fd5b506001600160a01b03813581169160200135166109a0565b34801561025157600080fd5b506101a26004803603602081101561026857600080fd5b5035610a29565b34801561027b57600080fd5b506101a26004803603604081101561029257600080fd5b506001600160a01b038135169060200135610adb565b3480156102b457600080fd5b506102bd610bfb565b604080516001600160a01b039092168252519081900360200190f35b3480156102e557600080fd5b506101e3600480360360208110156102fc57600080fd5b50356001600160a01b0316610c0a565b34801561031857600080fd5b506101e3610c1c565b34801561032d57600080fd5b506101a2610c40565b34801561034257600080fd5b506101a2600480360360a081101561035957600080fd5b508035906020810135906001600160a01b036040820135811691606081013582169160809091013516610cb6565b34801561039357600080fd5b506101e3600480360360608110156103aa57600080fd5b508035906001600160a01b0360208201358116916040013516610d27565b3480156103d457600080fd5b506101a2600480360360208110156103eb57600080fd5b50356001600160a01b0316610d3e565b34801561040757600080fd5b506102bd610e5f565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104935780601f1061046857610100808354040283529160200191610493565b820191906000526020600020905b81548152906001019060200180831161047657829003601f168201915b505050505081565b600354604080517f5fc1bad300000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691635fc1bad3916004808301926020929190829003018186803b1580156104f957600080fd5b505afa15801561050d573d6000803e3d6000fd5b505050506040513d602081101561052357600080fd5b5051905060005b8181101561079a57600354604080517fa195c25300000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163a195c2539160048083019286929190829003018186803b15801561058f57600080fd5b505afa1580156105a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156105cc57600080fd5b81019080805160405193929190846401000000008211156105ec57600080fd5b90830190602082018581111561060157600080fd5b825186602082028301116401000000008211171561061e57600080fd5b82525081516020918201928201910280838360005b8381101561064b578181015183820152602001610633565b50505050905001604052505050828151811061066357fe5b60200260200101519050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d60208110156106d057600080fd5b50516001600160a01b03808316600081815260046020818152604080842060ff9097169096556003548651636eb1769f60e11b81523093810193909352909416602482015293519093919263dd62ed3e9260448082019391829003018186803b15801561073c57600080fd5b505afa158015610750573d6000803e3d6000fd5b505050506040513d602081101561076657600080fd5b5051905060001981101561079057600354610790906001600160a01b038481169116600019610e6e565b505060010161052a565b5050565b6107a6610fa3565b6001600160a01b03166107b7610bfb565b6001600160a01b031614610812576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111610867576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b604051339082156108fc029083906000818181858888f19350505050158015610894573d6000803e3d6000fd5b506040805182815290516000917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a250565b60015481565b6108dd610fa3565b6001600160a01b03166108ee610bfb565b6001600160a01b031614610949576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6109a8610fa3565b6001600160a01b03166109b9610bfb565b6001600160a01b031614610a14576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61079a6001600160a01b038316826000610e6e565b610a31610fa3565b6001600160a01b0316610a42610bfb565b6001600160a01b031614610a9d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181905560408051828152905130917ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a919081900360200190a250565b610ae3610fa3565b6001600160a01b0316610af4610bfb565b6001600160a01b031614610b4f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111610ba4576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b610bb86001600160a01b0383163383610fa7565b6040805182815290516001600160a01b038416917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a25050565b6000546001600160a01b031690565b60046020526000908152604090205481565b7f896ecc4035234d8c97fc44d0e34e76417de0cdd53a3f7e3a19ca3efbcb9156ef81565b610c48610fa3565b6001600160a01b0316610c59610bfb565b6001600160a01b031614610cb4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b565b610cc0838661079a565b610ccd8585858585610fc6565b816001600160a01b0316836001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8787604051808381526020018281526020019250505060405180910390a35050505050565b6000610d34848484611066565b90505b9392505050565b610d46610fa3565b6001600160a01b0316610d57610bfb565b6001600160a01b031614610db2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610df75760405162461bcd60e51b81526004018080602001828103825260268152602001806118246026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b801580610ef65750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610ea49030908690600401611701565b60206040518083038186803b158015610ebc57600080fd5b505afa158015610ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef491906116b0565b155b610f1b5760405162461bcd60e51b8152600401610f12906117c6565b60405180910390fd5b610f9e8363095ea7b360e01b8484604051602401610f3a92919061171b565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526113fa565b505050565b3390565b610f9e8363a9059cbb60e01b8484604051602401610f3a92919061171b565b600354604080517f6d069a670000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201899052858116604483015291519190921691636d069a6791606480830192600092919082900301818387803b15801561103c57600080fd5b505af1158015611050573d6000803e3d6000fd5b5050505061105f8285836114b6565b5050505050565b60008315806110865750816001600160a01b0316836001600160a01b0316145b80611107575060035460408051634e34f26b60e01b81526001600160a01b03868116600483015291519190921691634e34f26b916024808301926020929190829003018186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d602081101561110357600080fd5b5051155b80611188575060035460408051634e34f26b60e01b81526001600160a01b03858116600483015291519190921691634e34f26b916024808301926020929190829003018186803b15801561115a57600080fd5b505afa15801561116e573d6000803e3d6000fd5b505050506040513d602081101561118457600080fd5b5051155b80611208575060035460408051636925cf9160e01b81526001600160a01b03868116600483015291519190921691636925cf91916024808301926020929190829003018186803b1580156111db57600080fd5b505afa1580156111ef573d6000803e3d6000fd5b505050506040513d602081101561120557600080fd5b50515b80611288575060035460408051636925cf9160e01b81526001600160a01b03858116600483015291519190921691636925cf91916024808301926020929190829003018186803b15801561125b57600080fd5b505afa15801561126f573d6000803e3d6000fd5b505050506040513d602081101561128557600080fd5b50515b8061130a5750600360009054906101000a90046001600160a01b03166001600160a01b0316636ddd17136040518163ffffffff1660e01b815260040160206040518083038186803b1580156112dc57600080fd5b505afa1580156112f0573d6000803e3d6000fd5b505050506040513d602081101561130657600080fd5b5051155b1561131757506000610d37565b60006113248585856114da565b90506000600360009054906101000a90046001600160a01b03166001600160a01b03166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561137657600080fd5b505afa15801561138a573d6000803e3d6000fd5b505050506040513d60208110156113a057600080fd5b50519050670de0b6b3a76400006000816113ba8585611526565b816113c157fe5b04905060006113d08583611598565b90506113dc87826115f0565b6113ee57600095505050505050610d37565b98975050505050505050565b600080836001600160a01b03168360405161141591906116c8565b6000604051808303816000865af19150503d8060008114611452576040519150601f19603f3d011682016040523d82523d6000602084013e611457565b606091505b5091509150816114795760405162461bcd60e51b8152600401610f1290611734565b8051156114b057808060200190518101906114949190611690565b6114b05760405162461bcd60e51b8152600401610f1290611769565b50505050565b306001600160a01b03821614610f9e57610f9e6001600160a01b0384168284610fa7565b6001600160a01b03808316600090815260046020526040808220549284168252812054909190600a82810a9061151490889084900a611526565b8161151b57fe5b049695505050505050565b60008115806115415750508082028282828161153e57fe5b04145b611592576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a2064732d6d6174682d6d756c2d6f766572666c6f770000604482015290519081900360640190fd5b92915050565b80820382811115611592576040805162461bcd60e51b815260206004820152601f60248201527f536166654d6174683a2064732d6d6174682d7375622d756e646572666c6f7700604482015290519081900360640190fd5b600354604080517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015290516000928492908616916370a0823191602480820192602092909190829003018186803b15801561165b57600080fd5b505afa15801561166f573d6000803e3d6000fd5b505050506040513d602081101561168557600080fd5b505110159392505050565b6000602082840312156116a1578081fd5b81518015158114610d37578182fd5b6000602082840312156116c1578081fd5b5051919050565b60008251815b818110156116e857602081860181015185830152016116ce565b818111156116f65782828501525b509190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060608201526080019056fe4f776e61626c653a204e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212202ecc0cdb52349b7154c553b16b2ba68bf445c3d17a0bfb03b4a368d3c6485d9c64736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c80638da5cb5b1161008a578063eab90da611610059578063eab90da614610336578063ef99893a14610387578063f2fde38b146103c8578063fbfa77cf146103fb576100fe565b80638da5cb5b146102a85780638ee573ac146102d9578063af640d0f1461030c578063dbd9a4d414610321576100fe565b8063715018a6116100c6578063715018a6146101f55780637ae267731461020a57806384a33e63146102455780638980f11f1461026f576100fe565b806306fdde0314610103578063114e4ce41461018d5780634ebb7916146101a457806369cff80d146101ce576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b50610118610410565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561015257818101518382015260200161013a565b50505050905090810190601f16801561017f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019957600080fd5b506101a261049b565b005b3480156101b057600080fd5b506101a2600480360360208110156101c757600080fd5b503561079e565b3480156101da57600080fd5b506101e36108cf565b60408051918252519081900360200190f35b34801561020157600080fd5b506101a26108d5565b34801561021657600080fd5b506101a26004803603604081101561022d57600080fd5b506001600160a01b03813581169160200135166109a0565b34801561025157600080fd5b506101a26004803603602081101561026857600080fd5b5035610a29565b34801561027b57600080fd5b506101a26004803603604081101561029257600080fd5b506001600160a01b038135169060200135610adb565b3480156102b457600080fd5b506102bd610bfb565b604080516001600160a01b039092168252519081900360200190f35b3480156102e557600080fd5b506101e3600480360360208110156102fc57600080fd5b50356001600160a01b0316610c0a565b34801561031857600080fd5b506101e3610c1c565b34801561032d57600080fd5b506101a2610c40565b34801561034257600080fd5b506101a2600480360360a081101561035957600080fd5b508035906020810135906001600160a01b036040820135811691606081013582169160809091013516610cb6565b34801561039357600080fd5b506101e3600480360360608110156103aa57600080fd5b508035906001600160a01b0360208201358116916040013516610d27565b3480156103d457600080fd5b506101a2600480360360208110156103eb57600080fd5b50356001600160a01b0316610d3e565b34801561040757600080fd5b506102bd610e5f565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156104935780601f1061046857610100808354040283529160200191610493565b820191906000526020600020905b81548152906001019060200180831161047657829003601f168201915b505050505081565b600354604080517f5fc1bad300000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691635fc1bad3916004808301926020929190829003018186803b1580156104f957600080fd5b505afa15801561050d573d6000803e3d6000fd5b505050506040513d602081101561052357600080fd5b5051905060005b8181101561079a57600354604080517fa195c25300000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163a195c2539160048083019286929190829003018186803b15801561058f57600080fd5b505afa1580156105a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156105cc57600080fd5b81019080805160405193929190846401000000008211156105ec57600080fd5b90830190602082018581111561060157600080fd5b825186602082028301116401000000008211171561061e57600080fd5b82525081516020918201928201910280838360005b8381101561064b578181015183820152602001610633565b50505050905001604052505050828151811061066357fe5b60200260200101519050806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a657600080fd5b505afa1580156106ba573d6000803e3d6000fd5b505050506040513d60208110156106d057600080fd5b50516001600160a01b03808316600081815260046020818152604080842060ff9097169096556003548651636eb1769f60e11b81523093810193909352909416602482015293519093919263dd62ed3e9260448082019391829003018186803b15801561073c57600080fd5b505afa158015610750573d6000803e3d6000fd5b505050506040513d602081101561076657600080fd5b5051905060001981101561079057600354610790906001600160a01b038481169116600019610e6e565b505060010161052a565b5050565b6107a6610fa3565b6001600160a01b03166107b7610bfb565b6001600160a01b031614610812576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111610867576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b604051339082156108fc029083906000818181858888f19350505050158015610894573d6000803e3d6000fd5b506040805182815290516000917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a250565b60015481565b6108dd610fa3565b6001600160a01b03166108ee610bfb565b6001600160a01b031614610949576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6109a8610fa3565b6001600160a01b03166109b9610bfb565b6001600160a01b031614610a14576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61079a6001600160a01b038316826000610e6e565b610a31610fa3565b6001600160a01b0316610a42610bfb565b6001600160a01b031614610a9d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181905560408051828152905130917ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a919081900360200190a250565b610ae3610fa3565b6001600160a01b0316610af4610bfb565b6001600160a01b031614610b4f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111610ba4576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b610bb86001600160a01b0383163383610fa7565b6040805182815290516001600160a01b038416917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a25050565b6000546001600160a01b031690565b60046020526000908152604090205481565b7f896ecc4035234d8c97fc44d0e34e76417de0cdd53a3f7e3a19ca3efbcb9156ef81565b610c48610fa3565b6001600160a01b0316610c59610bfb565b6001600160a01b031614610cb4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b565b610cc0838661079a565b610ccd8585858585610fc6565b816001600160a01b0316836001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8787604051808381526020018281526020019250505060405180910390a35050505050565b6000610d34848484611066565b90505b9392505050565b610d46610fa3565b6001600160a01b0316610d57610bfb565b6001600160a01b031614610db2576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610df75760405162461bcd60e51b81526004018080602001828103825260268152602001806118246026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b801580610ef65750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610ea49030908690600401611701565b60206040518083038186803b158015610ebc57600080fd5b505afa158015610ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef491906116b0565b155b610f1b5760405162461bcd60e51b8152600401610f12906117c6565b60405180910390fd5b610f9e8363095ea7b360e01b8484604051602401610f3a92919061171b565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526113fa565b505050565b3390565b610f9e8363a9059cbb60e01b8484604051602401610f3a92919061171b565b600354604080517f6d069a670000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015260248201899052858116604483015291519190921691636d069a6791606480830192600092919082900301818387803b15801561103c57600080fd5b505af1158015611050573d6000803e3d6000fd5b5050505061105f8285836114b6565b5050505050565b60008315806110865750816001600160a01b0316836001600160a01b0316145b80611107575060035460408051634e34f26b60e01b81526001600160a01b03868116600483015291519190921691634e34f26b916024808301926020929190829003018186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d602081101561110357600080fd5b5051155b80611188575060035460408051634e34f26b60e01b81526001600160a01b03858116600483015291519190921691634e34f26b916024808301926020929190829003018186803b15801561115a57600080fd5b505afa15801561116e573d6000803e3d6000fd5b505050506040513d602081101561118457600080fd5b5051155b80611208575060035460408051636925cf9160e01b81526001600160a01b03868116600483015291519190921691636925cf91916024808301926020929190829003018186803b1580156111db57600080fd5b505afa1580156111ef573d6000803e3d6000fd5b505050506040513d602081101561120557600080fd5b50515b80611288575060035460408051636925cf9160e01b81526001600160a01b03858116600483015291519190921691636925cf91916024808301926020929190829003018186803b15801561125b57600080fd5b505afa15801561126f573d6000803e3d6000fd5b505050506040513d602081101561128557600080fd5b50515b8061130a5750600360009054906101000a90046001600160a01b03166001600160a01b0316636ddd17136040518163ffffffff1660e01b815260040160206040518083038186803b1580156112dc57600080fd5b505afa1580156112f0573d6000803e3d6000fd5b505050506040513d602081101561130657600080fd5b5051155b1561131757506000610d37565b60006113248585856114da565b90506000600360009054906101000a90046001600160a01b03166001600160a01b03166354cf2aeb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561137657600080fd5b505afa15801561138a573d6000803e3d6000fd5b505050506040513d60208110156113a057600080fd5b50519050670de0b6b3a76400006000816113ba8585611526565b816113c157fe5b04905060006113d08583611598565b90506113dc87826115f0565b6113ee57600095505050505050610d37565b98975050505050505050565b600080836001600160a01b03168360405161141591906116c8565b6000604051808303816000865af19150503d8060008114611452576040519150601f19603f3d011682016040523d82523d6000602084013e611457565b606091505b5091509150816114795760405162461bcd60e51b8152600401610f1290611734565b8051156114b057808060200190518101906114949190611690565b6114b05760405162461bcd60e51b8152600401610f1290611769565b50505050565b306001600160a01b03821614610f9e57610f9e6001600160a01b0384168284610fa7565b6001600160a01b03808316600090815260046020526040808220549284168252812054909190600a82810a9061151490889084900a611526565b8161151b57fe5b049695505050505050565b60008115806115415750508082028282828161153e57fe5b04145b611592576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a2064732d6d6174682d6d756c2d6f766572666c6f770000604482015290519081900360640190fd5b92915050565b80820382811115611592576040805162461bcd60e51b815260206004820152601f60248201527f536166654d6174683a2064732d6d6174682d7375622d756e646572666c6f7700604482015290519081900360640190fd5b600354604080517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015290516000928492908616916370a0823191602480820192602092909190829003018186803b15801561165b57600080fd5b505afa15801561166f573d6000803e3d6000fd5b505050506040513d602081101561168557600080fd5b505110159392505050565b6000602082840312156116a1578081fd5b81518015158114610d37578182fd5b6000602082840312156116c1578081fd5b5051919050565b60008251815b818110156116e857602081860181015185830152016116ce565b818111156116f65782828501525b509190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060608201526080019056fe4f776e61626c653a204e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212202ecc0cdb52349b7154c553b16b2ba68bf445c3d17a0bfb03b4a368d3c6485d9c64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverAVAX(uint256)": {
        "params": {
          "_amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "_tokenAddress": "token address",
          "_tokenAmount": "amount to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "_spender": "address",
          "_token": "address"
        }
      },
      "setAllowances()": {
        "details": "Should use modifier `onlyOwner` to avoid griefing"
      },
      "swap(uint256,uint256,address,address,address)": {
        "params": {
          "_amountIn": "input amount in starting token",
          "_amountOut": "amount out in ending token",
          "_fromToken": "ERC20 token being sold",
          "_to": "address where swapped funds should be sent to",
          "_toToken": "ERC20 token being bought"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "swap(uint256,uint256,address,address,address)": {
        "notice": "Execute a swap from token to token assuming this contract already holds input tokensInteract through the router"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10345,
        "contract": "contracts/adapters/ArableSFAdapter.sol:ArableSFAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 50,
        "contract": "contracts/adapters/ArableSFAdapter.sol:ArableSFAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 52,
        "contract": "contracts/adapters/ArableSFAdapter.sol:ArableSFAdapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2283,
        "contract": "contracts/adapters/ArableSFAdapter.sol:ArableSFAdapter",
        "label": "vault",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2287,
        "contract": "contracts/adapters/ArableSFAdapter.sol:ArableSFAdapter",
        "label": "tokenDecimals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}