{
  "address": "0x97b71c7764c60e1FD765233aCd11009D23c792BF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "a",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "b",
          "type": "bytes"
        }
      ],
      "name": "mergeBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "c",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xafa27aa76261e5f809b1002853482ca921dd9d7d59344974c2f8134ce44e527b",
  "receipt": {
    "to": null,
    "from": "0xd22044706DeA3c342f68396bEDBCf6a2536d951D",
    "contractAddress": "0x97b71c7764c60e1FD765233aCd11009D23c792BF",
    "transactionIndex": 0,
    "gasUsed": "196013",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x24c1fd2965cd8df00df8833eac32e52dfb10bb9ff7b4802d03f135c3d5228001",
    "transactionHash": "0xafa27aa76261e5f809b1002853482ca921dd9d7d59344974c2f8134ce44e527b",
    "logs": [],
    "blockNumber": 2353769,
    "cumulativeGasUsed": "196013",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "b50260058db9dd0b790ebd064bec4c3e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"a\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"b\",\"type\":\"bytes\"}],\"name\":\"mergeBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"c\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/BytesManipulation.sol\":\"BytesManipulation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/lib/BytesManipulation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"./BytesToTypes.sol\\\";\\n\\nlibrary BytesManipulation {\\n\\n    function toBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n    }\\n\\n    function toBytes(address x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly { mstore(add(b, 32), x) }\\n    }\\n\\n    function mergeBytes(bytes memory a, bytes memory b) public pure returns (bytes memory c) {\\n        // From https://ethereum.stackexchange.com/a/40456\\n        uint alen = a.length;\\n        uint totallen = alen + b.length;\\n        uint loopsa = (a.length + 31) / 32;\\n        uint loopsb = (b.length + 31) / 32;\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(m, totallen)\\n            for {  let i := 0 } lt(i, loopsa) { i := add(1, i) } { mstore(add(m, mul(32, add(1, i))), mload(add(a, mul(32, add(1, i))))) }\\n            for {  let i := 0 } lt(i, loopsb) { i := add(1, i) } { mstore(add(m, add(mul(32, add(1, i)), alen)), mload(add(b, mul(32, add(1, i))))) }\\n            mstore(0x40, add(m, add(32, totallen)))\\n            c := m\\n        }\\n    }\\n\\n    function bytesToAddress(uint _offst, bytes memory _input) internal pure returns (address) {\\n        return BytesToTypes.bytesToAddress(_offst, _input);\\n    }\\n\\n    function bytesToUint256(uint _offst, bytes memory _input) internal pure returns (uint256) {\\n        return BytesToTypes.bytesToUint256(_offst, _input);\\n    } \\n\\n}\\n\",\"keccak256\":\"0x2dd3d27b1467da6bde9faa266179fc76ab1935039ccfaeb0e00305cfaa019c22\",\"license\":\"MIT\"},\"contracts/lib/BytesToTypes.sol\":{\"content\":\"// From https://github.com/pouladzade/Seriality/blob/master/src/BytesToTypes.sol (Licensed under Apache2.0)\\n\\n// SPDX-License-Identifier: Apache2.0\\npragma solidity >=0.7.0;\\n\\nlibrary BytesToTypes {\\n\\n    function bytesToAddress(uint _offst, bytes memory _input) internal pure returns (address _output) {\\n        \\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint256(uint _offst, bytes memory _input) internal pure returns (uint256 _output) {\\n        \\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    } \\n}\\n\",\"keccak256\":\"0x201e23bab7751f0597b318648e00cfd72782de826c910b26f2fa199118afe85a\",\"license\":\"Apache2.0\"}},\"version\":1}",
  "bytecode": "0x610296610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80632f9680f51461003a575b600080fd5b6101676004803603604081101561005057600080fd5b81019060208101813564010000000081111561006b57600080fd5b82018360208201111561007d57600080fd5b8035906020019184600183028401116401000000008311171561009f57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156100f257600080fd5b82018360208201111561010457600080fd5b8035906020019184600183028401116401000000008311171561012657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506101dc945050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a1578181015183820152602001610189565b50505050905090810190601f1680156101ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b8151815160609190810160006020601f8401049050600060208651601f018161020157fe5b04905060405183815260005b838110156102295760010160208102898101519083015261020d565b5060005b8281101561024b57600101602081028881015190870183015261022d565b5092830160200160405250909594505050505056fea264697066735822122094e2e62fbb1fd5fe0f5566c88742f82dd3ca0d4d5372f6d94a3fcc61d754d88164736f6c63430007060033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80632f9680f51461003a575b600080fd5b6101676004803603604081101561005057600080fd5b81019060208101813564010000000081111561006b57600080fd5b82018360208201111561007d57600080fd5b8035906020019184600183028401116401000000008311171561009f57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092959493602081019350359150506401000000008111156100f257600080fd5b82018360208201111561010457600080fd5b8035906020019184600183028401116401000000008311171561012657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506101dc945050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101a1578181015183820152602001610189565b50505050905090810190601f1680156101ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b8151815160609190810160006020601f8401049050600060208651601f018161020157fe5b04905060405183815260005b838110156102295760010160208102898101519083015261020d565b5060005b8281101561024b57600101602081028881015190870183015261022d565b5092830160200160405250909594505050505056fea264697066735822122094e2e62fbb1fd5fe0f5566c88742f82dd3ca0d4d5372f6d94a3fcc61d754d88164736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}