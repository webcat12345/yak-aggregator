{
  "address": "0x7F8B47Ff174Eaf96960a050B220a907dFa3feD5b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDG",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDG_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "id",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPoolToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPoolTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xde7ac52205f3b93eac83d6f47bed3102c53900e74a3c09f32286720a8d1328f9",
  "receipt": {
    "to": null,
    "from": "0xd22044706DeA3c342f68396bEDBCf6a2536d951D",
    "contractAddress": "0x7F8B47Ff174Eaf96960a050B220a907dFa3feD5b",
    "transactionIndex": 0,
    "gasUsed": "2234280",
    "logsBloom": "0x
    "blockHash": "0x4320bf18f4ae18485270ee6959944123d87d2f606520f0fa77f661dadd712c39",
    "transactionHash": "0xde7ac52205f3b93eac83d6f47bed3102c53900e74a3c09f32286720a8d1328f9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10308610,
        "transactionHash": "0xde7ac52205f3b93eac83d6f47bed3102c53900e74a3c09f32286720a8d1328f9",
        "address": "0x7F8B47Ff174Eaf96960a050B220a907dFa3feD5b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x4320bf18f4ae18485270ee6959944123d87d2f606520f0fa77f661dadd712c39"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10308610,
        "transactionHash": "0xde7ac52205f3b93eac83d6f47bed3102c53900e74a3c09f32286720a8d1328f9",
        "address": "0x7F8B47Ff174Eaf96960a050B220a907dFa3feD5b",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x0000000000000000000000007f8b47ff174eaf96960a050b220a907dfa3fed5b"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000009a4c0",
        "logIndex": 1,
        "blockHash": "0x4320bf18f4ae18485270ee6959944123d87d2f606520f0fa77f661dadd712c39"
      }
    ],
    "blockNumber": 10308610,
    "cumulativeGasUsed": "2234280",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "GmxAdapterV0",
    "0x9ab2De34A33fB459b538c43f251eB825645e8595",
    632000
  ],
  "solcInputHash": "34737a4cc41178acbac03cc354befc80",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDG_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPoolToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPoolTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverAVAX(uint256)\":{\"params\":{\"_amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"_tokenAddress\":\"token address\",\"_tokenAmount\":\"amount to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"_spender\":\"address\",\"_token\":\"address\"}},\"setAllowances()\":{\"details\":\"Should use modifier `onlyOwner` to avoid griefing\"},\"swap(uint256,uint256,address,address,address)\":{\"params\":{\"_amountIn\":\"input amount in starting token\",\"_amountOut\":\"amount out in ending token\",\"_fromToken\":\"ERC20 token being sold\",\"_to\":\"address where swapped funds should be sent to\",\"_toToken\":\"ERC20 token being bought\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"swap(uint256,uint256,address,address,address)\":{\"notice\":\"Execute a swap from token to token assuming this contract already holds input tokensInteract through the router\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/GmxAdapter.sol\":\"GmxAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                              \\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IWETH.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\n\\nabstract contract YakAdapter is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(\\n        address indexed _tokenFrom, \\n        address indexed _tokenTo, \\n        uint _amountIn, \\n        uint _amountOut\\n    );\\n\\n    event UpdatedGasEstimate(\\n        address indexed _adapter,\\n        uint _newEstimate\\n    );\\n\\n    event Recovered(\\n        address indexed _asset, \\n        uint amount\\n    );\\n\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n    address internal constant AVAX = address(0);\\n    uint internal constant UINT_MAX = type(uint).max;\\n\\n    uint public swapGasEstimate;\\n    string public name;\\n\\n    function setSwapGasEstimate(uint _estimate) public onlyOwner {\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param _token address\\n     * @param _spender address\\n     */\\n    function revokeAllowance(address _token, address _spender) external onlyOwner {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param _tokenAddress token address\\n     * @param _tokenAmount amount to recover\\n     */\\n    function recoverERC20(address _tokenAddress, uint _tokenAmount) external onlyOwner {\\n        require(_tokenAmount > 0, 'YakAdapter: Nothing to recover');\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param _amount amount\\n     */\\n    function recoverAVAX(uint _amount) external onlyOwner {\\n        require(_amount > 0, 'YakAdapter: Nothing to recover');\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint _amountIn, \\n        address _tokenIn, \\n        address _tokenOut\\n    ) external view returns (uint) {\\n        return _query(\\n            _amountIn, \\n            _tokenIn, \\n            _tokenOut\\n        );\\n    }\\n\\n    /**\\n     * Execute a swap from token to token assuming this contract already holds input tokens\\n     * @notice Interact through the router\\n     * @param _amountIn input amount in starting token\\n     * @param _amountOut amount out in ending token\\n     * @param _fromToken ERC20 token being sold\\n     * @param _toToken ERC20 token being bought\\n     * @param _to address where swapped funds should be sent to\\n     */\\n    function swap(\\n        uint _amountIn, \\n        uint _amountOut,\\n        address _fromToken, \\n        address _toToken, \\n        address _to\\n    ) external {\\n        _approveIfNeeded(_fromToken, _amountIn);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        emit YakAdapterSwap(\\n            _fromToken, \\n            _toToken,\\n            _amountIn, \\n            _amountOut \\n        );\\n    } \\n\\n    /**\\n     * @notice Return expected funds to user\\n     * @dev Skip if funds should stay in the contract\\n     * @param _token address\\n     * @param _amount tokens to return\\n     * @param _to address where funds should be sent to\\n     */\\n    function _returnTo(address _token, uint _amount, address _to) internal {\\n        if (address(this)!=_to) {\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Wrap AVAX\\n     * @param _amount amount\\n     */\\n    function _wrap(uint _amount) internal {\\n        IWETH(WAVAX).deposit{value: _amount}();\\n    }\\n\\n    /**\\n     * @notice Unwrap WAVAX\\n     * @param _amount amount\\n     */\\n    function _unwrap(uint _amount) internal {\\n        IWETH(WAVAX).withdraw(_amount);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of a swap\\n     * @dev Must return tokens to address(this)\\n     * @dev Wrapping is handled external to this function\\n     * @param _amountIn amount being sold\\n     * @param _amountOut amount being bought\\n     * @param _fromToken ERC20 token being sold\\n     * @param _toToken ERC20 token being bought\\n     * @param _to Where recieved tokens are sent to\\n     */\\n    function _swap(\\n        uint _amountIn, \\n        uint _amountOut, \\n        address _fromToken, \\n        address _toToken, \\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint _amountIn,\\n        address _tokenIn, \\n        address _tokenOut\\n    ) internal virtual view returns (uint);\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Should use modifier `onlyOwner` to avoid griefing\\n     */\\n    function setAllowances() public virtual;\\n\\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal virtual;\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x8640baef184d9eec0190581dd4e19ee3c0aea5df1a8c0084694ac194900527fd\",\"license\":\"GPL-3.0-only\"},\"contracts/adapters/GmxAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                              \\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interface/IGmxVault.sol\\\";\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"../lib/SafeMath.sol\\\";\\nimport \\\"../YakAdapter.sol\\\";\\n\\ncontract GmxAdapter is YakAdapter {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n\\n    bytes32 public constant id = keccak256(\\\"GmxAdapter\\\");\\n    address public constant USDG = 0xc0253c3cC6aa5Ab407b5795a04c28fB063273894;\\n    uint public constant BASIS_POINTS_DIVISOR = 1e4;\\n    uint public constant PRICE_PRECISION = 1e30;\\n    uint public constant USDG_DECIMALS = 18;\\n    address public vault;\\n    mapping(address => uint) public tokenDecimals;\\n    mapping(address => bool) public isPoolToken;\\n\\n    constructor(string memory _name, address _vault, uint _swapGasEstimate) {\\n        name = _name; \\n        vault = _vault;\\n        setSwapGasEstimate(_swapGasEstimate);\\n        setPoolTokens();\\n    }\\n\\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\\n        uint allowance = IERC20(_tokenIn).allowance(address(this), vault);\\n        if (allowance < _amount) {\\n            IERC20(_tokenIn).safeApprove(vault, UINT_MAX);\\n        }\\n    }\\n\\n    function setPoolTokens() public {\\n        uint whitelistedTknsLen = IGmxVault(vault).allWhitelistedTokensLength();\\n        for (uint i = 0; i < whitelistedTknsLen; i++) {\\n            address token = IGmxVault(vault).allWhitelistedTokens(i);\\n            tokenDecimals[token] = IERC20(token).decimals();\\n            isPoolToken[token] = true;\\n        }\\n    }\\n\\n    function adjustForDecimals(\\n        uint _amount, \\n        address _tokenDiv, \\n        address _tokenMul\\n    ) internal view returns (uint) {\\n        uint decimalsDiv = _tokenDiv == USDG ? USDG_DECIMALS : tokenDecimals[_tokenDiv];\\n        uint decimalsMul = _tokenMul == USDG ? USDG_DECIMALS : tokenDecimals[_tokenMul];\\n        return _amount.mul(10**decimalsMul) / 10**decimalsDiv;\\n    }\\n\\n    function getPrices(\\n        address _tokenIn, \\n        address _tokenOut\\n    ) internal view returns (uint priceIn, uint priceOut) {\\n        IGmxVaultPriceFeed priceFeed = IGmxVault(vault).priceFeed();\\n        priceIn = priceFeed.getPrice(_tokenIn, false, true, true);\\n        priceOut = priceFeed.getPrice(_tokenOut, true, true, true);\\n    }\\n\\n    function hasVaultEnoughBal(\\n        address _token, \\n        uint _amount\\n    ) private view returns (bool) {\\n        return IERC20(_token).balanceOf(vault) >= _amount;\\n    }\\n\\n    function isWithinVaultLimits(\\n        address _tokenIn,\\n        address _tokenOut, \\n        uint _amountInUsdg,\\n        uint _amountOut\\n    ) private view returns (bool) {\\n        // Check pool balance is not exceeded\\n        uint poolBalTknOut = IGmxVault(vault).poolAmounts(_tokenOut);\\n        if (poolBalTknOut >= _amountOut) {\\n            // Check if amountOut exceeds reserved amount\\n            uint newPoolBalTknOut = poolBalTknOut.sub(_amountOut);\\n            uint reservedAmount = IGmxVault(vault).reservedAmounts(_tokenOut);\\n            bool reservedAmountNotExceeded = newPoolBalTknOut >= reservedAmount;\\n            // Check if amountOut exceeds buffer amount\\n            uint bufferAmount = IGmxVault(vault).bufferAmounts(_tokenOut);\\n            bool bufferAmountNotExceeded = newPoolBalTknOut >= bufferAmount;\\n            // Check if amountIn(usdg) exceeds max debt\\n            uint newUsdgAmount = IGmxVault(vault).usdgAmounts(_tokenIn).add(_amountInUsdg);\\n            uint maxUsdgAmount = IGmxVault(vault).maxUsdgAmounts(_tokenIn);\\n            bool maxDebtNotExceeded = newUsdgAmount <= maxUsdgAmount;\\n\\n            if (reservedAmountNotExceeded && bufferAmountNotExceeded && maxDebtNotExceeded) {\\n                return true;\\n            }\\n        }   \\n    }\\n\\n    function _query(\\n        uint _amountIn, \\n        address _tokenIn, \\n        address _tokenOut\\n    ) internal override view returns (uint) {\\n        if (\\n            _amountIn==0 || \\n            _tokenIn==_tokenOut ||\\n            !IGmxVault(vault).whitelistedTokens(_tokenIn) ||\\n            !IGmxVault(vault).whitelistedTokens(_tokenOut) ||\\n            !IGmxVault(vault).isSwapEnabled() ||\\n            !hasVaultEnoughBal(_tokenIn, 1)\\n        ) { return 0; }\\n\\n        ( uint priceIn, uint priceOut ) = getPrices(_tokenIn, _tokenOut);\\n        uint amountOut = _amountIn.mul(priceIn) / priceOut;\\n\\n        amountOut = adjustForDecimals(\\n            amountOut, \\n            _tokenIn, \\n            _tokenOut\\n        );\\n        uint usdgAmount = _amountIn.mul(priceIn) / PRICE_PRECISION;\\n        usdgAmount = adjustForDecimals(\\n            usdgAmount, \\n            _tokenIn, \\n            USDG\\n        );\\n        uint feeBasisPoints = IGmxVault(vault).vaultUtils()\\n            .getSwapFeeBasisPoints(\\n                _tokenIn, \\n                _tokenOut, \\n                usdgAmount\\n            );\\n        uint amountOutAfterFees = amountOut\\n            .mul(BASIS_POINTS_DIVISOR.sub(feeBasisPoints))\\n            / BASIS_POINTS_DIVISOR;   \\n\\n        bool withinVaultLimits = isWithinVaultLimits(\\n            _tokenIn, \\n            _tokenOut, \\n            usdgAmount, \\n            amountOutAfterFees\\n        );\\n        if (withinVaultLimits) {\\n            return amountOutAfterFees;\\n        }\\n\\n    }\\n\\n    function _swap(\\n        uint _amountIn, \\n        uint _amountOut, \\n        address _tokenIn, \\n        address _tokenOut, \\n        address _to\\n    ) internal override {\\n        IERC20(_tokenIn).safeTransfer(vault, _amountIn);\\n        IGmxVault(vault).swap(\\n            _tokenIn,\\n            _tokenOut,\\n            address(this)  // No check for amount-out within swap function\\n        );\\n        // Confidently transfer amount-out\\n        _returnTo(_tokenOut, _amountOut, _to);\\n    }\\n\\n    function setAllowances() public override onlyOwner {}\\n\\n}\",\"keccak256\":\"0x915c83295f085aa33498132aa7bd0b6eed350cc3b19f2e5c9b2eeb22bd62bcba\",\"license\":\"GPL-3.0-only\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IERC20 {\\n    event Approval(address,address,uint);\\n    event Transfer(address,address,uint);\\n    function name() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function transferFrom(address,address,uint) external returns (bool);\\n    function allowance(address,address) external view returns (uint);\\n    function approve(address,uint) external returns (bool);\\n    function transfer(address,uint) external returns (bool);\\n    function balanceOf(address) external view returns (uint);\\n    function nonces(address) external view returns (uint);  // Only tokens that support permit\\n    function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) external;  // Only tokens that support permit\\n    function swap(address,uint256) external;  // Only Avalanche bridge tokens \\n    function swapSupply(address) external view returns (uint);  // Only Avalanche bridge tokens \\n}\",\"keccak256\":\"0xc71d31ef4f838908478ceb97d1ba0d95c4046393bd1cf26d6079d57d7c094e8d\",\"license\":\"MIT\"},\"contracts/interface/IGmxVault.sol\":{\"content\":\"pragma solidity >=0.7.0;\\n\\ninterface IGmxVaultPriceFeed {\\n    function getPrice(address,bool,bool,bool) external view returns (uint);\\n}\\n\\ninterface IGmxVaultUtils {\\n    function getSwapFeeBasisPoints(address,address,uint256) external view returns (uint);\\n}\\n\\ninterface IGmxVault {\\n\\n    function swap(address,address,address) external;\\n    function setBufferAmount(address,uint) external;\\n\\n    function whitelistedTokens(address) external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function vaultUtils() external view returns (IGmxVaultUtils);\\n    function priceFeed() external view returns (IGmxVaultPriceFeed);\\n    function allWhitelistedTokensLength() external view returns (uint);\\n    function allWhitelistedTokens(uint) external view returns (address);\\n    function maxUsdgAmounts(address) external view returns (uint);\\n    function usdgAmounts(address) external view returns (uint);\\n    function reservedAmounts(address) external view returns (uint);\\n    function bufferAmounts(address) external view returns (uint);\\n    function poolAmounts(address) external view returns (uint);\\n    function gov() external view returns (address);\\n\\n\\n}\",\"keccak256\":\"0x85e8560c1876788e8ca6277201735a8ae2ae2c2456861b71f9472b98e12366fb\"},\"contracts/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 amount) external;\\n    function deposit() external payable;\\n}\",\"keccak256\":\"0xaff69efb1b24f6448740e4c71a16d86eedcd2407606ac449dd09dad5043b7923\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8b25f8514264f6d0ed4279a311d1be64012183292b1e7d6707107928dbac1142\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: New owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1331d91852367ea5319eed242ef8ebbf245a0271f2b19093f5521ae206c9a1b3\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x95e46e79b970b6e35511a773d310d63d7de30a5314e9bbfc4d8b465acec6f521\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'SafeMath: ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'SafeMath: ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'SafeMath: ds-math-mul-overflow');\\n    }\\n}\",\"keccak256\":\"0xee319854a4e682f8fab4f0404aa9604c9eea8190f6ec72c9cc67f25785b3ae01\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200244438038062002444833981810160405260608110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b506040908152602082015191015190925090506000620001056200019e565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508251620001649060029060208601906200041a565b50600380546001600160a01b0319166001600160a01b0384161790556200018b81620001a2565b6200019562000259565b505050620004c6565b3390565b620001ac6200019e565b6001600160a01b0316620001bf6200040b565b6001600160a01b0316146200021b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181905560408051828152905130917ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a919081900360200190a250565b60035460408051630421583b60e11b815290516000926001600160a01b031691630842b076916004808301926020929190829003018186803b1580156200029f57600080fd5b505afa158015620002b4573d6000803e3d6000fd5b505050506040513d6020811015620002cb57600080fd5b5051905060005b81811015620004075760035460408051630e468baf60e41b81526004810184905290516000926001600160a01b03169163e468baf0916024808301926020929190829003018186803b1580156200032857600080fd5b505afa1580156200033d573d6000803e3d6000fd5b505050506040513d60208110156200035457600080fd5b50516040805163313ce56760e01b815290519192506001600160a01b0383169163313ce56791600480820192602092909190829003018186803b1580156200039b57600080fd5b505afa158015620003b0573d6000803e3d6000fd5b505050506040513d6020811015620003c757600080fd5b50516001600160a01b03909116600090815260046020908152604080832060ff9094169093556005905220805460ff1916600190811790915501620002d2565b5050565b6000546001600160a01b031690565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200045257600085556200049d565b82601f106200046d57805160ff19168380011785556200049d565b828001600101855582156200049d579182015b828111156200049d57825182559160200191906001019062000480565b50620004ab929150620004af565b5090565b5b80821115620004ab5760008155600101620004b0565b611f6e80620004d66000396000f3fe60806040526004361061016e5760003560e01c80638980f11f116100cb578063dbd9a4d41161007f578063ef99893a11610059578063ef99893a14610499578063f2fde38b146104da578063fbfa77cf1461050d57610175565b8063dbd9a4d4146103ec578063de260f3714610401578063eab90da61461044857610175565b80638ee573ac116100b05780638ee573ac1461038f57806395082d25146103c2578063af640d0f146103d757610175565b80638980f11f146103415780638da5cb5b1461037a57610175565b806369cff80d116101225780637ae26773116101075780637ae26773146102c757806384a33e6314610302578063870d917c1461032c57610175565b806369cff80d1461029d578063715018a6146102b257610175565b8063126082cf11610153578063126082cf1461021b5780634ebb79161461024257806357ae3a9f1461026c57610175565b806306fdde031461017a578063114e4ce41461020457610175565b3661017557005b600080fd5b34801561018657600080fd5b5061018f610522565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c95781810151838201526020016101b1565b50505050905090810190601f1680156101f65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021057600080fd5b506102196105ad565b005b34801561022757600080fd5b5061023061079f565b60408051918252519081900360200190f35b34801561024e57600080fd5b506102196004803603602081101561026557600080fd5b50356107a5565b34801561027857600080fd5b506102816108d6565b604080516001600160a01b039092168252519081900360200190f35b3480156102a957600080fd5b506102306108ee565b3480156102be57600080fd5b506102196108f4565b3480156102d357600080fd5b50610219600480360360408110156102ea57600080fd5b506001600160a01b03813581169160200135166109bf565b34801561030e57600080fd5b506102196004803603602081101561032557600080fd5b5035610a48565b34801561033857600080fd5b50610230610afa565b34801561034d57600080fd5b506102196004803603604081101561036457600080fd5b506001600160a01b038135169060200135610aff565b34801561038657600080fd5b50610281610c1f565b34801561039b57600080fd5b50610230600480360360208110156103b257600080fd5b50356001600160a01b0316610c2e565b3480156103ce57600080fd5b50610230610c40565b3480156103e357600080fd5b50610230610c51565b3480156103f857600080fd5b50610219610c75565b34801561040d57600080fd5b506104346004803603602081101561042457600080fd5b50356001600160a01b0316610ceb565b604080519115158252519081900360200190f35b34801561045457600080fd5b50610219600480360360a081101561046b57600080fd5b508035906020810135906001600160a01b036040820135811691606081013582169160809091013516610d00565b3480156104a557600080fd5b50610230600480360360608110156104bc57600080fd5b508035906001600160a01b0360208201358116916040013516610d71565b3480156104e657600080fd5b50610219600480360360208110156104fd57600080fd5b50356001600160a01b0316610d88565b34801561051957600080fd5b50610281610ea9565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156105a55780601f1061057a576101008083540402835291602001916105a5565b820191906000526020600020905b81548152906001019060200180831161058857829003601f168201915b505050505081565b600354604080517f0842b07600000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691630842b076916004808301926020929190829003018186803b15801561060b57600080fd5b505afa15801561061f573d6000803e3d6000fd5b505050506040513d602081101561063557600080fd5b5051905060005b8181101561079b57600354604080517fe468baf00000000000000000000000000000000000000000000000000000000081526004810184905290516000926001600160a01b03169163e468baf0916024808301926020929190829003018186803b1580156106a957600080fd5b505afa1580156106bd573d6000803e3d6000fd5b505050506040513d60208110156106d357600080fd5b5051604080517f313ce56700000000000000000000000000000000000000000000000000000000815290519192506001600160a01b0383169163313ce56791600480820192602092909190829003018186803b15801561073257600080fd5b505afa158015610746573d6000803e3d6000fd5b505050506040513d602081101561075c57600080fd5b50516001600160a01b03909116600090815260046020908152604080832060ff9094169093556005905220805460ff191660019081179091550161063c565b5050565b61271081565b6107ad610eb8565b6001600160a01b03166107be610c1f565b6001600160a01b031614610819576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000811161086e576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b604051339082156108fc029083906000818181858888f1935050505015801561089b573d6000803e3d6000fd5b506040805182815290516000917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a250565b73c0253c3cc6aa5ab407b5795a04c28fb06327389481565b60015481565b6108fc610eb8565b6001600160a01b031661090d610c1f565b6001600160a01b031614610968576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6109c7610eb8565b6001600160a01b03166109d8610c1f565b6001600160a01b031614610a33576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61079b6001600160a01b038316826000610ebc565b610a50610eb8565b6001600160a01b0316610a61610c1f565b6001600160a01b031614610abc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181905560408051828152905130917ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a919081900360200190a250565b601281565b610b07610eb8565b6001600160a01b0316610b18610c1f565b6001600160a01b031614610b73576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111610bc8576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b610bdc6001600160a01b0383163383610ff1565b6040805182815290516001600160a01b038416917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a25050565b6000546001600160a01b031690565b60046020526000908152604090205481565b6c0c9f2c9cd04674edea4000000081565b7f4d060be51d092539068102175593f02416ab6cbf2d2fb243d45f28d414c7da9081565b610c7d610eb8565b6001600160a01b0316610c8e610c1f565b6001600160a01b031614610ce9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b565b60056020526000908152604090205460ff1681565b610d0a8386611010565b610d1785858585856110b6565b816001600160a01b0316836001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8787604051808381526020018281526020019250505060405180910390a35050505050565b6000610d7e84848461116f565b90505b9392505050565b610d90610eb8565b6001600160a01b0316610da1610c1f565b6001600160a01b031614610dfc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610e415760405162461bcd60e51b8152600401808060200182810382526026815260200180611f136026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b3390565b801580610f445750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610ef29030908690600401611df0565b60206040518083038186803b158015610f0a57600080fd5b505afa158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f429190611d9f565b155b610f695760405162461bcd60e51b8152600401610f6090611eb5565b60405180910390fd5b610fec8363095ea7b360e01b8484604051602401610f88929190611e0a565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261151f565b505050565b610fec8363a9059cbb60e01b8484604051602401610f88929190611e0a565b60035460408051636eb1769f60e11b81523060048201526001600160a01b039283166024820152905160009285169163dd62ed3e916044808301926020929190829003018186803b15801561106457600080fd5b505afa158015611078573d6000803e3d6000fd5b505050506040513d602081101561108e57600080fd5b5051905081811015610fec57600354610fec906001600160a01b038581169116600019610ebc565b6003546110d0906001600160a01b03858116911687610ff1565b600354604080517f933162120000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015230604483015291519190921691639331621291606480830192600092919082900301818387803b15801561114557600080fd5b505af1158015611159573d6000803e3d6000fd5b505050506111688285836115db565b5050505050565b600083158061118f5750816001600160a01b0316836001600160a01b0316145b80611210575060035460408051630daf9c2160e41b81526001600160a01b0386811660048301529151919092169163daf9c210916024808301926020929190829003018186803b1580156111e257600080fd5b505afa1580156111f6573d6000803e3d6000fd5b505050506040513d602081101561120c57600080fd5b5051155b80611291575060035460408051630daf9c2160e41b81526001600160a01b0385811660048301529151919092169163daf9c210916024808301926020929190829003018186803b15801561126357600080fd5b505afa158015611277573d6000803e3d6000fd5b505050506040513d602081101561128d57600080fd5b5051155b806113135750600360009054906101000a90046001600160a01b03166001600160a01b031663351a964d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112e557600080fd5b505afa1580156112f9573d6000803e3d6000fd5b505050506040513d602081101561130f57600080fd5b5051155b8061132657506113248360016115ff565b155b1561133357506000610d81565b60008061134085856116a1565b90925090506000816113528885611848565b8161135957fe5b0490506113678187876118b4565b905060006c0c9f2c9cd04674edea400000006113838986611848565b8161138a57fe5b0490506113ac818873c0253c3cc6aa5ab407b5795a04c28fb0632738946118b4565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316636abbe0c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156113fe57600080fd5b505afa158015611412573d6000803e3d6000fd5b505050506040513d602081101561142857600080fd5b5051604080517fda1338160000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301528a81166024830152604482018690529151919092169163da133816916064808301926020929190829003018186803b15801561149c57600080fd5b505afa1580156114b0573d6000803e3d6000fd5b505050506040513d60208110156114c657600080fd5b5051905060006127106114e36114dc8285611973565b8690611848565b816114ea57fe5b04905060006114fb8a8a86856119cb565b9050801561151157509550610d81945050505050565b505050505050509392505050565b600080836001600160a01b03168360405161153a9190611db7565b6000604051808303816000865af19150503d8060008114611577576040519150601f19603f3d011682016040523d82523d6000602084013e61157c565b606091505b50915091508161159e5760405162461bcd60e51b8152600401610f6090611e23565b8051156115d557808060200190518101906115b99190611d7f565b6115d55760405162461bcd60e51b8152600401610f6090611e58565b50505050565b306001600160a01b03821614610fec57610fec6001600160a01b0384168284610ff1565b600354604080517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015290516000928492908616916370a0823191602480820192602092909190829003018186803b15801561166a57600080fd5b505afa15801561167e573d6000803e3d6000fd5b505050506040513d602081101561169457600080fd5b5051101590505b92915050565b6000806000600360009054906101000a90046001600160a01b03166001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116f457600080fd5b505afa158015611708573d6000803e3d6000fd5b505050506040513d602081101561171e57600080fd5b5051604080516317e1d38560e11b81526001600160a01b038881166004830152600060248301526001604483018190526064830152915192935090831691632fc3a70a91608480820192602092909190829003018186803b15801561178257600080fd5b505afa158015611796573d6000803e3d6000fd5b505050506040513d60208110156117ac57600080fd5b5051604080516317e1d38560e11b81526001600160a01b038781166004830152600160248301819052604483018190526064830152915192955090831691632fc3a70a91608480820192602092909190829003018186803b15801561181057600080fd5b505afa158015611824573d6000803e3d6000fd5b505050506040513d602081101561183a57600080fd5b505192959294509192505050565b60008115806118635750508082028282828161186057fe5b04145b61169b576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a2064732d6d6174682d6d756c2d6f766572666c6f770000604482015290519081900360640190fd5b6000806001600160a01b03841673c0253c3cc6aa5ab407b5795a04c28fb063273894146118f9576001600160a01b0384166000908152600460205260409020546118fc565b60125b905060006001600160a01b03841673c0253c3cc6aa5ab407b5795a04c28fb06327389414611942576001600160a01b038416600090815260046020526040902054611945565b60125b905081600a0a61196182600a0a8861184890919063ffffffff16565b8161196857fe5b049695505050505050565b8082038281111561169b576040805162461bcd60e51b815260206004820152601f60248201527f536166654d6174683a2064732d6d6174682d7375622d756e646572666c6f7700604482015290519081900360640190fd5b600354604080517f52f55eed0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529151600093849316916352f55eed916024808301926020929190829003018186803b158015611a3357600080fd5b505afa158015611a47573d6000803e3d6000fd5b505050506040513d6020811015611a5d57600080fd5b50519050828110611d1d576000611a748285611973565b600354604080517fc3c7b9e90000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301529151939450600093919092169163c3c7b9e9916024808301926020929190829003018186803b158015611ae057600080fd5b505afa158015611af4573d6000803e3d6000fd5b505050506040513d6020811015611b0a57600080fd5b5051600354604080517f4a993ee90000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152915193945084861015936000939290921691634a993ee991602480820192602092909190829003018186803b158015611b7e57600080fd5b505afa158015611b92573d6000803e3d6000fd5b505050506040513d6020811015611ba857600080fd5b5051600354604080517f1aa4ace50000000000000000000000000000000000000000000000000000000081526001600160a01b038e8116600483015291519394508488101593600093611c52938e93911691631aa4ace591602480820192602092909190829003018186803b158015611c2057600080fd5b505afa158015611c34573d6000803e3d6000fd5b505050506040513d6020811015611c4a57600080fd5b505190611d27565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663ad1e4f8d8e6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611cb857600080fd5b505afa158015611ccc573d6000803e3d6000fd5b505050506040513d6020811015611ce257600080fd5b5051905080821115858015611cf45750835b8015611cfd5750805b15611d145760019950505050505050505050611d1f565b50505050505050505b505b949350505050565b8082018281101561169b576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a2064732d6d6174682d6164642d6f766572666c6f770000604482015290519081900360640190fd5b600060208284031215611d90578081fd5b81518015158114610d81578182fd5b600060208284031215611db0578081fd5b5051919050565b60008251815b81811015611dd75760208186018101518583015201611dbd565b81811115611de55782828501525b509190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060608201526080019056fe4f776e61626c653a204e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212205c885d586c240d883ef088ce5e25650b030d4f15041c006d0fde227b6d37c61764736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061016e5760003560e01c80638980f11f116100cb578063dbd9a4d41161007f578063ef99893a11610059578063ef99893a14610499578063f2fde38b146104da578063fbfa77cf1461050d57610175565b8063dbd9a4d4146103ec578063de260f3714610401578063eab90da61461044857610175565b80638ee573ac116100b05780638ee573ac1461038f57806395082d25146103c2578063af640d0f146103d757610175565b80638980f11f146103415780638da5cb5b1461037a57610175565b806369cff80d116101225780637ae26773116101075780637ae26773146102c757806384a33e6314610302578063870d917c1461032c57610175565b806369cff80d1461029d578063715018a6146102b257610175565b8063126082cf11610153578063126082cf1461021b5780634ebb79161461024257806357ae3a9f1461026c57610175565b806306fdde031461017a578063114e4ce41461020457610175565b3661017557005b600080fd5b34801561018657600080fd5b5061018f610522565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101c95781810151838201526020016101b1565b50505050905090810190601f1680156101f65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561021057600080fd5b506102196105ad565b005b34801561022757600080fd5b5061023061079f565b60408051918252519081900360200190f35b34801561024e57600080fd5b506102196004803603602081101561026557600080fd5b50356107a5565b34801561027857600080fd5b506102816108d6565b604080516001600160a01b039092168252519081900360200190f35b3480156102a957600080fd5b506102306108ee565b3480156102be57600080fd5b506102196108f4565b3480156102d357600080fd5b50610219600480360360408110156102ea57600080fd5b506001600160a01b03813581169160200135166109bf565b34801561030e57600080fd5b506102196004803603602081101561032557600080fd5b5035610a48565b34801561033857600080fd5b50610230610afa565b34801561034d57600080fd5b506102196004803603604081101561036457600080fd5b506001600160a01b038135169060200135610aff565b34801561038657600080fd5b50610281610c1f565b34801561039b57600080fd5b50610230600480360360208110156103b257600080fd5b50356001600160a01b0316610c2e565b3480156103ce57600080fd5b50610230610c40565b3480156103e357600080fd5b50610230610c51565b3480156103f857600080fd5b50610219610c75565b34801561040d57600080fd5b506104346004803603602081101561042457600080fd5b50356001600160a01b0316610ceb565b604080519115158252519081900360200190f35b34801561045457600080fd5b50610219600480360360a081101561046b57600080fd5b508035906020810135906001600160a01b036040820135811691606081013582169160809091013516610d00565b3480156104a557600080fd5b50610230600480360360608110156104bc57600080fd5b508035906001600160a01b0360208201358116916040013516610d71565b3480156104e657600080fd5b50610219600480360360208110156104fd57600080fd5b50356001600160a01b0316610d88565b34801561051957600080fd5b50610281610ea9565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156105a55780601f1061057a576101008083540402835291602001916105a5565b820191906000526020600020905b81548152906001019060200180831161058857829003601f168201915b505050505081565b600354604080517f0842b07600000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691630842b076916004808301926020929190829003018186803b15801561060b57600080fd5b505afa15801561061f573d6000803e3d6000fd5b505050506040513d602081101561063557600080fd5b5051905060005b8181101561079b57600354604080517fe468baf00000000000000000000000000000000000000000000000000000000081526004810184905290516000926001600160a01b03169163e468baf0916024808301926020929190829003018186803b1580156106a957600080fd5b505afa1580156106bd573d6000803e3d6000fd5b505050506040513d60208110156106d357600080fd5b5051604080517f313ce56700000000000000000000000000000000000000000000000000000000815290519192506001600160a01b0383169163313ce56791600480820192602092909190829003018186803b15801561073257600080fd5b505afa158015610746573d6000803e3d6000fd5b505050506040513d602081101561075c57600080fd5b50516001600160a01b03909116600090815260046020908152604080832060ff9094169093556005905220805460ff191660019081179091550161063c565b5050565b61271081565b6107ad610eb8565b6001600160a01b03166107be610c1f565b6001600160a01b031614610819576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000811161086e576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b604051339082156108fc029083906000818181858888f1935050505015801561089b573d6000803e3d6000fd5b506040805182815290516000917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a250565b73c0253c3cc6aa5ab407b5795a04c28fb06327389481565b60015481565b6108fc610eb8565b6001600160a01b031661090d610c1f565b6001600160a01b031614610968576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6109c7610eb8565b6001600160a01b03166109d8610c1f565b6001600160a01b031614610a33576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61079b6001600160a01b038316826000610ebc565b610a50610eb8565b6001600160a01b0316610a61610c1f565b6001600160a01b031614610abc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181905560408051828152905130917ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a919081900360200190a250565b601281565b610b07610eb8565b6001600160a01b0316610b18610c1f565b6001600160a01b031614610b73576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111610bc8576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b610bdc6001600160a01b0383163383610ff1565b6040805182815290516001600160a01b038416917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a25050565b6000546001600160a01b031690565b60046020526000908152604090205481565b6c0c9f2c9cd04674edea4000000081565b7f4d060be51d092539068102175593f02416ab6cbf2d2fb243d45f28d414c7da9081565b610c7d610eb8565b6001600160a01b0316610c8e610c1f565b6001600160a01b031614610ce9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b565b60056020526000908152604090205460ff1681565b610d0a8386611010565b610d1785858585856110b6565b816001600160a01b0316836001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8787604051808381526020018281526020019250505060405180910390a35050505050565b6000610d7e84848461116f565b90505b9392505050565b610d90610eb8565b6001600160a01b0316610da1610c1f565b6001600160a01b031614610dfc576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610e415760405162461bcd60e51b8152600401808060200182810382526026815260200180611f136026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b3390565b801580610f445750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610ef29030908690600401611df0565b60206040518083038186803b158015610f0a57600080fd5b505afa158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f429190611d9f565b155b610f695760405162461bcd60e51b8152600401610f6090611eb5565b60405180910390fd5b610fec8363095ea7b360e01b8484604051602401610f88929190611e0a565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261151f565b505050565b610fec8363a9059cbb60e01b8484604051602401610f88929190611e0a565b60035460408051636eb1769f60e11b81523060048201526001600160a01b039283166024820152905160009285169163dd62ed3e916044808301926020929190829003018186803b15801561106457600080fd5b505afa158015611078573d6000803e3d6000fd5b505050506040513d602081101561108e57600080fd5b5051905081811015610fec57600354610fec906001600160a01b038581169116600019610ebc565b6003546110d0906001600160a01b03858116911687610ff1565b600354604080517f933162120000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015230604483015291519190921691639331621291606480830192600092919082900301818387803b15801561114557600080fd5b505af1158015611159573d6000803e3d6000fd5b505050506111688285836115db565b5050505050565b600083158061118f5750816001600160a01b0316836001600160a01b0316145b80611210575060035460408051630daf9c2160e41b81526001600160a01b0386811660048301529151919092169163daf9c210916024808301926020929190829003018186803b1580156111e257600080fd5b505afa1580156111f6573d6000803e3d6000fd5b505050506040513d602081101561120c57600080fd5b5051155b80611291575060035460408051630daf9c2160e41b81526001600160a01b0385811660048301529151919092169163daf9c210916024808301926020929190829003018186803b15801561126357600080fd5b505afa158015611277573d6000803e3d6000fd5b505050506040513d602081101561128d57600080fd5b5051155b806113135750600360009054906101000a90046001600160a01b03166001600160a01b031663351a964d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156112e557600080fd5b505afa1580156112f9573d6000803e3d6000fd5b505050506040513d602081101561130f57600080fd5b5051155b8061132657506113248360016115ff565b155b1561133357506000610d81565b60008061134085856116a1565b90925090506000816113528885611848565b8161135957fe5b0490506113678187876118b4565b905060006c0c9f2c9cd04674edea400000006113838986611848565b8161138a57fe5b0490506113ac818873c0253c3cc6aa5ab407b5795a04c28fb0632738946118b4565b90506000600360009054906101000a90046001600160a01b03166001600160a01b0316636abbe0c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156113fe57600080fd5b505afa158015611412573d6000803e3d6000fd5b505050506040513d602081101561142857600080fd5b5051604080517fda1338160000000000000000000000000000000000000000000000000000000081526001600160a01b038b811660048301528a81166024830152604482018690529151919092169163da133816916064808301926020929190829003018186803b15801561149c57600080fd5b505afa1580156114b0573d6000803e3d6000fd5b505050506040513d60208110156114c657600080fd5b5051905060006127106114e36114dc8285611973565b8690611848565b816114ea57fe5b04905060006114fb8a8a86856119cb565b9050801561151157509550610d81945050505050565b505050505050509392505050565b600080836001600160a01b03168360405161153a9190611db7565b6000604051808303816000865af19150503d8060008114611577576040519150601f19603f3d011682016040523d82523d6000602084013e61157c565b606091505b50915091508161159e5760405162461bcd60e51b8152600401610f6090611e23565b8051156115d557808060200190518101906115b99190611d7f565b6115d55760405162461bcd60e51b8152600401610f6090611e58565b50505050565b306001600160a01b03821614610fec57610fec6001600160a01b0384168284610ff1565b600354604080517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015290516000928492908616916370a0823191602480820192602092909190829003018186803b15801561166a57600080fd5b505afa15801561167e573d6000803e3d6000fd5b505050506040513d602081101561169457600080fd5b5051101590505b92915050565b6000806000600360009054906101000a90046001600160a01b03166001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156116f457600080fd5b505afa158015611708573d6000803e3d6000fd5b505050506040513d602081101561171e57600080fd5b5051604080516317e1d38560e11b81526001600160a01b038881166004830152600060248301526001604483018190526064830152915192935090831691632fc3a70a91608480820192602092909190829003018186803b15801561178257600080fd5b505afa158015611796573d6000803e3d6000fd5b505050506040513d60208110156117ac57600080fd5b5051604080516317e1d38560e11b81526001600160a01b038781166004830152600160248301819052604483018190526064830152915192955090831691632fc3a70a91608480820192602092909190829003018186803b15801561181057600080fd5b505afa158015611824573d6000803e3d6000fd5b505050506040513d602081101561183a57600080fd5b505192959294509192505050565b60008115806118635750508082028282828161186057fe5b04145b61169b576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a2064732d6d6174682d6d756c2d6f766572666c6f770000604482015290519081900360640190fd5b6000806001600160a01b03841673c0253c3cc6aa5ab407b5795a04c28fb063273894146118f9576001600160a01b0384166000908152600460205260409020546118fc565b60125b905060006001600160a01b03841673c0253c3cc6aa5ab407b5795a04c28fb06327389414611942576001600160a01b038416600090815260046020526040902054611945565b60125b905081600a0a61196182600a0a8861184890919063ffffffff16565b8161196857fe5b049695505050505050565b8082038281111561169b576040805162461bcd60e51b815260206004820152601f60248201527f536166654d6174683a2064732d6d6174682d7375622d756e646572666c6f7700604482015290519081900360640190fd5b600354604080517f52f55eed0000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529151600093849316916352f55eed916024808301926020929190829003018186803b158015611a3357600080fd5b505afa158015611a47573d6000803e3d6000fd5b505050506040513d6020811015611a5d57600080fd5b50519050828110611d1d576000611a748285611973565b600354604080517fc3c7b9e90000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301529151939450600093919092169163c3c7b9e9916024808301926020929190829003018186803b158015611ae057600080fd5b505afa158015611af4573d6000803e3d6000fd5b505050506040513d6020811015611b0a57600080fd5b5051600354604080517f4a993ee90000000000000000000000000000000000000000000000000000000081526001600160a01b038b81166004830152915193945084861015936000939290921691634a993ee991602480820192602092909190829003018186803b158015611b7e57600080fd5b505afa158015611b92573d6000803e3d6000fd5b505050506040513d6020811015611ba857600080fd5b5051600354604080517f1aa4ace50000000000000000000000000000000000000000000000000000000081526001600160a01b038e8116600483015291519394508488101593600093611c52938e93911691631aa4ace591602480820192602092909190829003018186803b158015611c2057600080fd5b505afa158015611c34573d6000803e3d6000fd5b505050506040513d6020811015611c4a57600080fd5b505190611d27565b90506000600360009054906101000a90046001600160a01b03166001600160a01b031663ad1e4f8d8e6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611cb857600080fd5b505afa158015611ccc573d6000803e3d6000fd5b505050506040513d6020811015611ce257600080fd5b5051905080821115858015611cf45750835b8015611cfd5750805b15611d145760019950505050505050505050611d1f565b50505050505050505b505b949350505050565b8082018281101561169b576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a2064732d6d6174682d6164642d6f766572666c6f770000604482015290519081900360640190fd5b600060208284031215611d90578081fd5b81518015158114610d81578182fd5b600060208284031215611db0578081fd5b5051919050565b60008251815b81811015611dd75760208186018101518583015201611dbd565b81811115611de55782828501525b509190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060608201526080019056fe4f776e61626c653a204e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212205c885d586c240d883ef088ce5e25650b030d4f15041c006d0fde227b6d37c61764736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverAVAX(uint256)": {
        "params": {
          "_amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "_tokenAddress": "token address",
          "_tokenAmount": "amount to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "_spender": "address",
          "_token": "address"
        }
      },
      "setAllowances()": {
        "details": "Should use modifier `onlyOwner` to avoid griefing"
      },
      "swap(uint256,uint256,address,address,address)": {
        "params": {
          "_amountIn": "input amount in starting token",
          "_amountOut": "amount out in ending token",
          "_fromToken": "ERC20 token being sold",
          "_to": "address where swapped funds should be sent to",
          "_toToken": "ERC20 token being bought"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "swap(uint256,uint256,address,address,address)": {
        "notice": "Execute a swap from token to token assuming this contract already holds input tokensInteract through the router"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7867,
        "contract": "contracts/adapters/GmxAdapter.sol:GmxAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 50,
        "contract": "contracts/adapters/GmxAdapter.sol:GmxAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 52,
        "contract": "contracts/adapters/GmxAdapter.sol:GmxAdapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 4836,
        "contract": "contracts/adapters/GmxAdapter.sol:GmxAdapter",
        "label": "vault",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4840,
        "contract": "contracts/adapters/GmxAdapter.sol:GmxAdapter",
        "label": "tokenDecimals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4844,
        "contract": "contracts/adapters/GmxAdapter.sol:GmxAdapter",
        "label": "isPoolToken",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}