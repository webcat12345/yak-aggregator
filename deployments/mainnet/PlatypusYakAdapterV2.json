{
  "address": "0x6da140B4004D1EcCfc5FffEb010Bb7A58575b446",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "AddPoolSupport",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tkns",
          "type": "address[]"
        }
      ],
      "name": "PartialPoolSupport",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "RmPoolSupport",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "addPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tknIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tknOut",
          "type": "address"
        }
      ],
      "name": "getPoolForTkns",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "indentifier",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "rmPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tkns",
          "type": "address[]"
        }
      ],
      "name": "setPoolForTkns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0a5d82a2871e77a1a1ed61a5316945a9b5a4f9f317612a2048e8ffe61ac5e5a0",
  "receipt": {
    "to": null,
    "from": "0xd22044706DeA3c342f68396bEDBCf6a2536d951D",
    "contractAddress": "0x6da140B4004D1EcCfc5FffEb010Bb7A58575b446",
    "transactionIndex": 0,
    "gasUsed": "1722539",
    "logsBloom": "0x00000000000000000000000000000000000000100000000000800000000000000000000000000000000000000800000000000000000000010000000000000000000000000000000000000000000000000001000000000000000000000000000000004000020000000000000000000800000000000000000000000000000002400000000000000000400000000000000000000800000000000000000000000000000000000000200000000100000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000002000000000000000001000000000",
    "blockHash": "0xc3a9f0a601bf59a5e265e83274a36230572a828035335c346a52b2785e22f19b",
    "transactionHash": "0x0a5d82a2871e77a1a1ed61a5316945a9b5a4f9f317612a2048e8ffe61ac5e5a0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13372393,
        "transactionHash": "0x0a5d82a2871e77a1a1ed61a5316945a9b5a4f9f317612a2048e8ffe61ac5e5a0",
        "address": "0x6da140B4004D1EcCfc5FffEb010Bb7A58575b446",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc3a9f0a601bf59a5e265e83274a36230572a828035335c346a52b2785e22f19b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13372393,
        "transactionHash": "0x0a5d82a2871e77a1a1ed61a5316945a9b5a4f9f317612a2048e8ffe61ac5e5a0",
        "address": "0x6da140B4004D1EcCfc5FffEb010Bb7A58575b446",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x0000000000000000000000006da140b4004d1eccfc5fffeb010bb7a58575b446"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000007a120",
        "logIndex": 1,
        "blockHash": "0xc3a9f0a601bf59a5e265e83274a36230572a828035335c346a52b2785e22f19b"
      }
    ],
    "blockNumber": 13372393,
    "cumulativeGasUsed": "1722539",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "PlatypusYakAdapterV2",
    500000
  ],
  "solcInputHash": "9a0637aa3a3674edda3c40170a1c77b2",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"AddPoolSupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tkns\",\"type\":\"address[]\"}],\"name\":\"PartialPoolSupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"RmPoolSupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"addPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tknIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tknOut\",\"type\":\"address\"}],\"name\":\"getPoolForTkns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indentifier\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"rmPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tkns\",\"type\":\"address[]\"}],\"name\":\"setPoolForTkns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverAVAX(uint256)\":{\"params\":{\"_amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"_tokenAddress\":\"token address\",\"_tokenAmount\":\"amount to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"_spender\":\"address\",\"_token\":\"address\"}},\"setAllowances()\":{\"details\":\"Should use modifier `onlyOwner` to avoid griefing\"},\"swap(uint256,uint256,address,address,address)\":{\"params\":{\"_amountIn\":\"input amount in starting token\",\"_amountOut\":\"amount out in ending token\",\"_fromToken\":\"ERC20 token being sold\",\"_to\":\"address where swapped funds should be sent to\",\"_toToken\":\"ERC20 token being bought\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"swap(uint256,uint256,address,address,address)\":{\"notice\":\"Execute a swap from token to token assuming this contract already holds input tokensInteract through the router\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/PlatypusAdapter.sol\":\"PlatypusAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                              \\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IWETH.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\n\\nabstract contract YakAdapter is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(\\n        address indexed _tokenFrom, \\n        address indexed _tokenTo, \\n        uint _amountIn, \\n        uint _amountOut\\n    );\\n\\n    event UpdatedGasEstimate(\\n        address indexed _adapter,\\n        uint _newEstimate\\n    );\\n\\n    event Recovered(\\n        address indexed _asset, \\n        uint amount\\n    );\\n\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n    address internal constant AVAX = address(0);\\n    uint internal constant UINT_MAX = type(uint).max;\\n\\n    uint public swapGasEstimate;\\n    string public name;\\n\\n    function setSwapGasEstimate(uint _estimate) public onlyOwner {\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param _token address\\n     * @param _spender address\\n     */\\n    function revokeAllowance(address _token, address _spender) external onlyOwner {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param _tokenAddress token address\\n     * @param _tokenAmount amount to recover\\n     */\\n    function recoverERC20(address _tokenAddress, uint _tokenAmount) external onlyOwner {\\n        require(_tokenAmount > 0, 'YakAdapter: Nothing to recover');\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param _amount amount\\n     */\\n    function recoverAVAX(uint _amount) external onlyOwner {\\n        require(_amount > 0, 'YakAdapter: Nothing to recover');\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint _amountIn, \\n        address _tokenIn, \\n        address _tokenOut\\n    ) external view returns (uint) {\\n        return _query(\\n            _amountIn, \\n            _tokenIn, \\n            _tokenOut\\n        );\\n    }\\n\\n    /**\\n     * Execute a swap from token to token assuming this contract already holds input tokens\\n     * @notice Interact through the router\\n     * @param _amountIn input amount in starting token\\n     * @param _amountOut amount out in ending token\\n     * @param _fromToken ERC20 token being sold\\n     * @param _toToken ERC20 token being bought\\n     * @param _to address where swapped funds should be sent to\\n     */\\n    function swap(\\n        uint _amountIn, \\n        uint _amountOut,\\n        address _fromToken, \\n        address _toToken, \\n        address _to\\n    ) external {\\n        _approveIfNeeded(_fromToken, _amountIn);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        emit YakAdapterSwap(\\n            _fromToken, \\n            _toToken,\\n            _amountIn, \\n            _amountOut \\n        );\\n    } \\n\\n    /**\\n     * @notice Return expected funds to user\\n     * @dev Skip if funds should stay in the contract\\n     * @param _token address\\n     * @param _amount tokens to return\\n     * @param _to address where funds should be sent to\\n     */\\n    function _returnTo(address _token, uint _amount, address _to) internal {\\n        if (address(this)!=_to) {\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Wrap AVAX\\n     * @param _amount amount\\n     */\\n    function _wrap(uint _amount) internal {\\n        IWETH(WAVAX).deposit{value: _amount}();\\n    }\\n\\n    /**\\n     * @notice Unwrap WAVAX\\n     * @param _amount amount\\n     */\\n    function _unwrap(uint _amount) internal {\\n        IWETH(WAVAX).withdraw(_amount);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of a swap\\n     * @dev Must return tokens to address(this)\\n     * @dev Wrapping is handled external to this function\\n     * @param _amountIn amount being sold\\n     * @param _amountOut amount being bought\\n     * @param _fromToken ERC20 token being sold\\n     * @param _toToken ERC20 token being bought\\n     * @param _to Where recieved tokens are sent to\\n     */\\n    function _swap(\\n        uint _amountIn, \\n        uint _amountOut, \\n        address _fromToken, \\n        address _toToken, \\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint _amountIn,\\n        address _tokenIn, \\n        address _tokenOut\\n    ) internal virtual view returns (uint);\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Should use modifier `onlyOwner` to avoid griefing\\n     */\\n    function setAllowances() public virtual;\\n\\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal virtual;\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x8640baef184d9eec0190581dd4e19ee3c0aea5df1a8c0084694ac194900527fd\",\"license\":\"GPL-3.0-only\"},\"contracts/adapters/PlatypusAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//  \\n//                            ,=.\\n//                ,=\\\"\\\"\\\"\\\"==.__.=\\\"  o\\\".___\\n//          ,=.==\\\"                  ___/\\n//    ,==.,\\\"    ,          , \\\\,===\\\"\\\"\\n//   <     ,==)  \\\\\\\"'\\\"=._.==)  \\\\\\n//    `==''    `\\\"           `\\\"\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.0;\\n\\nimport \\\"../interface/IPlatypus.sol\\\";\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"../interface/IWETH.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"../YakAdapter.sol\\\";\\n\\n\\ncontract PlatypusAdapter is YakAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    event AddPoolSupport(\\n        address pool\\n    );\\n\\n    event PartialPoolSupport(\\n        address pool, \\n        address[] tkns\\n    );\\n\\n    event RmPoolSupport(\\n        address pool\\n    );\\n\\n    bytes32 public constant indentifier = keccak256(\\\"PlatypusAdapter\\\");\\n    mapping(address => mapping(address => address)) private tknToTknToPool;\\n\\n    constructor (\\n        string memory _name, \\n        uint _swapGasEstimate\\n    ) {\\n        name = _name;\\n        setSwapGasEstimate(_swapGasEstimate);\\n    }\\n\\n    function setAllowances() public override onlyOwner {}\\n\\n    function getPoolForTkns(\\n        address tknIn, \\n        address tknOut\\n    ) public view returns (address) {\\n        return tknToTknToPool[tknIn][tknOut];\\n    }\\n\\n    function _approveIfNeeded(address tkn, address spender) internal {\\n        uint allowance = IERC20(tkn).allowance(address(this), spender);\\n        if (allowance < UINT_MAX) {\\n            IERC20(tkn).approve(spender, UINT_MAX);\\n        }\\n    }\\n\\n    // @dev Returns false if repeated tkns\\n    function _poolSupportsTkns(\\n        address pool,\\n        address[] memory tkns\\n    ) internal view returns (bool) {\\n        address[] memory supportedTkns = IPlatypus(pool).getTokenAddresses();\\n        uint supportedCount;\\n        for (uint i = 0; i < supportedTkns.length; i++) {\\n            for (uint j = 0; j < tkns.length; j++) {\\n                if (supportedTkns[i] == tkns[j]) {\\n                    supportedCount++;\\n                    break;\\n                }\\n            }\\n        }\\n        return supportedCount == tkns.length;\\n    }\\n\\n    function _setPoolForTkns(\\n        address[] memory tkns, \\n        address pool\\n    ) internal {\\n        for (uint i = 0; i < tkns.length; i++) {\\n            for (uint j = 0; j < tkns.length; j++) {\\n                if (i != j) {\\n                    tknToTknToPool[tkns[i]][tkns[j]] = pool;\\n                    if (pool != address(0)) {\\n                        _approveIfNeeded(tkns[i], pool);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    // Add pools for all tkns it supports\\n    function addPools(address[] calldata pools) external onlyOwner {\\n        for (uint i = 0; i < pools.length; i++) {\\n            address pool = pools[i];\\n            address[] memory supportedTkns = IPlatypus(pool).getTokenAddresses();\\n            _setPoolForTkns(supportedTkns, pool);\\n            emit AddPoolSupport(pool);\\n        }\\n    }\\n\\n    // Manually set the pool support for tkns\\n    function setPoolForTkns(\\n        address pool,\\n        address[] memory tkns\\n    ) external onlyOwner {\\n        require(tkns.length > 1, 'At least two tkns');\\n        require(pool != address(0), 'Only non-zero pool');\\n        require(_poolSupportsTkns(pool, tkns), 'Pool does not support tkns');\\n        // Assume above checks there is no repeats\\n        _setPoolForTkns(tkns, pool);\\n        emit PartialPoolSupport(pool, tkns);\\n    }\\n\\n    function rmPools(address[] calldata pools) external onlyOwner {\\n        for (uint i = 0; i < pools.length; i++) {\\n            address pool = pools[i];\\n            address[] memory supportedTkns = IPlatypus(pool).getTokenAddresses();\\n            _setPoolForTkns(supportedTkns, address(0));\\n            emit RmPoolSupport(pool);\\n        }\\n    }\\n\\n    function _query(\\n        uint _amountIn, \\n        address _tokenIn, \\n        address _tokenOut\\n    ) internal override view returns (uint) {\\n        address pool = getPoolForTkns(_tokenIn, _tokenOut);\\n        if (\\n            pool == address(0) ||\\n            _amountIn == 0 ||\\n            IPlatypus(pool).paused()\\n        ) { return 0; }\\n        try IPlatypus(pool).quotePotentialSwap(\\n            _tokenIn, \\n            _tokenOut, \\n            _amountIn\\n        ) returns (uint amountOut) {\\n            return amountOut;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    function _swap(\\n        uint _amountIn, \\n        uint _amountOut, \\n        address _tokenIn, \\n        address _tokenOut, \\n        address _to\\n    ) internal override {\\n        address pool = getPoolForTkns(_tokenIn, _tokenOut);\\n        IPlatypus(pool).swap(\\n            _tokenIn, \\n            _tokenOut, \\n            _amountIn, \\n            _amountOut,\\n            _to,\\n            block.timestamp\\n        );\\n    }\\n\\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {}\\n\\n}\",\"keccak256\":\"0x4f9a53c8182717ba5f9eef922b525a06e61566a8cd3356e3fcb3110e35c3c6bd\",\"license\":\"GPL-3.0-only\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IERC20 {\\n    event Approval(address,address,uint);\\n    event Transfer(address,address,uint);\\n    function name() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function transferFrom(address,address,uint) external returns (bool);\\n    function allowance(address,address) external view returns (uint);\\n    function approve(address,uint) external returns (bool);\\n    function transfer(address,uint) external returns (bool);\\n    function balanceOf(address) external view returns (uint);\\n    function nonces(address) external view returns (uint);  // Only tokens that support permit\\n    function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) external;  // Only tokens that support permit\\n    function swap(address,uint256) external;  // Only Avalanche bridge tokens \\n    function swapSupply(address) external view returns (uint);  // Only Avalanche bridge tokens \\n}\",\"keccak256\":\"0xc71d31ef4f838908478ceb97d1ba0d95c4046393bd1cf26d6079d57d7c094e8d\",\"license\":\"MIT\"},\"contracts/interface/IPlatypus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IPlatypus {\\n\\n    // Views\\n    function quotePotentialSwap(\\n        address fromToken, \\n        address totoken, \\n        uint fromAmount\\n    ) external view returns (uint potentialOutcome);  // Second arg (haircut) is not used\\n    function getTokenAddresses() external view returns (address[] memory);\\n    function paused() external view returns (bool);\\n\\n    // Modifiers\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint fromAmount,\\n        uint minAmountOut, \\n        address to,\\n        uint deadline\\n    ) external;\\n    function pause() external;\\n    function unpause() external;\\n\\n}\\n\\n\\n\",\"keccak256\":\"0x4cf1a6d56f44806566f4b3cafc9007791f44ebbe518779437ee528fac30a28bd\",\"license\":\"MIT\"},\"contracts/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 amount) external;\\n    function deposit() external payable;\\n}\",\"keccak256\":\"0xaff69efb1b24f6448740e4c71a16d86eedcd2407606ac449dd09dad5043b7923\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8b25f8514264f6d0ed4279a311d1be64012183292b1e7d6707107928dbac1142\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: New owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1331d91852367ea5319eed242ef8ebbf245a0271f2b19093f5521ae206c9a1b3\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x95e46e79b970b6e35511a773d310d63d7de30a5314e9bbfc4d8b465acec6f521\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'SafeMath: ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'SafeMath: ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'SafeMath: ds-math-mul-overflow');\\n    }\\n}\",\"keccak256\":\"0xee319854a4e682f8fab4f0404aa9604c9eea8190f6ec72c9cc67f25785b3ae01\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001fb538038062001fb5833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b5060405260200151915060009050620000fe62000171565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35081516200015d9060029060208501906200023b565b50620001698162000175565b5050620002e7565b3390565b6200017f62000171565b6001600160a01b0316620001926200022c565b6001600160a01b031614620001ee576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181905560408051828152905130917ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a919081900360200190a250565b6000546001600160a01b031690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620002735760008555620002be565b82601f106200028e57805160ff1916838001178555620002be565b82800160010185558215620002be579182015b82811115620002be578251825591602001919060010190620002a1565b50620002cc929150620002d0565b5090565b5b80821115620002cc5760008155600101620002d1565b611cbe80620002f76000396000f3fe6080604052600436106101125760003560e01c80637ae26773116100a5578063b36a4ab111610074578063eab90da611610059578063eab90da6146104fe578063ef99893a1461054f578063f2fde38b1461059057610119565b8063b36a4ab11461046c578063dbd9a4d4146104e957610119565b80637ae26773146103b957806384a33e63146103f45780638980f11f1461041e5780638da5cb5b1461045757610119565b80634ebb7916116100e15780634ebb79161461030e57806369cff80d14610338578063715018a61461034d57806371e8c6431461036257610119565b806306fdde031461011e5780630fef1c06146101a857806321901c6f146101cf5780634490af061461029157610119565b3661011957005b600080fd5b34801561012a57600080fd5b506101336105c3565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016d578181015183820152602001610155565b50505050905090810190601f16801561019a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b457600080fd5b506101bd61064e565b60408051918252519081900360200190f35b3480156101db57600080fd5b5061028f600480360360408110156101f257600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561021d57600080fd5b82018360208201111561022f57600080fd5b8035906020019184602083028401116401000000008311171561025157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610672945050505050565b005b34801561029d57600080fd5b5061028f600480360360208110156102b457600080fd5b8101906020810181356401000000008111156102cf57600080fd5b8201836020820111156102e157600080fd5b8035906020019184602083028401116401000000008311171561030357600080fd5b509092509050610886565b34801561031a57600080fd5b5061028f6004803603602081101561033157600080fd5b5035610a81565b34801561034457600080fd5b506101bd610bb2565b34801561035957600080fd5b5061028f610bb8565b34801561036e57600080fd5b5061039d6004803603604081101561038557600080fd5b506001600160a01b0381358116916020013516610c83565b604080516001600160a01b039092168252519081900360200190f35b3480156103c557600080fd5b5061028f600480360360408110156103dc57600080fd5b506001600160a01b0381358116916020013516610cad565b34801561040057600080fd5b5061028f6004803603602081101561041757600080fd5b5035610d3a565b34801561042a57600080fd5b5061028f6004803603604081101561044157600080fd5b506001600160a01b038135169060200135610dec565b34801561046357600080fd5b5061039d610f0c565b34801561047857600080fd5b5061028f6004803603602081101561048f57600080fd5b8101906020810181356401000000008111156104aa57600080fd5b8201836020820111156104bc57600080fd5b803590602001918460208302840111640100000000831117156104de57600080fd5b509092509050610f1b565b3480156104f557600080fd5b5061028f611110565b34801561050a57600080fd5b5061028f600480360360a081101561052157600080fd5b508035906020810135906001600160a01b036040820135811691606081013582169160809091013516611186565b34801561055b57600080fd5b506101bd6004803603606081101561057257600080fd5b508035906001600160a01b03602082013581169160400135166111f7565b34801561059c57600080fd5b5061028f600480360360208110156105b357600080fd5b50356001600160a01b031661120e565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156106465780601f1061061b57610100808354040283529160200191610646565b820191906000526020600020905b81548152906001019060200180831161062957829003601f168201915b505050505081565b7fa58605943571627895e9199c4b9bee82981358c9253a80848fa54eae46a75fb481565b61067a61132f565b6001600160a01b031661068b610f0c565b6001600160a01b0316146106e6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181511161073c576040805162461bcd60e51b815260206004820152601160248201527f4174206c656173742074776f20746b6e73000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038216610797576040805162461bcd60e51b815260206004820152601260248201527f4f6e6c79206e6f6e2d7a65726f20706f6f6c0000000000000000000000000000604482015290519081900360640190fd5b6107a18282611333565b6107f2576040805162461bcd60e51b815260206004820152601a60248201527f506f6f6c20646f6573206e6f7420737570706f727420746b6e73000000000000604482015290519081900360640190fd5b6107fc81836114c0565b7f969168e4253b0ca28d1578d402ebf55664e363e9efc0fb3e75b9031b53860d30828260405180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561086e578181015183820152602001610856565b50505050905001935050505060405180910390a15050565b61088e61132f565b6001600160a01b031661089f610f0c565b6001600160a01b0316146108fa576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60005b81811015610a7c57600083838381811061091357fe5b905060200201356001600160a01b031690506000816001600160a01b031663ee8c24b86040518163ffffffff1660e01b815260040160006040518083038186803b15801561096057600080fd5b505afa158015610974573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561099d57600080fd5b81019080805160405193929190846401000000008211156109bd57600080fd5b9083019060208201858111156109d257600080fd5b82518660208202830111640100000000821117156109ef57600080fd5b82525081516020918201928201910280838360005b83811015610a1c578181015183820152602001610a04565b505050509050016040525050509050610a368160006114c0565b604080516001600160a01b038416815290517f623a1d97e033b45c5fd210ecd2964f6a030b6ce0b4b4a4864273e71a839e9c2f9181900360200190a150506001016108fd565b505050565b610a8961132f565b6001600160a01b0316610a9a610f0c565b6001600160a01b031614610af5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111610b4a576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b604051339082156108fc029083906000818181858888f19350505050158015610b77573d6000803e3d6000fd5b506040805182815290516000917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a250565b60015481565b610bc061132f565b6001600160a01b0316610bd1610f0c565b6001600160a01b031614610c2c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6001600160a01b039182166000908152600360209081526040808320938516835292905220541690565b610cb561132f565b6001600160a01b0316610cc6610f0c565b6001600160a01b031614610d21576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610d366001600160a01b0383168260006115ba565b5050565b610d4261132f565b6001600160a01b0316610d53610f0c565b6001600160a01b031614610dae576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181905560408051828152905130917ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a919081900360200190a250565b610df461132f565b6001600160a01b0316610e05610f0c565b6001600160a01b031614610e60576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111610eb5576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b610ec96001600160a01b03831633836116ea565b6040805182815290516001600160a01b038416917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a25050565b6000546001600160a01b031690565b610f2361132f565b6001600160a01b0316610f34610f0c565b6001600160a01b031614610f8f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60005b81811015610a7c576000838383818110610fa857fe5b905060200201356001600160a01b031690506000816001600160a01b031663ee8c24b86040518163ffffffff1660e01b815260040160006040518083038186803b158015610ff557600080fd5b505afa158015611009573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561103257600080fd5b810190808051604051939291908464010000000082111561105257600080fd5b90830190602082018581111561106757600080fd5b825186602082028301116401000000008211171561108457600080fd5b82525081516020918201928201910280838360005b838110156110b1578181015183820152602001611099565b5050505090500160405250505090506110ca81836114c0565b604080516001600160a01b038416815290517fa44f9b37332b817b40cfd72d9ef6521d5e628f32d9048fe78f3529aa13c174b29181900360200190a15050600101610f92565b61111861132f565b6001600160a01b0316611129610f0c565b6001600160a01b031614611184576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b565b6111908386610d36565b61119d8585858585611709565b816001600160a01b0316836001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8787604051808381526020018281526020019250505060405180910390a35050505050565b60006112048484846117c0565b90505b9392505050565b61121661132f565b6001600160a01b0316611227610f0c565b6001600160a01b031614611282576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166112c75760405162461bcd60e51b8152600401808060200182810382526026815260200180611c636026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3390565b600080836001600160a01b031663ee8c24b86040518163ffffffff1660e01b815260040160006040518083038186803b15801561136f57600080fd5b505afa158015611383573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156113ac57600080fd5b81019080805160405193929190846401000000008211156113cc57600080fd5b9083019060208201858111156113e157600080fd5b82518660208202830111640100000000821117156113fe57600080fd5b82525081516020918201928201910280838360005b8381101561142b578181015183820152602001611413565b505050509050016040525050509050600080600090505b82518110156114b35760005b85518110156114aa5785818151811061146357fe5b60200260200101516001600160a01b031684838151811061148057fe5b60200260200101516001600160a01b031614156114a2576001909201916114aa565b60010161144e565b50600101611442565b5083511491505092915050565b60005b8251811015610a7c5760005b83518110156115b1578082146115a95782600360008685815181106114f057fe5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600086848151811061152657fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060006001600160a01b0316836001600160a01b0316146115a9576115a984838151811061159b57fe5b602002602001015184611900565b6001016114cf565b506001016114c3565b8015806116425750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906115f09030908690600401611b40565b60206040518083038186803b15801561160857600080fd5b505afa15801561161c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116409190611aef565b155b6116675760405162461bcd60e51b815260040161165e90611c05565b60405180910390fd5b610a7c8363095ea7b360e01b8484604051602401611686929190611b5a565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611a13565b610a7c8363a9059cbb60e01b8484604051602401611686929190611b5a565b60006117158484610c83565b604080517f9908fc8b0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528681166024830152604482018a90526064820189905285811660848301524260a4830152915192935090831691639908fc8b9160c48082019260009290919082900301818387803b1580156117a057600080fd5b505af11580156117b4573d6000803e3d6000fd5b50505050505050505050565b6000806117cd8484610c83565b90506001600160a01b03811615806117e3575084155b8061184f5750806001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561182257600080fd5b505afa158015611836573d6000803e3d6000fd5b505050506040513d602081101561184c57600080fd5b50515b1561185e576000915050611207565b806001600160a01b03166343c2e2f58585886040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001828152602001935050505060206040518083038186803b1580156118c457600080fd5b505afa9250505080156118e957506040513d60208110156118e457600080fd5b505160015b6118f7576000915050611207565b91506112079050565b60408051636eb1769f60e11b81523060048201526001600160a01b038381166024830152915160009285169163dd62ed3e916044808301926020929190829003018186803b15801561195157600080fd5b505afa158015611965573d6000803e3d6000fd5b505050506040513d602081101561197b57600080fd5b50519050600019811015610a7c57826001600160a01b031663095ea7b3836000196040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156119e257600080fd5b505af11580156119f6573d6000803e3d6000fd5b505050506040513d6020811015611a0c57600080fd5b5050505050565b600080836001600160a01b031683604051611a2e9190611b07565b6000604051808303816000865af19150503d8060008114611a6b576040519150601f19603f3d011682016040523d82523d6000602084013e611a70565b606091505b509150915081611a925760405162461bcd60e51b815260040161165e90611b73565b805115611ac95780806020019051810190611aad9190611acf565b611ac95760405162461bcd60e51b815260040161165e90611ba8565b50505050565b600060208284031215611ae0578081fd5b81518015158114611207578182fd5b600060208284031215611b00578081fd5b5051919050565b60008251815b81811015611b275760208186018101518583015201611b0d565b81811115611b355782828501525b509190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060608201526080019056fe4f776e61626c653a204e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220ef8f6094f9dcf93652abcb969b562e91b80295aab7347e88d5d2b3c6c69ad8ed64736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106101125760003560e01c80637ae26773116100a5578063b36a4ab111610074578063eab90da611610059578063eab90da6146104fe578063ef99893a1461054f578063f2fde38b1461059057610119565b8063b36a4ab11461046c578063dbd9a4d4146104e957610119565b80637ae26773146103b957806384a33e63146103f45780638980f11f1461041e5780638da5cb5b1461045757610119565b80634ebb7916116100e15780634ebb79161461030e57806369cff80d14610338578063715018a61461034d57806371e8c6431461036257610119565b806306fdde031461011e5780630fef1c06146101a857806321901c6f146101cf5780634490af061461029157610119565b3661011957005b600080fd5b34801561012a57600080fd5b506101336105c3565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016d578181015183820152602001610155565b50505050905090810190601f16801561019a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b457600080fd5b506101bd61064e565b60408051918252519081900360200190f35b3480156101db57600080fd5b5061028f600480360360408110156101f257600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561021d57600080fd5b82018360208201111561022f57600080fd5b8035906020019184602083028401116401000000008311171561025157600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610672945050505050565b005b34801561029d57600080fd5b5061028f600480360360208110156102b457600080fd5b8101906020810181356401000000008111156102cf57600080fd5b8201836020820111156102e157600080fd5b8035906020019184602083028401116401000000008311171561030357600080fd5b509092509050610886565b34801561031a57600080fd5b5061028f6004803603602081101561033157600080fd5b5035610a81565b34801561034457600080fd5b506101bd610bb2565b34801561035957600080fd5b5061028f610bb8565b34801561036e57600080fd5b5061039d6004803603604081101561038557600080fd5b506001600160a01b0381358116916020013516610c83565b604080516001600160a01b039092168252519081900360200190f35b3480156103c557600080fd5b5061028f600480360360408110156103dc57600080fd5b506001600160a01b0381358116916020013516610cad565b34801561040057600080fd5b5061028f6004803603602081101561041757600080fd5b5035610d3a565b34801561042a57600080fd5b5061028f6004803603604081101561044157600080fd5b506001600160a01b038135169060200135610dec565b34801561046357600080fd5b5061039d610f0c565b34801561047857600080fd5b5061028f6004803603602081101561048f57600080fd5b8101906020810181356401000000008111156104aa57600080fd5b8201836020820111156104bc57600080fd5b803590602001918460208302840111640100000000831117156104de57600080fd5b509092509050610f1b565b3480156104f557600080fd5b5061028f611110565b34801561050a57600080fd5b5061028f600480360360a081101561052157600080fd5b508035906020810135906001600160a01b036040820135811691606081013582169160809091013516611186565b34801561055b57600080fd5b506101bd6004803603606081101561057257600080fd5b508035906001600160a01b03602082013581169160400135166111f7565b34801561059c57600080fd5b5061028f600480360360208110156105b357600080fd5b50356001600160a01b031661120e565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156106465780601f1061061b57610100808354040283529160200191610646565b820191906000526020600020905b81548152906001019060200180831161062957829003601f168201915b505050505081565b7fa58605943571627895e9199c4b9bee82981358c9253a80848fa54eae46a75fb481565b61067a61132f565b6001600160a01b031661068b610f0c565b6001600160a01b0316146106e6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181511161073c576040805162461bcd60e51b815260206004820152601160248201527f4174206c656173742074776f20746b6e73000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b038216610797576040805162461bcd60e51b815260206004820152601260248201527f4f6e6c79206e6f6e2d7a65726f20706f6f6c0000000000000000000000000000604482015290519081900360640190fd5b6107a18282611333565b6107f2576040805162461bcd60e51b815260206004820152601a60248201527f506f6f6c20646f6573206e6f7420737570706f727420746b6e73000000000000604482015290519081900360640190fd5b6107fc81836114c0565b7f969168e4253b0ca28d1578d402ebf55664e363e9efc0fb3e75b9031b53860d30828260405180836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561086e578181015183820152602001610856565b50505050905001935050505060405180910390a15050565b61088e61132f565b6001600160a01b031661089f610f0c565b6001600160a01b0316146108fa576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60005b81811015610a7c57600083838381811061091357fe5b905060200201356001600160a01b031690506000816001600160a01b031663ee8c24b86040518163ffffffff1660e01b815260040160006040518083038186803b15801561096057600080fd5b505afa158015610974573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561099d57600080fd5b81019080805160405193929190846401000000008211156109bd57600080fd5b9083019060208201858111156109d257600080fd5b82518660208202830111640100000000821117156109ef57600080fd5b82525081516020918201928201910280838360005b83811015610a1c578181015183820152602001610a04565b505050509050016040525050509050610a368160006114c0565b604080516001600160a01b038416815290517f623a1d97e033b45c5fd210ecd2964f6a030b6ce0b4b4a4864273e71a839e9c2f9181900360200190a150506001016108fd565b505050565b610a8961132f565b6001600160a01b0316610a9a610f0c565b6001600160a01b031614610af5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111610b4a576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b604051339082156108fc029083906000818181858888f19350505050158015610b77573d6000803e3d6000fd5b506040805182815290516000917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a250565b60015481565b610bc061132f565b6001600160a01b0316610bd1610f0c565b6001600160a01b031614610c2c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6001600160a01b039182166000908152600360209081526040808320938516835292905220541690565b610cb561132f565b6001600160a01b0316610cc6610f0c565b6001600160a01b031614610d21576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b610d366001600160a01b0383168260006115ba565b5050565b610d4261132f565b6001600160a01b0316610d53610f0c565b6001600160a01b031614610dae576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181905560408051828152905130917ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a919081900360200190a250565b610df461132f565b6001600160a01b0316610e05610f0c565b6001600160a01b031614610e60576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111610eb5576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b610ec96001600160a01b03831633836116ea565b6040805182815290516001600160a01b038416917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a25050565b6000546001600160a01b031690565b610f2361132f565b6001600160a01b0316610f34610f0c565b6001600160a01b031614610f8f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60005b81811015610a7c576000838383818110610fa857fe5b905060200201356001600160a01b031690506000816001600160a01b031663ee8c24b86040518163ffffffff1660e01b815260040160006040518083038186803b158015610ff557600080fd5b505afa158015611009573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561103257600080fd5b810190808051604051939291908464010000000082111561105257600080fd5b90830190602082018581111561106757600080fd5b825186602082028301116401000000008211171561108457600080fd5b82525081516020918201928201910280838360005b838110156110b1578181015183820152602001611099565b5050505090500160405250505090506110ca81836114c0565b604080516001600160a01b038416815290517fa44f9b37332b817b40cfd72d9ef6521d5e628f32d9048fe78f3529aa13c174b29181900360200190a15050600101610f92565b61111861132f565b6001600160a01b0316611129610f0c565b6001600160a01b031614611184576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b565b6111908386610d36565b61119d8585858585611709565b816001600160a01b0316836001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8787604051808381526020018281526020019250505060405180910390a35050505050565b60006112048484846117c0565b90505b9392505050565b61121661132f565b6001600160a01b0316611227610f0c565b6001600160a01b031614611282576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166112c75760405162461bcd60e51b8152600401808060200182810382526026815260200180611c636026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3390565b600080836001600160a01b031663ee8c24b86040518163ffffffff1660e01b815260040160006040518083038186803b15801561136f57600080fd5b505afa158015611383573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156113ac57600080fd5b81019080805160405193929190846401000000008211156113cc57600080fd5b9083019060208201858111156113e157600080fd5b82518660208202830111640100000000821117156113fe57600080fd5b82525081516020918201928201910280838360005b8381101561142b578181015183820152602001611413565b505050509050016040525050509050600080600090505b82518110156114b35760005b85518110156114aa5785818151811061146357fe5b60200260200101516001600160a01b031684838151811061148057fe5b60200260200101516001600160a01b031614156114a2576001909201916114aa565b60010161144e565b50600101611442565b5083511491505092915050565b60005b8251811015610a7c5760005b83518110156115b1578082146115a95782600360008685815181106114f057fe5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600086848151811061152657fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060006001600160a01b0316836001600160a01b0316146115a9576115a984838151811061159b57fe5b602002602001015184611900565b6001016114cf565b506001016114c3565b8015806116425750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906115f09030908690600401611b40565b60206040518083038186803b15801561160857600080fd5b505afa15801561161c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116409190611aef565b155b6116675760405162461bcd60e51b815260040161165e90611c05565b60405180910390fd5b610a7c8363095ea7b360e01b8484604051602401611686929190611b5a565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611a13565b610a7c8363a9059cbb60e01b8484604051602401611686929190611b5a565b60006117158484610c83565b604080517f9908fc8b0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301528681166024830152604482018a90526064820189905285811660848301524260a4830152915192935090831691639908fc8b9160c48082019260009290919082900301818387803b1580156117a057600080fd5b505af11580156117b4573d6000803e3d6000fd5b50505050505050505050565b6000806117cd8484610c83565b90506001600160a01b03811615806117e3575084155b8061184f5750806001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561182257600080fd5b505afa158015611836573d6000803e3d6000fd5b505050506040513d602081101561184c57600080fd5b50515b1561185e576000915050611207565b806001600160a01b03166343c2e2f58585886040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001828152602001935050505060206040518083038186803b1580156118c457600080fd5b505afa9250505080156118e957506040513d60208110156118e457600080fd5b505160015b6118f7576000915050611207565b91506112079050565b60408051636eb1769f60e11b81523060048201526001600160a01b038381166024830152915160009285169163dd62ed3e916044808301926020929190829003018186803b15801561195157600080fd5b505afa158015611965573d6000803e3d6000fd5b505050506040513d602081101561197b57600080fd5b50519050600019811015610a7c57826001600160a01b031663095ea7b3836000196040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156119e257600080fd5b505af11580156119f6573d6000803e3d6000fd5b505050506040513d6020811015611a0c57600080fd5b5050505050565b600080836001600160a01b031683604051611a2e9190611b07565b6000604051808303816000865af19150503d8060008114611a6b576040519150601f19603f3d011682016040523d82523d6000602084013e611a70565b606091505b509150915081611a925760405162461bcd60e51b815260040161165e90611b73565b805115611ac95780806020019051810190611aad9190611acf565b611ac95760405162461bcd60e51b815260040161165e90611ba8565b50505050565b600060208284031215611ae0578081fd5b81518015158114611207578182fd5b600060208284031215611b00578081fd5b5051919050565b60008251815b81811015611b275760208186018101518583015201611b0d565b81811115611b355782828501525b509190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060608201526080019056fe4f776e61626c653a204e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220ef8f6094f9dcf93652abcb969b562e91b80295aab7347e88d5d2b3c6c69ad8ed64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverAVAX(uint256)": {
        "params": {
          "_amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "_tokenAddress": "token address",
          "_tokenAmount": "amount to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "_spender": "address",
          "_token": "address"
        }
      },
      "setAllowances()": {
        "details": "Should use modifier `onlyOwner` to avoid griefing"
      },
      "swap(uint256,uint256,address,address,address)": {
        "params": {
          "_amountIn": "input amount in starting token",
          "_amountOut": "amount out in ending token",
          "_fromToken": "ERC20 token being sold",
          "_to": "address where swapped funds should be sent to",
          "_toToken": "ERC20 token being bought"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "swap(uint256,uint256,address,address,address)": {
        "notice": "Execute a swap from token to token assuming this contract already holds input tokensInteract through the router"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9289,
        "contract": "contracts/adapters/PlatypusAdapter.sol:PlatypusAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 50,
        "contract": "contracts/adapters/PlatypusAdapter.sol:PlatypusAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 52,
        "contract": "contracts/adapters/PlatypusAdapter.sol:PlatypusAdapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 6542,
        "contract": "contracts/adapters/PlatypusAdapter.sol:PlatypusAdapter",
        "label": "tknToTknToPool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}