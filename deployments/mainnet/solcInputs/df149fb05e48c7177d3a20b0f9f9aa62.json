{
  "language": "Solidity",
  "sources": {
    "contracts/adapters/aAvaxAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//     \n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/ISAVAX.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../lib/SafeMath.sol\";\nimport \"../YakAdapter.sol\";\n\ninterface IwAVAX {\n    function withdraw(uint) external;\n}\n\n/**\n * @notice wAVAX -> SAVAX\n**/\ncontract SAvaxAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    bytes32 public constant ID = keccak256('SAvaxAdapter');\n    address public constant SAVAX = 0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE;\n\n    constructor(uint _swapGasEstimate) {\n        name = 'SAvaxAdapter';\n        setSwapGasEstimate(_swapGasEstimate);\n        setAllowances();\n    }\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {}\n\n    function _exceedsCap(uint _amountIn) internal view returns (bool) {\n        uint newBal = ISAVAX(SAVAX).totalPooledAvax().add(_amountIn);\n        return newBal > ISAVAX(SAVAX).totalPooledAvaxCap();\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint amountOut) {  \n        if (\n            _tokenIn == WAVAX \n            && _tokenOut == SAVAX\n            && !ISAVAX(SAVAX).mintingPaused()\n            && !_exceedsCap(_amountIn)\n        ) {\n            amountOut = ISAVAX(SAVAX).getSharesByPooledAvax(_amountIn);\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        IwAVAX(WAVAX).withdraw(_amountIn);\n        uint shares = ISAVAX(SAVAX).submit{value: _amountIn}();\n        require(shares >= _amountOut, \"YakAdapter: Amount-out too low\");\n        _returnTo(_tokenOut, shares, _to);\n    }\n\n    function setAllowances() public override {\n        IERC20(WAVAX).safeApprove(WAVAX, UINT_MAX);\n    }\n\n}"
    },
    "contracts/interface/ISAVAX.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\nimport \"./IERC20.sol\";\n\ninterface ISAVAX is IERC20 {\n    function getSharesByPooledAvax(uint) external view returns (uint);\n    function submit() external payable returns (uint);\n    function mintingPaused() external view returns (bool);\n    function totalPooledAvax() external view returns (uint);\n    function totalPooledAvaxCap() external view returns (uint);\n}"
    },
    "contracts/lib/SafeERC20.sol": {
      "content": "// This is a simplified version of OpenZepplin's SafeERC20 library\n// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"../interface/IERC20.sol\";\nimport \"./SafeMath.sol\";\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
    },
    "contracts/lib/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, 'SafeMath: ds-math-add-overflow');\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, 'SafeMath: ds-math-sub-underflow');\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, 'SafeMath: ds-math-mul-overflow');\n    }\n}"
    },
    "contracts/YakAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"./interface/IERC20.sol\";\nimport \"./interface/IWETH.sol\";\nimport \"./lib/SafeERC20.sol\";\nimport \"./lib/Ownable.sol\";\n\nabstract contract YakAdapter is Ownable {\n    using SafeERC20 for IERC20;\n\n    event YakAdapterSwap(\n        address indexed _tokenFrom, \n        address indexed _tokenTo, \n        uint _amountIn, \n        uint _amountOut\n    );\n\n    event UpdatedGasEstimate(\n        address indexed _adapter,\n        uint _newEstimate\n    );\n\n    event Recovered(\n        address indexed _asset, \n        uint amount\n    );\n\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n    address internal constant AVAX = address(0);\n    uint internal constant UINT_MAX = type(uint).max;\n\n    uint public swapGasEstimate;\n    string public name;\n\n    function setSwapGasEstimate(uint _estimate) public onlyOwner {\n        swapGasEstimate = _estimate;\n        emit UpdatedGasEstimate(address(this), _estimate);\n    }\n\n    /**\n     * @notice Revoke token allowance\n     * @param _token address\n     * @param _spender address\n     */\n    function revokeAllowance(address _token, address _spender) external onlyOwner {\n        IERC20(_token).safeApprove(_spender, 0);\n    }\n\n    /**\n     * @notice Recover ERC20 from contract\n     * @param _tokenAddress token address\n     * @param _tokenAmount amount to recover\n     */\n    function recoverERC20(address _tokenAddress, uint _tokenAmount) external onlyOwner {\n        require(_tokenAmount > 0, 'YakAdapter: Nothing to recover');\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\n        emit Recovered(_tokenAddress, _tokenAmount);\n    }\n\n    /**\n     * @notice Recover AVAX from contract\n     * @param _amount amount\n     */\n    function recoverAVAX(uint _amount) external onlyOwner {\n        require(_amount > 0, 'YakAdapter: Nothing to recover');\n        payable(msg.sender).transfer(_amount);\n        emit Recovered(address(0), _amount);\n    }\n\n    function query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) external view returns (uint) {\n        return _query(\n            _amountIn, \n            _tokenIn, \n            _tokenOut\n        );\n    }\n\n    /**\n     * Execute a swap from token to token assuming this contract already holds input tokens\n     * @notice Interact through the router\n     * @param _amountIn input amount in starting token\n     * @param _amountOut amount out in ending token\n     * @param _fromToken ERC20 token being sold\n     * @param _toToken ERC20 token being bought\n     * @param _to address where swapped funds should be sent to\n     */\n    function swap(\n        uint _amountIn, \n        uint _amountOut,\n        address _fromToken, \n        address _toToken, \n        address _to\n    ) external {\n        _approveIfNeeded(_fromToken, _amountIn);\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\n        emit YakAdapterSwap(\n            _fromToken, \n            _toToken,\n            _amountIn, \n            _amountOut \n        );\n    } \n\n    /**\n     * @notice Return expected funds to user\n     * @dev Skip if funds should stay in the contract\n     * @param _token address\n     * @param _amount tokens to return\n     * @param _to address where funds should be sent to\n     */\n    function _returnTo(address _token, uint _amount, address _to) internal {\n        if (address(this)!=_to) {\n            IERC20(_token).safeTransfer(_to, _amount);\n        }\n    }\n\n    /**\n     * @notice Wrap AVAX\n     * @param _amount amount\n     */\n    function _wrap(uint _amount) internal {\n        IWETH(WAVAX).deposit{value: _amount}();\n    }\n\n    /**\n     * @notice Unwrap WAVAX\n     * @param _amount amount\n     */\n    function _unwrap(uint _amount) internal {\n        IWETH(WAVAX).withdraw(_amount);\n    }\n\n    /**\n     * @notice Internal implementation of a swap\n     * @dev Must return tokens to address(this)\n     * @dev Wrapping is handled external to this function\n     * @param _amountIn amount being sold\n     * @param _amountOut amount being bought\n     * @param _fromToken ERC20 token being sold\n     * @param _toToken ERC20 token being bought\n     * @param _to Where recieved tokens are sent to\n     */\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _fromToken, \n        address _toToken, \n        address _to\n    ) internal virtual;\n\n    function _query(\n        uint _amountIn,\n        address _tokenIn, \n        address _tokenOut\n    ) internal virtual view returns (uint);\n\n    /**\n     * @notice Approve tokens for use in Strategy\n     * @dev Should use modifier `onlyOwner` to avoid griefing\n     */\n    function setAllowances() public virtual;\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal virtual;\n\n    receive() external payable {}\n}"
    },
    "contracts/interface/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface IERC20 {\n    event Approval(address,address,uint);\n    event Transfer(address,address,uint);\n    function name() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function transferFrom(address,address,uint) external returns (bool);\n    function allowance(address,address) external view returns (uint);\n    function approve(address,uint) external returns (bool);\n    function transfer(address,uint) external returns (bool);\n    function balanceOf(address) external view returns (uint);\n    function nonces(address) external view returns (uint);  // Only tokens that support permit\n    function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) external;  // Only tokens that support permit\n    function swap(address,uint256) external;  // Only Avalanche bridge tokens \n    function swapSupply(address) external view returns (uint);  // Only Avalanche bridge tokens \n}"
    },
    "contracts/interface/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\nimport \"./IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function withdraw(uint256 amount) external;\n    function deposit() external payable;\n}"
    },
    "contracts/lib/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.7.0;\n\nimport \"./Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: Caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: New owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/lib/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/adapters/XJoeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//     \n//     \n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/IxJOE.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../lib/SafeMath.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract XJoeAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    bytes32 public constant ID = keccak256('XJoeAdapter');\n    address public constant JOE = 0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd;\n    address public constant XJOE = 0x57319d41F71E81F3c65F2a47CA4e001EbAFd4F33;\n\n    constructor(uint _swapGasEstimate) {\n        name = 'XJoeAdapter';\n        setSwapGasEstimate(_swapGasEstimate);\n        setAllowances();\n    }\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {}\n\n    function queryEnter(uint _amountIn) internal view returns (uint) {\n        uint totalJoe = IERC20(JOE).balanceOf(XJOE);\n        uint totalShares = IxJOE(XJOE).totalSupply();\n        if (totalShares == 0 || totalJoe == 0) {\n            return _amountIn;\n        }\n        return _amountIn.mul(totalShares) / totalJoe;\n    }\n\n    function queryLeave(uint _amountIn) internal view returns (uint) {\n        uint totalShares = IxJOE(XJOE).totalSupply();\n        return _amountIn.mul(IERC20(JOE).balanceOf(XJOE)) / totalShares;\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint amountOut) {  \n        if (_tokenIn == JOE && _tokenOut == XJOE) {\n            return queryEnter(_amountIn);\n        } else if (_tokenIn == XJOE && _tokenOut == JOE) {\n            return queryLeave(_amountIn);\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        if (_tokenIn == JOE && _tokenOut == XJOE) {\n            IxJOE(XJOE).enter(_amountIn);\n        } else if (_tokenIn == XJOE && _tokenOut == JOE) {\n            IxJOE(XJOE).leave(_amountIn);\n        } else {\n            revert(\"XJoeAdapter: Unsupported token\");\n        }\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n\n    function setAllowances() public override {\n        // Approve max xJOE and JOE for xJOE\n        IERC20(XJOE).safeApprove(XJOE, UINT_MAX);\n        IERC20(JOE).safeApprove(XJOE, UINT_MAX);\n    }\n\n}"
    },
    "contracts/interface/IxJOE.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface IxJOE {\n    function leave(uint) external;\n    function enter(uint) external;\n    function totalSupply() external view returns (uint);\n}"
    },
    "contracts/YakRouter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\npragma experimental ABIEncoderV2;\n\nimport \"./lib/BytesManipulation.sol\";\nimport \"./interface/IAdapter.sol\";\nimport \"./interface/IERC20.sol\";\nimport \"./interface/IWETH.sol\";\nimport \"./lib/SafeMath.sol\";\nimport \"./lib/SafeERC20.sol\";\nimport \"./lib/Ownable.sol\";\n\ncontract YakRouter is Ownable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    address public constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n    address public constant AVAX = address(0);\n    string public constant NAME = 'YakRouter';\n    uint public constant FEE_DENOMINATOR = 1e4;\n    uint public MIN_FEE = 0;\n    address public FEE_CLAIMER;\n    address[] public TRUSTED_TOKENS;\n    address[] public ADAPTERS;\n\n    event Recovered(\n        address indexed _asset, \n        uint amount\n    );\n\n    event UpdatedTrustedTokens(\n\t    address[] _newTrustedTokens\n    );\n\n    event UpdatedAdapters(\n        address[] _newAdapters\n    );\n\n    event UpdatedMinFee(\n        uint _oldMinFee,\n        uint _newMinFee\n    );\n\n    event UpdatedFeeClaimer(\n        address _oldFeeClaimer, \n        address _newFeeClaimer \n    );\n\n    event YakSwap(\n        address indexed _tokenIn, \n        address indexed _tokenOut, \n        uint _amountIn, \n        uint _amountOut\n    );\n\n    struct Query {\n        address adapter;\n        address tokenIn;\n        address tokenOut;\n        uint256 amountOut;\n    }\n\n    struct OfferWithGas {\n        bytes amounts;\n        bytes adapters;\n        bytes path;\n        uint gasEstimate;\n    }\n\n    struct Offer {\n        bytes amounts;\n        bytes adapters;\n        bytes path;\n    }\n\n    struct FormattedOfferWithGas {\n        uint[] amounts;\n        address[] adapters;\n        address[] path;\n        uint gasEstimate;\n    }\n\n    struct FormattedOffer {\n        uint[] amounts;\n        address[] adapters;\n        address[] path;\n    }\n\n    struct Trade {\n        uint amountIn;\n        uint amountOut;\n        address[] path;\n        address[] adapters;\n    }\n\n    constructor(\n        address[] memory _adapters, \n        address[] memory _trustedTokens, \n        address _feeClaimer\n    ) {\n        setTrustedTokens(_trustedTokens);\n        setFeeClaimer(_feeClaimer);\n        setAdapters(_adapters);\n        _setAllowances();\n    }\n\n    // -- SETTERS --\n\n    function _setAllowances() internal {\n        IERC20(WAVAX).safeApprove(WAVAX, type(uint).max);\n    }\n\n    function setTrustedTokens(address[] memory _trustedTokens) public onlyOwner {\n        emit UpdatedTrustedTokens(_trustedTokens);\n        TRUSTED_TOKENS = _trustedTokens;\n    }\n\n    function setAdapters(address[] memory _adapters) public onlyOwner {\n        emit UpdatedAdapters(_adapters);\n        ADAPTERS = _adapters;\n    }\n\n    function setMinFee(uint _fee) external onlyOwner {\n        emit UpdatedMinFee(MIN_FEE, _fee);\n        MIN_FEE = _fee;\n    }\n\n    function setFeeClaimer(address _claimer) public onlyOwner {\n        emit UpdatedFeeClaimer(FEE_CLAIMER, _claimer);\n        FEE_CLAIMER = _claimer;\n    }\n\n    //  -- GENERAL --\n\n    function trustedTokensCount() external view returns (uint) {\n        return TRUSTED_TOKENS.length;\n    }\n\n    function adaptersCount() external view returns (uint) {\n        return ADAPTERS.length;\n    }\n\n    function recoverERC20(address _tokenAddress, uint _tokenAmount) external onlyOwner {\n        require(_tokenAmount > 0, 'YakRouter: Nothing to recover');\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\n        emit Recovered(_tokenAddress, _tokenAmount);\n    }\n\n    function recoverAVAX(uint _amount) external onlyOwner {\n        require(_amount > 0, 'YakRouter: Nothing to recover');\n        payable(msg.sender).transfer(_amount);\n        emit Recovered(address(0), _amount);\n    }\n\n    // Fallback\n    receive() external payable {}\n\n\n    // -- HELPERS -- \n\n    function _applyFee(uint _amountIn, uint _fee) internal view returns (uint) {\n        require(_fee>=MIN_FEE, 'YakRouter: Insufficient fee');\n        return _amountIn.mul(FEE_DENOMINATOR.sub(_fee))/FEE_DENOMINATOR;\n    }\n\n    function _wrap(uint _amount) internal {\n        IWETH(WAVAX).deposit{value: _amount}();\n    }\n\n    function _unwrap(uint _amount) internal {\n        IWETH(WAVAX).withdraw(_amount);\n    }\n\n    /**\n     * @notice Return tokens to user\n     * @dev Pass address(0) for AVAX\n     * @param _token address\n     * @param _amount tokens to return\n     * @param _to address where funds should be sent to\n     */\n    function _returnTokensTo(address _token, uint _amount, address _to) internal {\n        if (address(this)!=_to) {\n            if (_token == AVAX) {\n                payable(_to).transfer(_amount);\n            } else {\n                IERC20(_token).safeTransfer(_to, _amount);\n            }\n        }\n    }\n\n    /**\n     * Makes a deep copy of Offer struct\n     */\n    function _cloneOffer(\n        Offer memory _queries\n    ) internal pure returns (Offer memory) {\n        return Offer(\n            _queries.amounts, \n            _queries.adapters, \n            _queries.path\n        );\n    }\n\n    /**\n     * Makes a deep copy of OfferWithGas struct\n     */\n    function _cloneOfferWithGas(\n        OfferWithGas memory _queries\n    ) internal pure returns (OfferWithGas memory) {\n        return OfferWithGas(\n            _queries.amounts, \n            _queries.adapters, \n            _queries.path, \n            _queries.gasEstimate\n        );\n    }\n\n    /**\n     * Appends Query elements to Offer struct\n     */\n    function _addQuery(\n        Offer memory _queries, \n        uint256 _amount, \n        address _adapter, \n        address _tokenOut\n    ) internal pure {\n        _queries.path = BytesManipulation.mergeBytes(_queries.path, BytesManipulation.toBytes(_tokenOut));\n        _queries.amounts = BytesManipulation.mergeBytes(_queries.amounts, BytesManipulation.toBytes(_amount));\n        _queries.adapters = BytesManipulation.mergeBytes(_queries.adapters, BytesManipulation.toBytes(_adapter));\n    }\n\n    /**\n     * Appends Query elements to Offer struct\n     */\n    function _addQueryWithGas(\n        OfferWithGas memory _queries, \n        uint256 _amount, \n        address _adapter, \n        address _tokenOut, \n        uint _gasEstimate\n    ) internal pure {\n        _queries.path = BytesManipulation.mergeBytes(_queries.path, BytesManipulation.toBytes(_tokenOut));\n        _queries.amounts = BytesManipulation.mergeBytes(_queries.amounts, BytesManipulation.toBytes(_amount));\n        _queries.adapters = BytesManipulation.mergeBytes(_queries.adapters, BytesManipulation.toBytes(_adapter));\n        _queries.gasEstimate += _gasEstimate;\n    }\n\n    /**\n     * Converts byte-arrays to an array of integers\n     */\n    function _formatAmounts(bytes memory _amounts) internal pure returns (uint256[] memory) {\n        // Format amounts\n        uint256 chunks = _amounts.length / 32;\n        uint256[] memory amountsFormatted = new uint256[](chunks);\n        for (uint256 i=0; i<chunks; i++) {\n            amountsFormatted[i] = BytesManipulation.bytesToUint256(i*32+32, _amounts);\n        }\n        return amountsFormatted;\n    }\n\n    /**\n     * Converts byte-array to an array of addresses\n     */\n    function _formatAddresses(bytes memory _addresses) internal pure returns (address[] memory) {\n        uint256 chunks = _addresses.length / 32;\n        address[] memory addressesFormatted = new address[](chunks);\n        for (uint256 i=0; i<chunks; i++) {\n            addressesFormatted[i] = BytesManipulation.bytesToAddress(i*32+32, _addresses);\n        }\n        return addressesFormatted;\n    }\n\n    /**\n     * Formats elements in the Offer object from byte-arrays to integers and addresses\n     */\n    function _formatOffer(Offer memory _queries) internal pure returns (FormattedOffer memory) {\n        return FormattedOffer(\n            _formatAmounts(_queries.amounts), \n            _formatAddresses(_queries.adapters), \n            _formatAddresses(_queries.path)\n        );\n    }\n\n    /**\n     * Formats elements in the Offer object from byte-arrays to integers and addresses\n     */\n    function _formatOfferWithGas(OfferWithGas memory _queries) internal pure returns (FormattedOfferWithGas memory) {\n        return FormattedOfferWithGas(\n            _formatAmounts(_queries.amounts), \n            _formatAddresses(_queries.adapters), \n            _formatAddresses(_queries.path), \n            _queries.gasEstimate\n        );\n    }\n\n\n    // -- QUERIES --\n\n\n    /**\n     * Query single adapter\n     */\n    function queryAdapter(\n        uint256 _amountIn, \n        address _tokenIn, \n        address _tokenOut,\n        uint8 _index\n    ) external view returns (uint256) {\n        IAdapter _adapter = IAdapter(ADAPTERS[_index]);\n        uint amountOut = _adapter.query(_amountIn, _tokenIn, _tokenOut);\n        return amountOut;\n    }\n\n    /**\n     * Query specified adapters\n     */\n    function queryNoSplit(\n        uint256 _amountIn, \n        address _tokenIn, \n        address _tokenOut,\n        uint8[] calldata _options\n    ) public view returns (Query memory) {\n        Query memory bestQuery;\n        for (uint8 i; i<_options.length; i++) {\n            address _adapter = ADAPTERS[_options[i]];\n            uint amountOut = IAdapter(_adapter).query(\n                _amountIn, \n                _tokenIn, \n                _tokenOut\n            );\n            if (i==0 || amountOut>bestQuery.amountOut) {\n                bestQuery = Query(_adapter, _tokenIn, _tokenOut, amountOut);\n            }\n        }\n        return bestQuery;\n    }\n\n    /**\n     * Query all adapters\n     */\n    function queryNoSplit(\n        uint256 _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) public view returns (Query memory) {\n        Query memory bestQuery;\n        for (uint8 i; i<ADAPTERS.length; i++) {\n            address _adapter = ADAPTERS[i];\n            uint amountOut = IAdapter(_adapter).query(\n                _amountIn, \n                _tokenIn, \n                _tokenOut\n            );\n            if (i==0 || amountOut>bestQuery.amountOut) {\n                bestQuery = Query(_adapter, _tokenIn, _tokenOut, amountOut);\n            }\n        }\n        return bestQuery;\n    }\n\n    /**\n     * Return path with best returns between two tokens\n     * Takes gas-cost into account\n     */\n    function findBestPathWithGas(\n        uint256 _amountIn, \n        address _tokenIn, \n        address _tokenOut, \n        uint _maxSteps,\n        uint _gasPrice\n    ) external view returns (FormattedOfferWithGas memory) {\n        require(_maxSteps>0 && _maxSteps<5, 'YakRouter: Invalid max-steps');\n        OfferWithGas memory queries;\n        queries.amounts = BytesManipulation.toBytes(_amountIn);\n        queries.path = BytesManipulation.toBytes(_tokenIn);\n        // Find the market price between AVAX and token-out and express gas price in token-out currency\n        FormattedOffer memory gasQuery = findBestPath(1e18, WAVAX, _tokenOut, 2);  // Avoid low-liquidity price appreciation\n        // Include safety check if no 2-step path between WAVAX and tokenOut is found\n        uint tknOutPriceNwei = 0;\n        if (gasQuery.path.length != 0) {\n            // Leave result nWei to preserve digits for assets with low decimal places\n            tknOutPriceNwei = gasQuery.amounts[gasQuery.amounts.length-1].mul(_gasPrice/1e9);\n        }\n        queries = _findBestPathWithGas(\n            _amountIn, \n            _tokenIn, \n            _tokenOut, \n            _maxSteps,\n            queries, \n            tknOutPriceNwei\n        );\n        // If no paths are found return empty struct\n        if (queries.adapters.length==0) {\n            queries.amounts = '';\n            queries.path = '';\n        }\n        return _formatOfferWithGas(queries);\n    } \n\n    function _findBestPathWithGas(\n        uint256 _amountIn, \n        address _tokenIn, \n        address _tokenOut, \n        uint _maxSteps,\n        OfferWithGas memory _queries, \n        uint _tknOutPriceNwei\n    ) internal view returns (OfferWithGas memory) {\n        OfferWithGas memory bestOption = _cloneOfferWithGas(_queries);\n        uint256 bestAmountOut;\n        // First check if there is a path directly from tokenIn to tokenOut\n        Query memory queryDirect = queryNoSplit(_amountIn, _tokenIn, _tokenOut);\n        if (queryDirect.amountOut!=0) {\n            uint gasEstimate = IAdapter(queryDirect.adapter).swapGasEstimate();\n            _addQueryWithGas(\n                bestOption, \n                queryDirect.amountOut, \n                queryDirect.adapter, \n                queryDirect.tokenOut, \n                gasEstimate\n            );\n            bestAmountOut = queryDirect.amountOut;\n        }\n        // Only check the rest if they would go beyond step limit (Need at least 2 more steps)\n        if (_maxSteps>1 && _queries.adapters.length/32<=_maxSteps-2) {\n            // Check for paths that pass through trusted tokens\n            for (uint256 i=0; i<TRUSTED_TOKENS.length; i++) {\n                if (_tokenIn == TRUSTED_TOKENS[i]) {\n                    continue;\n                }\n                // Loop through all adapters to find the best one for swapping tokenIn for one of the trusted tokens\n                Query memory bestSwap = queryNoSplit(_amountIn, _tokenIn, TRUSTED_TOKENS[i]);\n                if (bestSwap.amountOut==0) {\n                    continue;\n                }\n                // Explore options that connect the current path to the tokenOut\n                OfferWithGas memory newOffer = _cloneOfferWithGas(_queries);\n                uint gasEstimate = IAdapter(bestSwap.adapter).swapGasEstimate();\n                _addQueryWithGas(newOffer, bestSwap.amountOut, bestSwap.adapter, bestSwap.tokenOut, gasEstimate);\n                newOffer = _findBestPathWithGas(\n                    bestSwap.amountOut, \n                    TRUSTED_TOKENS[i], \n                    _tokenOut, \n                    _maxSteps, \n                    newOffer, \n                    _tknOutPriceNwei\n                );\n                address tokenOut = BytesManipulation.bytesToAddress(newOffer.path.length, newOffer.path);\n                uint256 amountOut = BytesManipulation.bytesToUint256(newOffer.amounts.length, newOffer.amounts);\n                // Check that the last token in the path is the tokenOut and update the new best option if neccesary\n                if (_tokenOut == tokenOut && amountOut > bestAmountOut) {\n                    if (newOffer.gasEstimate > bestOption.gasEstimate) {\n                        uint gasCostDiff = _tknOutPriceNwei.mul(newOffer.gasEstimate-bestOption.gasEstimate) / 1e9;\n                        uint priceDiff = amountOut - bestAmountOut;\n                        if (gasCostDiff > priceDiff) { continue; }\n                    }\n                    bestAmountOut = amountOut;\n                    bestOption = newOffer;\n                }\n            }\n        }\n        return bestOption;   \n    }\n\n    /**\n     * Return path with best returns between two tokens\n     */\n    function findBestPath(\n        uint256 _amountIn, \n        address _tokenIn, \n        address _tokenOut, \n        uint _maxSteps\n    ) public view returns (FormattedOffer memory) {\n        require(_maxSteps>0 && _maxSteps<5, 'YakRouter: Invalid max-steps');\n        Offer memory queries;\n        queries.amounts = BytesManipulation.toBytes(_amountIn);\n        queries.path = BytesManipulation.toBytes(_tokenIn);\n        queries = _findBestPath(_amountIn, _tokenIn, _tokenOut, _maxSteps, queries);\n        // If no paths are found return empty struct\n        if (queries.adapters.length==0) {\n            queries.amounts = '';\n            queries.path = '';\n        }\n        return _formatOffer(queries);\n    } \n\n    function _findBestPath(\n        uint256 _amountIn, \n        address _tokenIn, \n        address _tokenOut, \n        uint _maxSteps,\n        Offer memory _queries\n    ) internal view returns (Offer memory) {\n        Offer memory bestOption = _cloneOffer(_queries);\n        uint256 bestAmountOut;\n        // First check if there is a path directly from tokenIn to tokenOut\n        Query memory queryDirect = queryNoSplit(_amountIn, _tokenIn, _tokenOut);\n        if (queryDirect.amountOut!=0) {\n            _addQuery(bestOption, queryDirect.amountOut, queryDirect.adapter, queryDirect.tokenOut);\n            bestAmountOut = queryDirect.amountOut;\n        }\n        // Only check the rest if they would go beyond step limit (Need at least 2 more steps)\n        if (_maxSteps>1 && _queries.adapters.length/32<=_maxSteps-2) {\n            // Check for paths that pass through trusted tokens\n            for (uint256 i=0; i<TRUSTED_TOKENS.length; i++) {\n                if (_tokenIn == TRUSTED_TOKENS[i]) {\n                    continue;\n                }\n                // Loop through all adapters to find the best one for swapping tokenIn for one of the trusted tokens\n                Query memory bestSwap = queryNoSplit(_amountIn, _tokenIn, TRUSTED_TOKENS[i]);\n                if (bestSwap.amountOut==0) {\n                    continue;\n                }\n                // Explore options that connect the current path to the tokenOut\n                Offer memory newOffer = _cloneOffer(_queries);\n                _addQuery(newOffer, bestSwap.amountOut, bestSwap.adapter, bestSwap.tokenOut);\n                newOffer = _findBestPath(\n                    bestSwap.amountOut, \n                    TRUSTED_TOKENS[i], \n                    _tokenOut, \n                    _maxSteps,\n                    newOffer\n                );  // Recursive step\n                address tokenOut = BytesManipulation.bytesToAddress(newOffer.path.length, newOffer.path);\n                uint256 amountOut = BytesManipulation.bytesToUint256(newOffer.amounts.length, newOffer.amounts);\n                // Check that the last token in the path is the tokenOut and update the new best option if neccesary\n                if (_tokenOut == tokenOut && amountOut>bestAmountOut) {\n                    bestAmountOut = amountOut;\n                    bestOption = newOffer;\n                }\n            }\n        }\n        return bestOption;   \n    }\n\n\n    // -- SWAPPERS --\n\n    function _swapNoSplit(\n        Trade calldata _trade,\n        address _from,\n        address _to, \n        uint _fee\n    ) internal returns (uint) {\n        uint[] memory amounts = new uint[](_trade.path.length);\n        if (_fee > 0 || MIN_FEE > 0) {\n            // Transfer fees to the claimer account and decrease initial amount\n            amounts[0] = _applyFee(_trade.amountIn, _fee);\n            IERC20(_trade.path[0]).safeTransferFrom(\n                _from, \n                FEE_CLAIMER, \n                _trade.amountIn.sub(amounts[0])\n            );\n        } else {\n            amounts[0] = _trade.amountIn;\n        }\n        IERC20(_trade.path[0]).safeTransferFrom(\n            _from, \n            _trade.adapters[0], \n            amounts[0]\n        );\n        // Get amounts that will be swapped\n        for (uint i=0; i<_trade.adapters.length; i++) {\n            amounts[i+1] = IAdapter(_trade.adapters[i]).query(\n                amounts[i], \n                _trade.path[i], \n                _trade.path[i+1]\n            );\n        }\n        require(amounts[amounts.length-1] >= _trade.amountOut, 'YakRouter: Insufficient output amount');\n        for (uint256 i=0; i<_trade.adapters.length; i++) {\n            // All adapters should transfer output token to the following target\n            // All targets are the adapters, expect for the last swap where tokens are sent out\n            address targetAddress = i<_trade.adapters.length-1 ? _trade.adapters[i+1] : _to;\n            IAdapter(_trade.adapters[i]).swap(\n                amounts[i], \n                amounts[i+1], \n                _trade.path[i], \n                _trade.path[i+1],\n                targetAddress\n            );\n        }\n        emit YakSwap(\n            _trade.path[0], \n            _trade.path[_trade.path.length-1], \n            _trade.amountIn, \n            amounts[amounts.length-1]\n        );\n        return amounts[amounts.length-1];\n    }\n\n    function swapNoSplit(\n        Trade calldata _trade,\n        address _to,\n        uint _fee\n    ) public {\n        _swapNoSplit(_trade, msg.sender, _to, _fee);\n    }\n\n    function swapNoSplitFromAVAX(\n        Trade calldata _trade,\n        address _to,\n        uint _fee\n    ) external payable {\n        require(_trade.path[0]==WAVAX, 'YakRouter: Path needs to begin with WAVAX');\n        _wrap(_trade.amountIn);\n        _swapNoSplit(_trade, address(this), _to, _fee);\n    }\n\n    function swapNoSplitToAVAX(\n        Trade calldata _trade,\n        address _to,\n        uint _fee\n    ) public {\n        require(_trade.path[_trade.path.length-1]==WAVAX, 'YakRouter: Path needs to end with WAVAX');\n        uint returnAmount = _swapNoSplit(_trade, msg.sender, address(this), _fee);\n        _unwrap(returnAmount);\n        _returnTokensTo(AVAX, returnAmount, _to);\n    }\n\n    /**\n     * Swap token to token without the need to approve the first token\n     */\n    function swapNoSplitWithPermit(\n        Trade calldata _trade,\n        address _to,\n        uint _fee,\n        uint _deadline, \n        uint8 _v,\n        bytes32 _r, \n        bytes32 _s\n    ) external {\n        IERC20(_trade.path[0]).permit(\n            msg.sender, \n            address(this), \n            _trade.amountIn, \n            _deadline, \n            _v, \n            _r, \n            _s\n        );\n        swapNoSplit(_trade, _to, _fee);\n    } \n\n    /**\n     * Swap token to AVAX without the need to approve the first token\n     */\n    function swapNoSplitToAVAXWithPermit(\n        Trade calldata _trade,\n        address _to,\n        uint _fee,\n        uint _deadline, \n        uint8 _v,\n        bytes32 _r, \n        bytes32 _s\n    ) external {\n        IERC20(_trade.path[0]).permit(\n            msg.sender, \n            address(this), \n            _trade.amountIn, \n            _deadline, \n            _v, \n            _r, \n            _s\n        );\n        swapNoSplitToAVAX(_trade, _to, _fee);\n    }\n\n}"
    },
    "contracts/lib/BytesManipulation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\nimport \"./BytesToTypes.sol\";\n\nlibrary BytesManipulation {\n\n    function toBytes(uint256 x) internal pure returns (bytes memory b) {\n        b = new bytes(32);\n        assembly { mstore(add(b, 32), x) }\n    }\n\n    function toBytes(address x) internal pure returns (bytes memory b) {\n        b = new bytes(32);\n        assembly { mstore(add(b, 32), x) }\n    }\n\n    function mergeBytes(bytes memory a, bytes memory b) public pure returns (bytes memory c) {\n        // From https://ethereum.stackexchange.com/a/40456\n        uint alen = a.length;\n        uint totallen = alen + b.length;\n        uint loopsa = (a.length + 31) / 32;\n        uint loopsb = (b.length + 31) / 32;\n        assembly {\n            let m := mload(0x40)\n            mstore(m, totallen)\n            for {  let i := 0 } lt(i, loopsa) { i := add(1, i) } { mstore(add(m, mul(32, add(1, i))), mload(add(a, mul(32, add(1, i))))) }\n            for {  let i := 0 } lt(i, loopsb) { i := add(1, i) } { mstore(add(m, add(mul(32, add(1, i)), alen)), mload(add(b, mul(32, add(1, i))))) }\n            mstore(0x40, add(m, add(32, totallen)))\n            c := m\n        }\n    }\n\n    function bytesToAddress(uint _offst, bytes memory _input) internal pure returns (address) {\n        return BytesToTypes.bytesToAddress(_offst, _input);\n    }\n\n    function bytesToUint256(uint _offst, bytes memory _input) internal pure returns (uint256) {\n        return BytesToTypes.bytesToUint256(_offst, _input);\n    } \n\n}\n"
    },
    "contracts/interface/IAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface IAdapter {\n    function name() external view returns (string memory);\n    function swapGasEstimate() external view returns (uint);\n    function swap(uint256, uint256, address, address, address) external;\n    function query(uint256, address, address) external view returns (uint);\n}"
    },
    "contracts/lib/BytesToTypes.sol": {
      "content": "// From https://github.com/pouladzade/Seriality/blob/master/src/BytesToTypes.sol (Licensed under Apache2.0)\n\n// SPDX-License-Identifier: Apache2.0\npragma solidity >=0.7.0;\n\nlibrary BytesToTypes {\n\n    function bytesToAddress(uint _offst, bytes memory _input) internal pure returns (address _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToUint256(uint _offst, bytes memory _input) internal pure returns (uint256 _output) {\n        \n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    } \n}\n"
    },
    "contracts/adapters/WoofiAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.7.0;\n\nimport \"../interface/IWooPP.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract WoofiAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant id = keccak256(\"WoofiAdapter\");\n    address public immutable quoteToken;\n    address public rebateCollector;\n    address public immutable pool;\n\n    constructor(\n        string memory _name, \n        uint _swapGasEstimate, \n        address _pool\n    ) {\n        setSwapGasEstimate(_swapGasEstimate);\n        quoteToken = IWooPP(_pool).quoteToken();\n        pool = _pool;\n        name = _name;\n    }\n\n    function setRebateCollector(address _rebateCollector) external onlyOwner {\n        rebateCollector = _rebateCollector;\n    }\n\n    function _approveIfNeeded(\n        address _tokenIn, \n        uint _amount\n    ) internal override {\n        uint allowance = IERC20(_tokenIn).allowance(address(this), pool);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\n        }\n    }\n\n    function _safeQuery(\n        function (address, uint) external view returns (uint) qFn,\n        address _baseToken, \n        uint _baseAmount\n    ) internal view returns (uint) {\n        try qFn(_baseToken, _baseAmount) returns (uint amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint amountOut) {\n        if (_amountIn == 0) { \n            return 0; \n        }\n        if (_tokenIn == quoteToken) {\n            amountOut = _safeQuery(IWooPP(pool).querySellQuote, _tokenOut, _amountIn);\n        } else if (_tokenOut == quoteToken) {\n            amountOut = _safeQuery(IWooPP(pool).querySellBase, _tokenIn, _amountIn);\n        } else {\n            uint quoteAmount = _safeQuery(IWooPP(pool).querySellBase, _tokenIn, _amountIn);\n            amountOut = _safeQuery(IWooPP(pool).querySellQuote, _tokenOut, quoteAmount);\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        uint realToAmount;\n        if (_tokenIn == quoteToken) {\n            realToAmount = IWooPP(pool).sellQuote(\n                _tokenOut,\n                _amountIn,\n                _amountOut,\n                _to,\n                rebateCollector\n            );\n        } else if (_tokenOut == quoteToken) {\n            realToAmount = IWooPP(pool).sellBase(\n                _tokenIn, \n                _amountIn, \n                _amountOut, \n                _to, \n                rebateCollector\n            );\n        } else {\n            uint256 quoteAmount = IWooPP(pool).sellBase(\n                _tokenIn, \n                _amountIn, \n                0, \n                address(this), \n                rebateCollector\n            );\n            _approveIfNeeded(quoteToken, quoteAmount);\n            realToAmount = IWooPP(pool).sellQuote(\n                _tokenOut, \n                quoteAmount, \n                _amountOut, \n                _to, \n                rebateCollector\n            );\n        }\n    }\n\n    function setAllowances() public override onlyOwner {}\n\n}"
    },
    "contracts/interface/IWooPP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface IWooPP {\n\n    function quoteToken() external view returns (address);\n    function querySellQuote(address, uint256) external view returns (uint256);\n    function querySellBase(address, uint256) external view returns (uint256);\n\n    function sellBase(\n        address baseToken,\n        uint256 baseAmount,\n        uint256 minQuoteAmount,\n        address to,\n        address rebateTo\n    ) external returns (uint256 quoteAmount);\n    function sellQuote(\n        address baseToken,\n        uint256 quoteAmount,\n        uint256 minBaseAmount,\n        address to,\n        address rebateTo\n    ) external returns (uint256 baseAmount);\n\n}"
    },
    "contracts/interface/IKyberRouter.sol": {
      "content": "pragma solidity >=0.7.0;\n\nimport \"./IERC20.sol\";\n\ninterface IKyberRouter {\n\n    function getAmountsOut(\n        uint256 amountIn,\n        address[] calldata poolsPath,\n        IERC20[] calldata path\n    ) external view returns (uint256[] memory amounts);\n\n}\n"
    },
    "contracts/adapters/UnilikeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/IUnilikeFactory.sol\";\nimport \"../interface/IUnilikePair.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../lib/SafeMath.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract UnilikeAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    bytes32 public constant ID = keccak256(\"UnilikeAdapter\");\n    uint internal constant FEE_DENOMINATOR = 1e3;\n    uint public immutable feeCompliment;\n    address public immutable factory;\n\n    constructor(\n        string memory _name, \n        address _factory, \n        uint _fee,\n        uint _swapGasEstimate\n    ) {\n        require(FEE_DENOMINATOR > _fee, 'YakUnilikeAdapter: Fee greater than the denominator');\n        factory = _factory;\n        name = _name;\n        feeCompliment = FEE_DENOMINATOR.sub(_fee);\n        setSwapGasEstimate(_swapGasEstimate);\n        setAllowances();\n    }\n\n    function setAllowances() public override onlyOwner {\n        IERC20(WAVAX).safeApprove(WAVAX, UINT_MAX);\n    }\n\n    function _approveIfNeeded(address tokenIn, uint amount) internal override {}\n\n    function _getAmountOut(\n        uint _amountIn, \n        uint _reserveIn, \n        uint _reserveOut\n    ) internal view returns (uint amountOut) {\n        // Based on https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/UniswapV2Router02.sol\n        uint amountInWithFee = _amountIn.mul(feeCompliment);\n        uint numerator = amountInWithFee.mul(_reserveOut);\n        uint denominator = _reserveIn.mul(FEE_DENOMINATOR).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint) {\n        if (_tokenIn == _tokenOut || _amountIn==0) { return 0; }\n        address pair = IUnilikeFactory(factory).getPair(_tokenIn, _tokenOut);\n        if (pair == address(0)) { return 0; }\n        (uint r0, uint r1, ) = IUnilikePair(pair).getReserves();\n        (uint reserveIn, uint reserveOut) = _tokenIn < _tokenOut ? (r0, r1) : (r1, r0);\n        if (reserveIn > 0 && reserveOut > 0) {\n            return _getAmountOut(_amountIn, reserveIn, reserveOut);\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address to\n    ) internal override {\n        address pair = IUnilikeFactory(factory).getPair(_tokenIn, _tokenOut);\n        (uint amount0Out, uint amount1Out) = (_tokenIn < _tokenOut) ? (uint(0), _amountOut) : (_amountOut, uint(0));\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\n        IUnilikePair(pair).swap(\n            amount0Out, \n            amount1Out,\n            to, \n            new bytes(0)\n        );\n    }\n}"
    },
    "contracts/interface/IUnilikeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface IUnilikeFactory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}"
    },
    "contracts/interface/IUnilikePair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface IUnilikePair {\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n}"
    },
    "contracts/adapters/PlatypusAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//  \n//                            ,=.\n//                ,=\"\"\"\"==.__.=\"  o\".___\n//          ,=.==\"                  ___/\n//    ,==.,\"    ,          , \\,===\"\"\n//   <     ,==)  \\\"'\"=._.==)  \\\n//    `==''    `\"           `\"\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/IPlatypus.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../interface/IWETH.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\n\ncontract PlatypusAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    event AddPoolSupport(\n        address pool\n    );\n\n    event PartialPoolSupport(\n        address pool, \n        address[] tkns\n    );\n\n    event RmPoolSupport(\n        address pool\n    );\n\n    bytes32 public constant indentifier = keccak256(\"PlatypusAdapter\");\n    mapping(address => mapping(address => address)) private tknToTknToPool;\n\n    constructor (\n        string memory _name, \n        uint _swapGasEstimate\n    ) {\n        name = _name;\n        setSwapGasEstimate(_swapGasEstimate);\n    }\n\n    function setAllowances() public override onlyOwner {}\n\n    function getPoolForTkns(\n        address tknIn, \n        address tknOut\n    ) public view returns (address) {\n        return tknToTknToPool[tknIn][tknOut];\n    }\n\n    function _approveIfNeeded(address tkn, address spender) internal {\n        uint allowance = IERC20(tkn).allowance(address(this), spender);\n        if (allowance < UINT_MAX) {\n            IERC20(tkn).approve(spender, UINT_MAX);\n        }\n    }\n\n    // @dev Returns false if repeated tkns\n    function _poolSupportsTkns(\n        address pool,\n        address[] memory tkns\n    ) internal view returns (bool) {\n        address[] memory supportedTkns = IPlatypus(pool).getTokenAddresses();\n        uint supportedCount;\n        for (uint i = 0; i < supportedTkns.length; i++) {\n            for (uint j = 0; j < tkns.length; j++) {\n                if (supportedTkns[i] == tkns[j]) {\n                    supportedCount++;\n                    break;\n                }\n            }\n        }\n        return supportedCount == tkns.length;\n    }\n\n    function _setPoolForTkns(\n        address[] memory tkns, \n        address pool\n    ) internal {\n        for (uint i = 0; i < tkns.length; i++) {\n            for (uint j = 0; j < tkns.length; j++) {\n                if (i != j) {\n                    tknToTknToPool[tkns[i]][tkns[j]] = pool;\n                    if (pool != address(0)) {\n                        _approveIfNeeded(tkns[i], pool);\n                    }\n                }\n            }\n        }\n    }\n\n    // Add pools for all tkns it supports\n    function addPools(address[] calldata pools) external onlyOwner {\n        for (uint i = 0; i < pools.length; i++) {\n            address pool = pools[i];\n            address[] memory supportedTkns = IPlatypus(pool).getTokenAddresses();\n            _setPoolForTkns(supportedTkns, pool);\n            emit AddPoolSupport(pool);\n        }\n    }\n\n    // Manually set the pool support for tkns\n    function setPoolForTkns(\n        address pool,\n        address[] memory tkns\n    ) external onlyOwner {\n        require(tkns.length > 1, 'At least two tkns');\n        require(pool != address(0), 'Only non-zero pool');\n        require(_poolSupportsTkns(pool, tkns), 'Pool does not support tkns');\n        // Assume above checks there is no repeats\n        _setPoolForTkns(tkns, pool);\n        emit PartialPoolSupport(pool, tkns);\n    }\n\n    function rmPools(address[] calldata pools) external onlyOwner {\n        for (uint i = 0; i < pools.length; i++) {\n            address pool = pools[i];\n            address[] memory supportedTkns = IPlatypus(pool).getTokenAddresses();\n            _setPoolForTkns(supportedTkns, address(0));\n            emit RmPoolSupport(pool);\n        }\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint) {\n        address pool = getPoolForTkns(_tokenIn, _tokenOut);\n        if (\n            pool == address(0) ||\n            _amountIn == 0 ||\n            IPlatypus(pool).paused()\n        ) { return 0; }\n        try IPlatypus(pool).quotePotentialSwap(\n            _tokenIn, \n            _tokenOut, \n            _amountIn\n        ) returns (uint amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        address pool = getPoolForTkns(_tokenIn, _tokenOut);\n        IPlatypus(pool).swap(\n            _tokenIn, \n            _tokenOut, \n            _amountIn, \n            _amountOut,\n            _to,\n            block.timestamp\n        );\n    }\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {}\n\n}"
    },
    "contracts/interface/IPlatypus.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface IPlatypus {\n\n    // Views\n    function quotePotentialSwap(\n        address fromToken, \n        address totoken, \n        uint fromAmount\n    ) external view returns (uint potentialOutcome);  // Second arg (haircut) is not used\n    function getTokenAddresses() external view returns (address[] memory);\n    function paused() external view returns (bool);\n\n    // Modifiers\n    function swap(\n        address fromToken,\n        address toToken,\n        uint fromAmount,\n        uint minAmountOut, \n        address to,\n        uint deadline\n    ) external;\n    function pause() external;\n    function unpause() external;\n\n}\n\n\n"
    },
    "contracts/adapters/GeodeWPAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/IGeodePortal.sol\";\nimport \"../interface/IGeodeWP.sol\";\nimport \"../interface/IgAVAX.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../interface/IWETH.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract GeodeWPAdapter is YakAdapter {\n\n    bytes32 constant id = keccak256(\"GeodeWPAdapter\");\n    uint constant gAVAX_DENOMINATOR = 1e18;\n    uint constant IGNORABLE_DEBT = 1e18;\n\n    uint public pooledTknId;\n    address public pooledTknInterface;\n    address public portal;\n    address public gavax;\n    address public pool;\n\n    constructor (\n        string memory _name, \n        address _portal,\n        uint _pooledTknId,\n        uint _swapGasEstimate\n    ) {\n        pooledTknId = _pooledTknId;\n        portal = _portal;\n        name = _name;\n        pooledTknInterface = IGeodePortal(_portal).planetCurrentInterface(\n            pooledTknId\n        );\n        pool = IGeodePortal(_portal).planetWithdrawalPool(pooledTknId);\n        gavax = IGeodePortal(_portal).gAVAX();\n        setSwapGasEstimate(_swapGasEstimate);\n        setAllowances();\n    }\n\n    function setInterfaceForPooledTkn(\n        address interfaceAddress\n    ) public onlyOwner {\n        require(\n            IgAVAX(gavax).isInterface(\n                interfaceAddress, \n                pooledTknId\n            ), \n            \"Not interface for the pooled token\"\n        );\n        pooledTknInterface = interfaceAddress;\n    }\n\n    function onERC1155Received(\n        address, \n        address, \n        uint256, \n        uint256, \n        bytes memory\n    ) public virtual returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function setAllowances() public override onlyOwner {\n        IgAVAX(gavax).setApprovalForAll(pool, true);\n    }\n\n    function revokeAllowance() public onlyOwner {\n        IgAVAX(gavax).setApprovalForAll(pool, false);\n    }\n\n    function _supportedTokens(\n        address tknIn, \n        address tknOut\n    ) internal view returns (bool) {\n        return (tknOut == WAVAX && tknIn == pooledTknInterface)\n            || (tknIn == WAVAX && tknOut == pooledTknInterface);\n    }\n\n    function _stakingPaused() internal view returns (bool) {\n        return IGeodePortal(portal).isStakingPausedForPool(pooledTknId);\n    }\n\n    function _calcSwap(\n        uint8 tknInIndex,\n        uint8 tknOutIndex,\n        uint amountIn\n    ) internal view returns (uint) {\n        try IGeodeWP(pool).calculateSwap(\n            tknInIndex, \n            tknOutIndex, \n            amountIn\n        ) returns (uint amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _calculateMint(uint amountIn) internal view returns (uint) {\n        uint price = IgAVAX(gavax).pricePerShare(pooledTknId);\n        return amountIn * gAVAX_DENOMINATOR / price;\n    }\n\n    function _calcSwapAndMint(uint amountIn) internal view returns (uint) {\n        uint debt = IGeodeWP(pool).getDebt();\n        if (debt >= amountIn || _stakingPaused()) {\n            // If pool is unbalanced and missing avax it's cheaper to swap\n            return _calcSwap(0, 1, amountIn);\n        } else {\n            // Swap debt and mint the rest\n            uint amountOutBought;\n            if (debt > IGNORABLE_DEBT)\n                amountOutBought = _calcSwap(0, 1, debt);\n            uint amountOutMinted = _calculateMint(amountIn - debt);\n            return amountOutBought + amountOutMinted;\n        }\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint) {\n        if (_amountIn == 0 || _tokenIn == _tokenOut || IGeodeWP(pool).paused())\n            return 0;\n        if (_tokenIn == WAVAX && _tokenOut == pooledTknInterface)\n            return _calcSwapAndMint(_amountIn);\n        if (_tokenOut == WAVAX && _tokenIn == pooledTknInterface)\n            return _calcSwap(1, 0, _amountIn);\n    }\n\n    function _swapUnderlying(\n        uint8 _tokenInIndex,\n        uint8 _tokenOutIndex,\n        uint _amountIn, \n        uint _amountOut,\n        uint _val\n    ) internal {        \n        IGeodeWP(pool).swap{ value: _val }(\n            _tokenInIndex, \n            _tokenOutIndex,\n            _amountIn, \n            _amountOut, \n            block.timestamp\n        );\n    }\n\n    function _geodeStake(\n        uint _amountIn, \n        uint _amountOut\n    ) internal {\n        IGeodePortal(portal).stake{ value: _amountIn }(\n            pooledTknId, \n            _amountOut, \n            block.timestamp\n        );\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        if (_tokenIn == WAVAX) {\n            IWETH(WAVAX).withdraw(_amountIn);\n            if (_stakingPaused())\n                _swapUnderlying(0, 1, _amountIn, _amountOut, _amountIn);\n            else \n                _geodeStake(_amountIn, _amountOut);\n        } else {\n            _swapUnderlying(1, 0, _amountIn, _amountOut, 0);\n            IWETH(WAVAX).deposit{ value: address(this).balance }();\n        }\n        _returnTo(_tokenOut, IERC20(_tokenOut).balanceOf(address(this)), _to);\n    }\n\n    function _approveIfNeeded(address, uint) internal override {}\n\n}"
    },
    "contracts/interface/IGeodePortal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.7.0;\n\ninterface IGeodePortal {\n\n  function gAVAX() external view returns (address);\n  function getNameFromId(uint256 _id) external view returns (bytes memory);\n  function planetCurrentInterface(uint256 _id) external view returns (address);\n  function planetWithdrawalPool(uint256 _id) external view returns (address);\n  function getMaintainerFromId(uint256) external view returns (address);\n  function isStakingPausedForPool(uint) external view returns (bool);\n\n  function unpauseStakingForPool(uint) external;\n  function pauseStakingForPool(uint) external;\n  function stake(\n    uint256 planetId,\n    uint256 minGavax,\n    uint256 deadline\n  ) external payable returns (uint256 totalgAvax);\n}"
    },
    "contracts/interface/IGeodeWP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.7.0;\n\ninterface IGeodeWP {\n\n  function paused() external view returns (bool);\n  function getDebt() external view returns (uint);\n  function getToken() external view returns (uint256);\n  function getERC1155() external view returns (address);\n  function getTokenBalance(uint8) external view returns (uint256);\n\n  function calculateSwap(\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 dx\n  ) external view returns (uint256);\n\n  function swap(\n    uint8 tokenIndexFrom,\n    uint8 tokenIndexTo,\n    uint256 dx,\n    uint256 minDy,\n    uint256 deadline\n  ) external payable returns (uint256);\n\n  function addLiquidity(\n    uint256[] calldata amounts,\n    uint256 minToMint,\n    uint256 deadline\n  ) external payable;\n\n}"
    },
    "contracts/interface/IgAVAX.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\n// @note: operator stands for interface address \ninterface IgAVAX {\n\n  function setApprovalForAll(address operator, bool approved) external;\n  function pricePerShare(uint256 _id) external view returns (uint256);\n  \n  function balanceOf(\n    address account, \n    uint256 id\n  ) external view returns (uint256);\n\n  function isInterface(address operator, uint256 id)\n    external\n    view\n    returns (bool);\n\n  function isApprovedForAll(address account, address operator)\n    external\n    view\n    returns (bool);\n\n}"
    },
    "contracts/adapters/CurveLikeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/ICurveLikePool.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../interface/IWETH.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurveLikeAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant indentifier = keccak256(\"CurvelikeAdapter\");\n    mapping (address => bool) public isPoolToken;\n    mapping (address => uint8) public tokenIndex;\n    address public pool;\n\n    constructor (\n        string memory _name, \n        address _pool, \n        uint _swapGasEstimate\n    ) {\n        pool = _pool;\n        name = _name;\n        setSwapGasEstimate(_swapGasEstimate);\n        _setPoolTokens();\n    }\n\n    // Mapping indicator which tokens are included in the pool \n    function _setPoolTokens() internal {\n        for (uint8 i=0; true; i++) {\n            try ICurveLikePool(pool).getToken(i) returns (address token) {\n                isPoolToken[token] = true;\n                tokenIndex[token] = i;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function setAllowances() public override onlyOwner {}\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\n        uint allowance = IERC20(_tokenIn).allowance(address(this), pool);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\n        }\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint) {\n        if (\n            !isPoolToken[_tokenIn] || \n            !isPoolToken[_tokenOut] ||\n            _tokenIn == _tokenOut ||\n            _amountIn == 0 ||\n            ICurveLikePool(pool).paused()\n        ) { return 0; }\n        try ICurveLikePool(pool).calculateSwap(\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut], \n            _amountIn\n        ) returns (uint amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        // Note that unsupported token will return index 0 which is valid\n        ICurveLikePool(pool).swap(\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut], \n            _amountIn, \n            _amountOut, \n            block.timestamp\n        );\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n\n}"
    },
    "contracts/interface/ICurveLikePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\nimport \"./IERC20.sol\";\n\ninterface ICurveLikePool {\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n    function getTokenBalance(uint8 index) external view returns (uint256);\n    function getToken(uint8 index) external view returns (address);\n    function getVirtualPrice() external view returns (uint256);\n    function owner() external view returns (address);\n    function paused() external view returns (bool);\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n    function unpause() external;\n    function pause() external;\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n}"
    },
    "contracts/interface/ImYAK.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\nimport \"./IERC20.sol\";\n\ninterface ImYAK is IERC20 {\n    function unmoon(uint, address) external;\n    function moon(uint, address) external;\n}"
    },
    "contracts/adapters/MiniYakAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/ImYAK.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../lib/SafeMath.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract MiniYakAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    bytes32 public constant ID = keccak256('MiniYakAdapter');\n    address public constant YAK = 0x59414b3089ce2AF0010e7523Dea7E2b35d776ec7;\n    address public constant mYAK = 0xdDAaAD7366B455AfF8E7c82940C43CEB5829B604;\n\n    constructor(uint _swapGasEstimate) {\n        setSwapGasEstimate(_swapGasEstimate);\n        setAllowances();\n    }\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {}\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override pure returns (uint amountOut) {  \n        if ((_tokenIn == mYAK && _tokenOut == YAK) || (_tokenIn == YAK && _tokenOut == mYAK)) {\n            amountOut = _amountIn;\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        if (_tokenIn == mYAK && _tokenOut == YAK) {\n            ImYAK(mYAK).unmoon(_amountIn, _to);\n        } else if (_tokenIn == YAK && _tokenOut == mYAK) {\n            ImYAK(mYAK).moon(_amountIn, _to);\n        } else {\n            revert(\"MiniYakAdapter: Unsupported token\");\n        }\n    }\n\n    function setAllowances() public override {\n        // Approve max for mYak and Yak\n        IERC20(mYAK).safeApprove(mYAK, UINT_MAX);\n        IERC20(YAK).safeApprove(mYAK, UINT_MAX);\n    }\n\n}"
    },
    "contracts/adapters/KyberAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/IKyberPool.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../lib/SafeMath.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract KyberAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    bytes32 public constant ID = keccak256(\"KyberAdapter\");\n    uint public constant PRECISION = 1e18;\n    mapping(address => mapping(address => address)) internal TKNS_TO_POOL; \n\n    constructor(\n        string memory _name, \n        address[] memory _pools,\n        uint _swapGasEstimate\n    ) {\n        name = _name;\n        setSwapGasEstimate(_swapGasEstimate);\n        addPools(_pools);\n        setAllowances();\n    }\n\n    function setAllowances() public override onlyOwner {\n        IERC20(WAVAX).safeApprove(WAVAX, UINT_MAX);\n    }\n\n    function addPools(address[] memory _pools) public onlyOwner {\n        // Note: Overrides existing if pool has same tkns but different APR\n        for (uint i = 0; i < _pools.length; i++) {\n            address tkn0 = IKyberPool(_pools[i]).token0();\n            address tkn1 = IKyberPool(_pools[i]).token1();\n            TKNS_TO_POOL[tkn0][tkn1] = _pools[i];\n            TKNS_TO_POOL[tkn1][tkn0] = _pools[i];\n        }\n    }\n\n    function removePools(address[] memory _pools) public onlyOwner {\n        // Note: Overrides existing if pool has same tkns but different APR\n        for (uint i = 0; i < _pools.length; i++) {\n            address tkn0 = IKyberPool(_pools[i]).token0();\n            address tkn1 = IKyberPool(_pools[i]).token1();\n            TKNS_TO_POOL[tkn0][tkn1] = address(0);\n            TKNS_TO_POOL[tkn1][tkn0] = address(0);\n        }\n    }\n\n    function getPool(address tkn0, address tkn1) public view returns (address) {\n        return TKNS_TO_POOL[tkn0][tkn1];\n    }\n\n    function _approveIfNeeded(address tokenIn, uint amount) internal override {}\n\n    function _getAmountOut(\n        uint256 amountIn,\n        uint256 vReserveIn,\n        uint256 vReserveOut,\n        uint256 feeInPrecision\n    ) internal pure returns (uint256 amountOut) {\n        // Based on https://github.com/dynamic-amm/smart-contracts/blob/master/contracts/libraries/DMMLibrary.sol\n        uint256 amountInWithFee = amountIn.mul(PRECISION.sub(feeInPrecision))/(PRECISION);\n        uint256 numerator = amountInWithFee.mul(vReserveOut);\n        uint256 denominator = vReserveIn.add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint) {\n        if (_tokenIn == _tokenOut || _amountIn == 0) {\n            return 0;\n        }\n        address pool = getPool(_tokenIn, _tokenOut);\n        if (pool == address(0)) {\n            return 0;\n        }\n        (\n            uint112 r0,\n            uint112 r1,\n            uint112 vr0,\n            uint112 vr1,\n            uint256 feeInPrecision\n        ) = IKyberPool(pool).getTradeInfo();\n        (uint112 reserveIn, uint112 reserveOut) = _tokenIn < _tokenOut\n            ? (r0, r1)\n            : (r1, r0);\n        (uint112 vReserveIn, uint112 vReserveOut) = _tokenIn < _tokenOut\n            ? (vr0, vr1)\n            : (vr1, vr0);\n        if (reserveIn > 0 && reserveOut > 0) {\n            uint256 amountOut = _getAmountOut(\n                _amountIn,\n                vReserveIn,\n                vReserveOut,\n                feeInPrecision\n            );\n            if (reserveOut > amountOut) return amountOut;\n            else return 0;\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address to\n    ) internal override {\n        address pair = getPool(_tokenIn, _tokenOut);\n        (\n            uint amount0Out, \n            uint amount1Out\n        ) = (_tokenIn < _tokenOut) ? (uint(0), _amountOut) : (_amountOut, uint(0));\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\n        IKyberPool(pair).swap(\n            amount0Out, \n            amount1Out,\n            to, \n            new bytes(0)\n        );\n    }\n}"
    },
    "contracts/interface/IKyberPool.sol": {
      "content": "pragma solidity >=0.7.0;\n\ninterface IKyberPool {\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n    function getTradeInfo()\n        external\n        view\n        returns (\n            uint112 _vReserve0,\n            uint112 _vReserve1,\n            uint112 reserve0,\n            uint112 reserve1,\n            uint256 feeInPrecision\n        );\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n\n}"
    },
    "contracts/adapters/GmxAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.7.0;\n\nimport \"../interface/IGmxVault.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../lib/SafeMath.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract GmxAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    bytes32 public constant id = keccak256(\"GmxAdapter\");\n    address public constant USDG = 0xc0253c3cC6aa5Ab407b5795a04c28fB063273894;\n    uint public constant BASIS_POINTS_DIVISOR = 1e4;\n    uint public constant PRICE_PRECISION = 1e30;\n    uint public constant USDG_DECIMALS = 18;\n    address public vault;\n    mapping(address => uint) public tokenDecimals;\n    mapping(address => bool) public isPoolToken;\n\n    constructor(string memory _name, address _vault, uint _swapGasEstimate) {\n        name = _name; \n        vault = _vault;\n        setSwapGasEstimate(_swapGasEstimate);\n        setPoolTokens();\n    }\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\n        uint allowance = IERC20(_tokenIn).allowance(address(this), vault);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(vault, UINT_MAX);\n        }\n    }\n\n    function setPoolTokens() public {\n        uint whitelistedTknsLen = IGmxVault(vault).allWhitelistedTokensLength();\n        for (uint i = 0; i < whitelistedTknsLen; i++) {\n            address token = IGmxVault(vault).allWhitelistedTokens(i);\n            tokenDecimals[token] = IERC20(token).decimals();\n            isPoolToken[token] = true;\n        }\n    }\n\n    function adjustForDecimals(\n        uint _amount, \n        address _tokenDiv, \n        address _tokenMul\n    ) internal view returns (uint) {\n        uint decimalsDiv = _tokenDiv == USDG ? USDG_DECIMALS : tokenDecimals[_tokenDiv];\n        uint decimalsMul = _tokenMul == USDG ? USDG_DECIMALS : tokenDecimals[_tokenMul];\n        return _amount.mul(10**decimalsMul) / 10**decimalsDiv;\n    }\n\n    function getPrices(\n        address _tokenIn, \n        address _tokenOut\n    ) internal view returns (uint priceIn, uint priceOut) {\n        IGmxVaultPriceFeed priceFeed = IGmxVault(vault).priceFeed();\n        priceIn = priceFeed.getPrice(_tokenIn, false, true, true);\n        priceOut = priceFeed.getPrice(_tokenOut, true, true, true);\n    }\n\n    function hasVaultEnoughBal(\n        address _token, \n        uint _amount\n    ) private view returns (bool) {\n        return IERC20(_token).balanceOf(vault) >= _amount;\n    }\n\n    function isWithinVaultLimits(\n        address _tokenIn,\n        address _tokenOut, \n        uint _amountInUsdg,\n        uint _amountOut\n    ) private view returns (bool) {\n        // Check pool balance is not exceeded\n        uint poolBalTknOut = IGmxVault(vault).poolAmounts(_tokenOut);\n        if (poolBalTknOut >= _amountOut) {\n            // Check if amountOut exceeds reserved amount\n            uint newPoolBalTknOut = poolBalTknOut.sub(_amountOut);\n            uint reservedAmount = IGmxVault(vault).reservedAmounts(_tokenOut);\n            bool reservedAmountNotExceeded = newPoolBalTknOut >= reservedAmount;\n            // Check if amountOut exceeds buffer amount\n            uint bufferAmount = IGmxVault(vault).bufferAmounts(_tokenOut);\n            bool bufferAmountNotExceeded = newPoolBalTknOut >= bufferAmount;\n            // Check if amountIn(usdg) exceeds max debt\n            uint newUsdgAmount = IGmxVault(vault).usdgAmounts(_tokenIn).add(_amountInUsdg);\n            uint maxUsdgAmount = IGmxVault(vault).maxUsdgAmounts(_tokenIn);\n            bool maxDebtNotExceeded = newUsdgAmount <= maxUsdgAmount;\n\n            if (reservedAmountNotExceeded && bufferAmountNotExceeded && maxDebtNotExceeded) {\n                return true;\n            }\n        }   \n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint) {\n        if (\n            _amountIn==0 || \n            _tokenIn==_tokenOut ||\n            !IGmxVault(vault).whitelistedTokens(_tokenIn) ||\n            !IGmxVault(vault).whitelistedTokens(_tokenOut) ||\n            !IGmxVault(vault).isSwapEnabled() ||\n            !hasVaultEnoughBal(_tokenIn, 1)\n        ) { return 0; }\n\n        ( uint priceIn, uint priceOut ) = getPrices(_tokenIn, _tokenOut);\n        uint amountOut = _amountIn.mul(priceIn) / priceOut;\n\n        amountOut = adjustForDecimals(\n            amountOut, \n            _tokenIn, \n            _tokenOut\n        );\n        uint usdgAmount = _amountIn.mul(priceIn) / PRICE_PRECISION;\n        usdgAmount = adjustForDecimals(\n            usdgAmount, \n            _tokenIn, \n            USDG\n        );\n        uint feeBasisPoints = IGmxVault(vault).vaultUtils()\n            .getSwapFeeBasisPoints(\n                _tokenIn, \n                _tokenOut, \n                usdgAmount\n            );\n        uint amountOutAfterFees = amountOut\n            .mul(BASIS_POINTS_DIVISOR.sub(feeBasisPoints))\n            / BASIS_POINTS_DIVISOR;   \n\n        bool withinVaultLimits = isWithinVaultLimits(\n            _tokenIn, \n            _tokenOut, \n            usdgAmount, \n            amountOutAfterFees\n        );\n        if (withinVaultLimits) {\n            return amountOutAfterFees;\n        }\n\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        IERC20(_tokenIn).safeTransfer(vault, _amountIn);\n        IGmxVault(vault).swap(\n            _tokenIn,\n            _tokenOut,\n            address(this)  // No check for amount-out within swap function\n        );\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n\n    function setAllowances() public override onlyOwner {}\n\n}"
    },
    "contracts/interface/IGmxVault.sol": {
      "content": "pragma solidity >=0.7.0;\n\ninterface IGmxVaultPriceFeed {\n    function getPrice(address,bool,bool,bool) external view returns (uint);\n}\n\ninterface IGmxVaultUtils {\n    function getSwapFeeBasisPoints(address,address,uint256) external view returns (uint);\n}\n\ninterface IGmxVault {\n\n    function swap(address,address,address) external;\n    function whitelistedTokens(address) external view returns (bool);\n    function isSwapEnabled() external view returns (bool);\n    function vaultUtils() external view returns (IGmxVaultUtils);\n    function priceFeed() external view returns (IGmxVaultPriceFeed);\n    function allWhitelistedTokensLength() external view returns (uint);\n    function allWhitelistedTokens(uint) external view returns (address);\n    function maxUsdgAmounts(address) external view returns (uint);\n    function usdgAmounts(address) external view returns (uint);\n    function reservedAmounts(address) external view returns (uint);\n    function bufferAmounts(address) external view returns (uint);\n    function poolAmounts(address) external view returns (uint);\n\n    function setBufferAmount(address,uint) external;\n    function gov() external view returns (address);\n\n\n}"
    },
    "contracts/adapters/CurvePlainAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// Supports Curve 3poolV2 pool and alike\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/ICurvePlain.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../lib/SafeMath.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurvePlainAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    bytes32 public constant id = keccak256(\"CurvePlainAdapter\");\n    mapping (address => bool) public isPoolToken;\n    mapping (address => int128) public tokenIndex;\n    address public pool;\n\n    constructor (string memory _name, address _pool, uint _swapGasEstimate) {\n        name = _name;\n        pool = _pool;\n        _setPoolTokens();\n        setSwapGasEstimate(_swapGasEstimate);\n    }\n\n    // Mapping indicator which tokens are included in the pool \n    function _setPoolTokens() internal {\n        for (uint i=0; true; i++) {\n            try ICurvePlain(pool).coins(i) returns (address token) {\n                isPoolToken[token] = true;\n                tokenIndex[token] = int128(int(i));\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function setAllowances() public override onlyOwner {}\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\n        uint allowance = IERC20(_tokenIn).allowance(address(this), pool);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\n        }\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint) {\n        if (\n            _amountIn==0 || \n            _tokenIn==_tokenOut ||\n            !isPoolToken[_tokenIn] || \n            !isPoolToken[_tokenOut]\n        ) { return 0; }\n        try ICurvePlain(pool).get_dy(\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut], \n            _amountIn\n        ) returns (uint amountOut) {\n            // Account for rounding error (swap and query may calc different amounts) by substracting 1 gwei\n            return amountOut == 0 ? 0 : amountOut - 1;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        ICurvePlain(pool).exchange(\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut],\n            _amountIn, \n            _amountOut\n        );\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n\n}"
    },
    "contracts/interface/ICurvePlain.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface ICurvePlain {\n    function coins(uint256 index) external view returns (address);\n    function exchange(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external returns (uint256);\n    function get_dy(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint dx\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/adapters/CurveMoreAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// Supports Curve MIM pool (manually enter base tokens)\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/ICurveMim.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../lib/SafeMath.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurveMoreAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    address public constant MONEY_USD = 0x0f577433Bf59560Ef2a79c124E9Ff99fCa258948;\n    address public constant BASE_POOL = 0x7f90122BF0700F9E7e1F688fe926940E8839F353;\n    address public constant SWAPPER = 0x001E3BA199B4FF4B5B6e97aCD96daFC0E2e4156e;\n    address public constant POOL = 0xb3F21Fc59Bc06209D5fb82c474F21582AEf09a20;\n    bytes32 public constant id = keccak256(\"CurveMoreAdapter\");\n    mapping (address => int128) public tokenIndex;\n    mapping (address => bool) public isUnderlyingToken;\n\n    constructor (\n        string memory _name, \n        uint _swapGasEstimate\n    ) {\n        name = _name;\n        _setPoolTokens();\n        setSwapGasEstimate(_swapGasEstimate);\n    }\n\n    function _setPoolTokens() internal {\n        // MONEY_USD index is set to 0 by default\n        for (uint i=0; true; i++) {\n            try ICurveMim(BASE_POOL).underlying_coins(i) returns (address token) {\n                isUnderlyingToken[token] = true;\n                tokenIndex[token] = int128(int(i)) + 1;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function setAllowances() public override onlyOwner {}\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\n        uint allowance = IERC20(_tokenIn).allowance(address(this), SWAPPER);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(SWAPPER, UINT_MAX);\n        }\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint) {\n        if (\n            _amountIn == 0 || \n            _tokenIn == _tokenOut ||\n            !((_tokenOut == MONEY_USD && isUnderlyingToken[_tokenIn]) ||\n              (_tokenIn == MONEY_USD && isUnderlyingToken[_tokenOut])\n            )\n        ) { return 0; }\n        try ICurveMim(POOL).get_dy_underlying(\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut], \n            _amountIn\n        ) returns (uint amountOut) {\n            // `calc_token_amount` in base_pool is used in part of the query\n            // this method does account for deposit fee which causes discrepancy\n            // between the query result and the actual swap amount by few bps(0-3.2)\n            // Additionally there is a rounding error (swap and query may calc different amounts)\n            // Account for that with 4 bps discount\n            return amountOut == 0 ? 0 : amountOut*(1e4-4)/1e4;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        ICurveMim(SWAPPER).exchange_underlying(\n            POOL,\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut],\n            _amountIn, \n            _amountOut\n        );\n        // Curve-pool reverts if dy is not met\n        // Dont leave funds in the adapter that are there due to query imprecision\n        _returnTo(_tokenOut, IERC20(_tokenOut).balanceOf(address(this)), _to);\n    }\n\n}"
    },
    "contracts/interface/ICurveMim.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface ICurveMim {\n    function underlying_coins(uint256 index) external view returns (address);\n    function coins(uint256 index) external view returns (address);\n    function get_dy_underlying(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n    function exchange_underlying(\n        address pool,\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n}"
    },
    "contracts/adapters/CurveMimAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// Supports Curve MIM pool (manually enter base tokens)\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/ICurveMim.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../lib/SafeMath.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurveMimAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    address public constant basePool = 0x7f90122BF0700F9E7e1F688fe926940E8839F353;\n    address public constant swapper = 0x001E3BA199B4FF4B5B6e97aCD96daFC0E2e4156e;\n    address public constant pool = 0x30dF229cefa463e991e29D42DB0bae2e122B2AC7;\n    bytes32 public constant id = keccak256(\"CurveMimAdapter\");\n    mapping (address => int128) public tokenIndex;\n    mapping (address => bool) public isPoolToken;\n\n    constructor (\n        string memory _name, \n        uint _swapGasEstimate\n    ) {\n        name = _name;\n        _setPoolTokens();\n        setSwapGasEstimate(_swapGasEstimate);\n    }\n\n    // Mapping indicator which tokens are included in the pool \n    function _setPoolTokens() internal {\n        address metaTkn = ICurveMim(pool).coins(0);\n        isPoolToken[metaTkn] = true;\n        tokenIndex[metaTkn] = 0;\n        for (uint i=0; true; i++) {\n            try ICurveMim(basePool).underlying_coins(i) returns (address token) {\n                isPoolToken[token] = true;\n                tokenIndex[token] = int128(int(i)) + 1;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function setAllowances() public override onlyOwner {}\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\n        uint allowance = IERC20(_tokenIn).allowance(address(this), swapper);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(swapper, UINT_MAX);\n        }\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint) {\n        if (\n            _amountIn==0 || \n            _tokenIn==_tokenOut ||\n            !isPoolToken[_tokenIn] || \n            !isPoolToken[_tokenOut]\n        ) { return 0; }\n        try ICurveMim(pool).get_dy_underlying(\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut], \n            _amountIn\n        ) returns (uint amountOut) {\n            // `calc_token_amount` in base_pool is used in part of the query\n            // this method does account for deposit fee which causes discrepancy\n            // between the query result and the actual swap amount by few bps(0-3.2)\n            // Additionally there is a rounding error (swap and query may calc different amounts)\n            // Account for that with 4 bps discount\n            return amountOut == 0 ? 0 : amountOut*(1e4-4)/1e4;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        ICurveMim(swapper).exchange_underlying(\n            pool,\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut],\n            _amountIn, \n            _amountOut\n        );\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n\n}"
    },
    "contracts/adapters/CurveDeUSDCAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// Supports Curve deUSDC(DeBridge) pool (manually enter base tokens)\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/ICurveMim.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../lib/SafeMath.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurveDeUSDCAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    address public constant deUSDC = 0x28690ec942671aC8d9Bc442B667EC338eDE6dFd3;\n    address public constant BASE_POOL = 0x7f90122BF0700F9E7e1F688fe926940E8839F353;\n    address public constant SWAPPER = 0x001E3BA199B4FF4B5B6e97aCD96daFC0E2e4156e;\n    address public constant POOL = 0xd39016475200ab8957e9C772C949Ef54bDA69111;\n    bytes32 public constant id = keccak256(\"CurveDeUSDCAdapter\");\n    mapping (address => int128) public tokenIndex;\n    mapping (address => bool) public isUnderlyingToken;\n\n    constructor (\n        string memory _name, \n        uint _swapGasEstimate\n    ) {\n        name = _name;\n        _setPoolTokens();\n        setSwapGasEstimate(_swapGasEstimate);\n    }\n\n    function _setPoolTokens() internal {\n        // deUSDC index is set to 0 by default\n        isUnderlyingToken[deUSDC] = true;\n        for (uint i=0; true; i++) {\n            try ICurveMim(BASE_POOL).underlying_coins(i) returns (address token) {\n                isUnderlyingToken[token] = true;\n                tokenIndex[token] = int128(int(i)) + 1;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function setAllowances() public override onlyOwner {}\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\n        uint allowance = IERC20(_tokenIn).allowance(address(this), SWAPPER);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(SWAPPER, UINT_MAX);\n        }\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint) {\n        if (\n            _amountIn == 0 || \n            _tokenIn == _tokenOut ||\n            !((_tokenOut == deUSDC && isUnderlyingToken[_tokenIn]) ||\n              (_tokenIn == deUSDC && isUnderlyingToken[_tokenOut])\n            )\n        ) { return 0; }\n        try ICurveMim(POOL).get_dy_underlying(\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut], \n            _amountIn\n        ) returns (uint amountOut) {\n            // `calc_token_amount` in base_pool is used in part of the query\n            // this method does account for deposit fee which causes discrepancy\n            // between the query result and the actual swap amount by few bps(0-3.2)\n            // Additionally there is a rounding error (swap and query may calc different amounts)\n            // Account for that with 4 bps discount\n            return amountOut == 0 ? 0 : amountOut*(1e4-4)/1e4;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        ICurveMim(SWAPPER).exchange_underlying(\n            POOL,\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut],\n            _amountIn, \n            _amountOut\n        );\n        // Curve-pool reverts if dy is not met\n        // Dont leave funds in the adapter that are there due to query imprecision\n        _returnTo(_tokenOut, IERC20(_tokenOut).balanceOf(address(this)), _to);\n    }\n\n}"
    },
    "contracts/interface/ICurvelikeMeta.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\npragma abicoder v2;\n\nimport \"./IERC20.sol\";\n\nstruct SwapStorage {\n    uint256 initialA; \n    uint256 futureA; \n    uint256 initialATime; \n    uint256 futureATime; \n    uint256 swapFee; \n    uint256 adminFee; \n    address lpToken;\n}\n\ninterface ICurvelikeMeta {\n    function getToken(uint8 index) external view returns (address);\n    function getVirtualPrice() external view returns (uint256);\n    function owner() external view returns (address);\n    function paused() external view returns (bool);\n    function calculateSwapUnderlying(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n    function unpause() external;\n    function pause() external;\n    function swapUnderlying(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n    function metaSwapStorage() external returns (address);\n    function swapStorage() external returns (SwapStorage memory);\n}"
    },
    "contracts/adapters/CurvelikeMetaAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\npragma abicoder v2;\n\nimport \"../interface/ICurvelikeMeta.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../lib/SafeMath.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurvelikeMetaAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    bytes32 public constant id = keccak256(\"CurvelikeMetaAdapter\");\n    uint public constant feeDenominator = 1e10;\n    address public metaPool;\n    address public pool;\n    mapping (address => bool) public isPoolToken;\n    mapping (address => uint8) public tokenIndex;\n    uint public poolFeeCompliment;\n\n    constructor (string memory _name, address _pool, uint _swapGasEstimate) {\n        pool = _pool;\n        name = _name;\n        metaPool = ICurvelikeMeta(pool).metaSwapStorage();  // Pool that holds USDCe, USDTe, DAIe \n        setSwapGasEstimate(_swapGasEstimate);\n        setPoolFeeCompliment();\n        _setPoolTokens();\n    }\n\n    function setPoolFeeCompliment() public onlyOwner {\n        poolFeeCompliment = feeDenominator - ICurvelikeMeta(pool).swapStorage().swapFee;\n    }\n\n    // Mapping indicator which tokens are included in the pool \n    function _setPoolTokens() internal {\n        // Get nUSD from this pool\n        address baseTkn = ICurvelikeMeta(pool).getToken(0);\n        isPoolToken[baseTkn] = true;\n        tokenIndex[baseTkn] = 0;\n        // Get stables from meta pool\n        for (uint8 i=0; true; i++) {\n            try ICurvelikeMeta(metaPool).getToken(i) returns (address token) {\n                isPoolToken[token] = true;\n                tokenIndex[token] = i + 1;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function setAllowances() public override onlyOwner {}\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\n        uint allowance = IERC20(_tokenIn).allowance(address(this), pool);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\n        }\n    }\n\n    function _isPaused() internal view returns (bool) {\n        return ICurvelikeMeta(pool).paused() || ICurvelikeMeta(metaPool).paused();\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint) {\n        if (\n            _amountIn==0 || \n            _tokenIn==_tokenOut ||\n            !isPoolToken[_tokenIn] || \n            !isPoolToken[_tokenOut] || \n            _isPaused()\n        ) { return 0; }\n        try ICurvelikeMeta(pool).calculateSwapUnderlying(\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut], \n            _amountIn\n        ) returns (uint amountOut) {\n            return amountOut.mul(poolFeeCompliment) / feeDenominator;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        ICurvelikeMeta(pool).swapUnderlying(\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut],\n            _amountIn, \n            _amountOut, \n            block.timestamp\n        );\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n\n}"
    },
    "contracts/adapters/Curve2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// Supports Curve AAVE and Ren pool and alike\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/ICurve2.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../lib/SafeMath.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract Curve2Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    bytes32 public constant id = keccak256(\"Curve2Adapter\");\n    mapping (address => bool) public isPoolToken;\n    mapping (address => int128) public tokenIndex;\n    address public pool;\n\n    constructor (string memory _name, address _pool, uint _swapGasEstimate) {\n        name = _name;\n        pool = _pool;\n        _setPoolTokens();\n        setSwapGasEstimate(_swapGasEstimate);\n    }\n\n    // Mapping indicator which tokens are included in the pool \n    function _setPoolTokens() internal {\n        for (uint i=0; true; i++) {\n            try ICurve2(pool).underlying_coins(i) returns (address token) {\n                isPoolToken[token] = true;\n                tokenIndex[token] = int128(int(i));\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function setAllowances() public override onlyOwner {}\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\n        uint allowance = IERC20(_tokenIn).allowance(address(this), pool);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\n        }\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint) {\n        if (\n            _amountIn==0 || \n            _tokenIn==_tokenOut ||\n            !isPoolToken[_tokenIn] || \n            !isPoolToken[_tokenOut]\n        ) { return 0; }\n        try ICurve2(pool).get_dy_underlying(\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut], \n            _amountIn\n        ) returns (uint amountOut) {\n            // Account for rounding error (swap and query may calc different amounts) by substracting 1 gwei\n            return amountOut == 0 ? 0 : amountOut - 1;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        ICurve2(pool).exchange_underlying(\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut],\n            _amountIn, \n            _amountOut\n        );\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n\n}"
    },
    "contracts/interface/ICurve2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface ICurve2 {\n    function underlying_coins(uint256 index) external view returns (address);\n    function get_dy_underlying(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n    function exchange_underlying(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n}"
    },
    "contracts/adapters/Curve1Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// Supports Curve Atricrypto pools and alike\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/ICurve1.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../lib/SafeMath.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract Curve1Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint;\n\n    bytes32 public constant id = keccak256(\"Curve1Adapter\");\n    mapping (address => bool) public isPoolToken;\n    mapping (address => uint) public tokenIndex;\n    address public pool;\n\n    constructor (string memory _name, address _pool, uint _swapGasEstimate) {\n        name = _name;\n        pool = _pool;\n        _setPoolTokens();\n        setSwapGasEstimate(_swapGasEstimate);\n    }\n\n    // Mapping indicator which tokens are included in the pool \n    function _setPoolTokens() internal {\n        for (uint i=0; true; i++) {\n            try ICurve1(pool).underlying_coins(i) returns (address token) {\n                isPoolToken[token] = true;\n                tokenIndex[token] = i;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function setAllowances() public override onlyOwner {}\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {\n        uint allowance = IERC20(_tokenIn).allowance(address(this), pool);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\n        }\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint) {\n        if (\n            _amountIn==0 || \n            _tokenIn==_tokenOut ||\n            !isPoolToken[_tokenIn] || \n            !isPoolToken[_tokenOut]\n        ) { return 0; }\n        try ICurve1(pool).get_dy_underlying(\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut], \n            _amountIn\n        ) returns (uint amountOut) {\n            // `calc_token_amount` in base_pool is used in part of the query\n            // this method does account for deposit fee which causes discrepancy\n            // between the query result and the actual swap amount by few bps(0-3.2)\n            // Additionally there is a rounding error (swap and query may calc different amounts)\n            // Account for that with 4 bps discount\n            return amountOut == 0 ? 0 : amountOut*(1e4-4)/1e4;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        ICurve1(pool).exchange_underlying(\n            tokenIndex[_tokenIn], \n            tokenIndex[_tokenOut],\n            _amountIn, \n            _amountOut\n        );\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n\n}"
    },
    "contracts/interface/ICurve1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface ICurve1 {\n    function underlying_coins(uint256 index) external view returns (address);\n    function exchange_underlying(\n        uint256 tokenIndexFrom,\n        uint256 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n    function get_dy_underlying(\n        uint tokenIndexFrom,\n        uint tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n}"
    },
    "contracts/adapters/BridgeMigrationAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//                              \n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract BridgeMigrationAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant ID = keccak256('BridgeMigrationAdapter');\n    mapping(address => bool) public isNewBridgeToken;\n\n    constructor(\n        address[] memory _newTokens, \n        address[] memory _oldTokens,\n        uint _swapGasEstimate\n    ) {\n        setSwapGasEstimate(_swapGasEstimate);\n        setNewBridgeTokens(_newTokens, _oldTokens);\n    }\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {}\n\n    function _approveIfNeeded(address _newToken, address _oldToken) internal {\n        uint allowance = IERC20(_oldToken).allowance(address(this), _newToken);\n        if (allowance < UINT_MAX) {\n            IERC20(_oldToken).safeApprove(_newToken, UINT_MAX);\n        }\n    }\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override view returns (uint amountOut) {  \n        if (\n            isNewBridgeToken[_tokenOut]\n            && IERC20(_tokenOut).swapSupply(_tokenIn) >= _amountIn\n        ) {\n            amountOut = _amountIn;\n        }\n    }\n\n    function _swap(\n        uint _amountIn, \n        uint _amountOut, \n        address _tokenIn, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        IERC20(_tokenOut).swap(_tokenIn, _amountIn);\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n\n    function setAllowances() public override {}\n\n    function setNewBridgeTokens(address[] memory _newTokens, address[] memory _oldTokens) public onlyOwner {\n        require(_newTokens.length == _oldTokens.length, 'BridgeMigrationAdapter: Needs to be surjective');\n        for (uint i; i<_newTokens.length; i++) {\n            require(IERC20(_newTokens[i]).swapSupply(_oldTokens[i]) > 0, 'BridgeMigrationAdapter: Invalid combination');\n            _approveIfNeeded(_newTokens[i], _oldTokens[i]);\n            isNewBridgeToken[_newTokens[i]] = true;\n        }\n    }\n}"
    },
    "contracts/interface/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\npragma abicoder v2;\n\nimport \"./IAsset.sol\";\nimport \"./IERC20.sol\";\n\ninterface IVault {\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IAsset assetIn;\n        IAsset assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds\n    ) external returns (int256[] memory assetDeltas);\n}"
    },
    "contracts/interface/IAsset.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}"
    },
    "contracts/interface/IPoolSwapStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\npragma abicoder v2;\n\nimport \"./IVault.sol\";\n\ninterface IPoolSwapStructs {\n    struct SwapRequest {\n        IVault.SwapKind kind;\n        IERC20 tokenIn;\n        IERC20 tokenOut;\n        uint256 amount;\n        bytes32 poolId;\n        uint256 lastChangeBlock;\n        address from;\n        address to;\n        bytes userData;\n    }\n}"
    },
    "contracts/interface/IBasePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\npragma abicoder v2;\n\nimport \"./IPoolSwapStructs.sol\";\n\ninterface IBasePool is IPoolSwapStructs {\n    function getPoolId() external view returns (bytes32);\n}\n"
    },
    "contracts/interface/IMinimalSwapInfoPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\npragma abicoder v2;\n\nimport \"./IBasePool.sol\";\n\ninterface IMinimalSwapInfoPool is IBasePool {\n    function onSwap(\n        SwapRequest memory swapRequest,\n        uint256 currentBalanceTokenIn,\n        uint256 currentBalanceTokenOut\n    ) external view returns (uint256 amount);\n}"
    },
    "contracts/adapters/BalancerlikeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// Supports Balancerlike pools\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\npragma abicoder v2;\n\nimport \"../lib/SafeERC20.sol\";\nimport \"../lib/SafeMath.sol\";\nimport \"../YakAdapter.sol\";\nimport \"../interface/IVault.sol\";\nimport \"../interface/IBasePool.sol\";\nimport \"../interface/IMinimalSwapInfoPool.sol\";\n\ncontract BalancerlikeAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    address public vault;\n\n    mapping(address => mapping(address => uint128)) internal poolToTokenIndex;\n    mapping(address => mapping(address => address[])) internal tokensToPools;\n\n    constructor(\n        string memory _name,\n        address _vault,\n        address[] memory _pools,\n        uint256 _swapGasEstimate\n    ) {\n        name = _name;\n        vault = _vault;\n        addPools(_pools);\n        setSwapGasEstimate(_swapGasEstimate);\n    }\n\n    function addPools(address[] memory _pools) public onlyOwner {\n        for (uint128 i = 0; i < _pools.length; i++) {\n            address pool = _pools[i];\n            bytes32 poolId = IBasePool(pool).getPoolId();\n            (IERC20[] memory tokens, , ) = IVault(vault).getPoolTokens(poolId);\n            for (uint128 j = 0; j < tokens.length; j++) {\n                address token = address(tokens[j]);\n                poolToTokenIndex[pool][token] = j;\n                for (uint128 k = 0; k < tokens.length; k++) {\n                    if (j != k) {\n                        tokensToPools[token][address(tokens[k])].push(pool);\n                    }\n                }\n            }\n        }\n    }\n\n    function removePools(address[] memory _pools) public onlyOwner {\n        for (uint256 i = 0; i < _pools.length; i++) {\n            address pool = _pools[i];\n            bytes32 poolId = IBasePool(pool).getPoolId();\n            (IERC20[] memory tokens, , ) = IVault(vault).getPoolTokens(poolId);\n            for (uint128 j = 0; j < tokens.length; j++) {\n                address token = address(tokens[j]);\n                for (uint128 k = 0; k < tokens.length; k++) {\n                    if (j != k) {\n                        address[] memory currentPools = tokensToPools[token][\n                            address(tokens[k])\n                        ];\n                        for (uint128 l = 0; l < currentPools.length; l++) {\n                            if (currentPools[l] == pool) {\n                                delete currentPools[l];\n                            }\n                        }\n                        tokensToPools[token][address(tokens[k])] = currentPools;\n                    }\n                }\n            }\n        }\n    }\n\n    function getPools(address tokenIn, address tokenOut)\n        public\n        view\n        returns (address[] memory)\n    {\n        return tokensToPools[tokenIn][tokenOut];\n    }\n\n    function setAllowances() public override onlyOwner {}\n\n    function _approveIfNeeded(address _tokenIn, uint256 _amount)\n        internal\n        override\n    {\n        uint256 allowance = IERC20(_tokenIn).allowance(address(this), vault);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(vault, _amount);\n        }\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_amountIn == 0 || _tokenIn == _tokenOut) {\n            return 0;\n        }\n\n        address[] memory pools = getPools(_tokenIn, _tokenOut);\n        if (pools.length == 0) {\n            return 0;\n        }\n\n        (, uint256 amountOut) = _getBestPoolForSwap(\n            pools,\n            _tokenIn,\n            _tokenOut,\n            _amountIn\n        );\n        return amountOut;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        address[] memory pools = getPools(_tokenIn, _tokenOut);\n\n        require(pools.length > 0, \"No pools for swapping\");\n\n        (address pool, ) = _getBestPoolForSwap(\n            pools,\n            _tokenIn,\n            _tokenOut,\n            _amountIn\n        );\n\n        require(pool != address(0), \"Undefined pool\");\n\n        IVault.SingleSwap memory swap;\n        swap.poolId = IBasePool(pool).getPoolId();\n        swap.kind = IVault.SwapKind.GIVEN_IN;\n        swap.assetIn = IAsset(_tokenIn);\n        swap.assetOut = IAsset(_tokenOut);\n        swap.amount = _amountIn;\n        swap.userData = \"0x\";\n\n        IVault.FundManagement memory fund;\n        fund.sender = address(this);\n        fund.recipient = payable(to);\n        fund.fromInternalBalance = false;\n        fund.toInternalBalance = false;\n\n        IVault(vault).swap(swap, fund, _amountOut, block.timestamp);\n    }\n\n    function _getBestPoolForSwap(\n        address[] memory pools,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) internal view returns (address bestPool, uint256 amountOut) {\n        amountOut = 0;\n        bestPool = address(0);\n        for (uint128 i; i < pools.length; i++) {\n            address pool = pools[i];\n\n            if (pool == address(0)) {\n                continue;\n            }\n\n            IPoolSwapStructs.SwapRequest memory request;\n            request.poolId = IBasePool(pool).getPoolId();\n            request.kind = IVault.SwapKind.GIVEN_IN;\n            request.tokenIn = IERC20(_tokenIn);\n            request.tokenOut = IERC20(_tokenOut);\n            request.amount = _amountIn;\n            request.userData = \"0x\";\n\n            uint256 newAmountOut = _getAmountOut(request, pool);\n            if (newAmountOut > amountOut) {\n                amountOut = newAmountOut;\n                bestPool = pool;\n            }\n        }\n    }\n\n    function _getAmountOut(\n        IPoolSwapStructs.SwapRequest memory request,\n        address pool\n    ) internal view returns (uint256 amountOut) {\n        // Based on https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/vault/contracts/Swaps.sol#L275\n        (, uint256[] memory balances, ) = IVault(vault).getPoolTokens(\n            request.poolId\n        );\n\n        uint256 tokenInTotal = balances[\n            poolToTokenIndex[pool][address(request.tokenIn)]\n        ];\n        uint256 tokenOutTotal = balances[\n            poolToTokenIndex[pool][address(request.tokenOut)]\n        ];\n\n        amountOut = IMinimalSwapInfoPool(pool).onSwap(\n            request,\n            tokenInTotal,\n            tokenOutTotal\n        );\n    }\n}\n"
    },
    "contracts/adapters/WAvaxAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//     \n//     \n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.7.0;\n\nimport \"../YakAdapter.sol\";\n\ncontract WAvaxAdapter is YakAdapter {\n\n    bytes32 public constant ID = keccak256('WAvaxAdapter');\n\n    constructor(uint _swapGasEstimate) {\n        name = 'WAvaxAdapter';\n        setSwapGasEstimate(_swapGasEstimate);\n    }\n\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal override {}\n\n    function setAllowances() public override {}\n\n    function _query(\n        uint _amountIn, \n        address _tokenIn, \n        address _tokenOut\n    ) internal override pure returns (uint) {  \n        if (_tokenIn == WAVAX && _tokenOut == WAVAX) {\n            return _amountIn;\n        }\n    }\n\n    function _swap(\n        uint, \n        uint _amountOut, \n        address, \n        address _tokenOut, \n        address _to\n    ) internal override {\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}