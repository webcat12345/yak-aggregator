{
  "address": "0x784E00Cd961a994eff675E889AF6CA564689BF39",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tkn0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tkn1",
          "type": "address"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolForTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "rmPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "setPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenIndexForPool",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa18b76286bdeaf7f630bd1e217db9511ebbddab153434e1e09cc4ea527280fc0",
  "receipt": {
    "to": null,
    "from": "0xd22044706DeA3c342f68396bEDBCf6a2536d951D",
    "contractAddress": "0x784E00Cd961a994eff675E889AF6CA564689BF39",
    "transactionIndex": 1,
    "gasUsed": "15737035",
    "logsBloom": "0x
    "blockHash": "0x751f5c766635e714c5b40bc531aa9effc0f107a584c0a0996238811eaca05d62",
    "transactionHash": "0xa18b76286bdeaf7f630bd1e217db9511ebbddab153434e1e09cc4ea527280fc0",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 53908757,
        "transactionHash": "0xa18b76286bdeaf7f630bd1e217db9511ebbddab153434e1e09cc4ea527280fc0",
        "address": "0x784E00Cd961a994eff675E889AF6CA564689BF39",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x751f5c766635e714c5b40bc531aa9effc0f107a584c0a0996238811eaca05d62"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 53908757,
        "transactionHash": "0xa18b76286bdeaf7f630bd1e217db9511ebbddab153434e1e09cc4ea527280fc0",
        "address": "0x784E00Cd961a994eff675E889AF6CA564689BF39",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x751f5c766635e714c5b40bc531aa9effc0f107a584c0a0996238811eaca05d62"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 53908757,
        "transactionHash": "0xa18b76286bdeaf7f630bd1e217db9511ebbddab153434e1e09cc4ea527280fc0",
        "address": "0x784E00Cd961a994eff675E889AF6CA564689BF39",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x000000000000000000000000784e00cd961a994eff675e889af6ca564689bf39"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000075300",
        "logIndex": 2,
        "blockHash": "0x751f5c766635e714c5b40bc531aa9effc0f107a584c0a0996238811eaca05d62"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 53908757,
        "transactionHash": "0xa18b76286bdeaf7f630bd1e217db9511ebbddab153434e1e09cc4ea527280fc0",
        "address": "0xFEa7a6a0B346362BF88A9e4A88416B77a57D6c2A",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000784e00cd961a994eff675e889af6ca564689bf39",
          "0x00000000000000000000000030df229cefa463e991e29d42db0bae2e122b2ac7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x751f5c766635e714c5b40bc531aa9effc0f107a584c0a0996238811eaca05d62"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 53908757,
        "transactionHash": "0xa18b76286bdeaf7f630bd1e217db9511ebbddab153434e1e09cc4ea527280fc0",
        "address": "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000784e00cd961a994eff675e889af6ca564689bf39",
          "0x00000000000000000000000030df229cefa463e991e29d42db0bae2e122b2ac7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x751f5c766635e714c5b40bc531aa9effc0f107a584c0a0996238811eaca05d62"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 53908757,
        "transactionHash": "0xa18b76286bdeaf7f630bd1e217db9511ebbddab153434e1e09cc4ea527280fc0",
        "address": "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000784e00cd961a994eff675e889af6ca564689bf39",
          "0x00000000000000000000000030df229cefa463e991e29d42db0bae2e122b2ac7"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0x751f5c766635e714c5b40bc531aa9effc0f107a584c0a0996238811eaca05d62"
      }
    ],
    "blockNumber": 53908757,
    "cumulativeGasUsed": "15737035",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "CurveMetaAdapter",
    [
      "0x30dF229cefa463e991e29D42DB0bae2e122B2AC7"
    ],
    480000
  ],
  "solcInputHash": "2f7c552725bac4cbb59f7eeca6343ccc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tkn0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tkn1\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolForTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"rmPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"setPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenIndexForPool\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/adapters/CurveMetaV3Adapter.sol\":\"CurveMetaV3Adapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IWETH.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\n\\nabstract contract YakAdapter is Maintainable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\\n    event Recovered(address indexed _asset, uint256 amount);\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n    uint256 public swapGasEstimate;\\n    string public name;\\n\\n    constructor(string memory _name, uint256 _gasEstimate) {\\n        setName(_name);\\n        setSwapGasEstimate(_gasEstimate);\\n    }\\n\\n    function setName(string memory _name) internal {\\n        require(bytes(_name).length != 0, \\\"Invalid adapter name\\\");\\n        name = _name;\\n    }\\n\\n    function setSwapGasEstimate(uint256 _estimate) public onlyMaintainer {\\n        require(_estimate != 0, \\\"Invalid gas-estimate\\\");\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    function revokeAllowance(address _token, address _spender) external onlyMaintainer {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\\n        require(_tokenAmount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\\n        require(_amount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (uint256) {\\n        return _query(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) external {\\n        uint256 toBal0 = IERC20(_toToken).balanceOf(_to);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBal0;\\n        require(diff >= _amountOut, \\\"Insufficient amount-out\\\");\\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\\n    }\\n\\n    function _returnTo(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual returns (uint256);\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xa4058929ff6bd42af6ad0fcae4b74531dfb5e9c2c3f2bdc1d933ba7b25165467\",\"license\":\"GPL-3.0-only\"},\"src/contracts/adapters/CurveMetaV3Adapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"../YakAdapter.sol\\\";\\n\\ninterface IMetaPool {\\n    function get_dy_underlying(\\n        int128,\\n        int128,\\n        uint256\\n    ) external view returns (uint256);\\n\\n    function exchange_underlying(\\n        int128,\\n        int128,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function coins(uint256) external view returns (address);\\n}\\n\\ninterface IBasePool {\\n    function coins(uint256) external view returns (address);\\n}\\n\\ncontract CurveMetaV3Adapter is YakAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address => mapping(address => int128)) public tokenIndexForPool;\\n    mapping(address => mapping(address => address)) public poolForTokens;\\n\\n    constructor(\\n        string memory _name,\\n        address[] memory _pools,\\n        uint256 _swapGasEstimate\\n    ) YakAdapter(_name, _swapGasEstimate) {\\n        setPools(_pools);\\n    }\\n\\n    function getPool(address tkn0, address tkn1) public view returns (address) {\\n        return poolForTokens[tkn0][tkn1];\\n    }\\n\\n    function rmPools(address[] memory _pools) external onlyMaintainer {\\n        for (uint256 i; i < _pools.length; ++i) _rmPool(_pools[i]);\\n    }\\n\\n    function setPools(address[] memory _pools) public onlyMaintainer {\\n        for (uint256 i; i < _pools.length; ++i) _setPool(_pools[i]);\\n    }\\n\\n    function _setPool(address _pool) internal {\\n        (address mToken, address basePool) = getCoins(_pool);\\n        IERC20(mToken).safeApprove(_pool, UINT_MAX);\\n        for (uint256 i; true; ++i) {\\n            address uToken = getUnderlyingToken(basePool, i);\\n            if (uToken == address(0)) break;\\n            _setTokenPair(_pool, mToken, uToken, int128(int256(i)));\\n        }\\n    }\\n\\n    function _rmPool(address _pool) internal {\\n        (address mToken, address basePool) = getCoins(_pool);\\n        for (uint256 i; true; ++i) {\\n            address uToken = getUnderlyingToken(basePool, i);\\n            if (uToken == address(0)) break;\\n            poolForTokens[uToken][mToken] = address(0);\\n            poolForTokens[mToken][uToken] = address(0);\\n        }\\n    }\\n\\n    function getCoins(address _pool) internal view returns (address meta, address base) {\\n        meta = IMetaPool(_pool).coins(0);\\n        base = IMetaPool(_pool).coins(1);\\n    }\\n\\n    function _setTokenPair(\\n        address _pool,\\n        address _metaTkn,\\n        address _uToken,\\n        int128 _index\\n    ) internal {\\n        IERC20(_uToken).safeApprove(_pool, UINT_MAX);\\n        tokenIndexForPool[_pool][_uToken] = _index + 1;\\n        poolForTokens[_uToken][_metaTkn] = _pool;\\n        poolForTokens[_metaTkn][_uToken] = _pool;\\n    }\\n\\n    function getUnderlyingToken(address basePool, uint256 i) internal view returns (address) {\\n        try IBasePool(basePool).coins(i) returns (address token) {\\n            return token;\\n        } catch {}\\n    }\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view override returns (uint256) {\\n        address pool = getPool(_tokenIn, _tokenOut);\\n        if (pool == address(0) || _amountIn == 0) return 0;\\n        // `calc_token_amount` in base_pool is used in part of the query\\n        // this method does account for deposit fee which causes discrepancy\\n        // between the query result and the actual swap amount by few bps(0-3.2)\\n        // Additionally there is a rounding error (swap and query may calc different amounts)\\n        // Account for that with 1 bps discount\\n        uint256 amountOut = safeQuery(pool, _amountIn, _tokenIn, _tokenOut);\\n        return (amountOut * (1e4 - 1)) / 1e4;\\n    }\\n\\n    function safeQuery(\\n        address _pool,\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view returns (uint256) {\\n        try\\n            IMetaPool(_pool).get_dy_underlying(\\n                tokenIndexForPool[_pool][_tokenIn],\\n                tokenIndexForPool[_pool][_tokenOut],\\n                _amountIn\\n            )\\n        returns (uint256 amountOut) {\\n            return amountOut;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to\\n    ) internal override {\\n        address pool = getPool(_tokenIn, _tokenOut);\\n        IMetaPool(pool).exchange_underlying(\\n            tokenIndexForPool[pool][_tokenIn],\\n            tokenIndexForPool[pool][_tokenOut],\\n            _amountIn,\\n            _amountOut\\n        );\\n        uint256 balThis = IERC20(_tokenOut).balanceOf(address(this));\\n        _returnTo(_tokenOut, balThis, _to);\\n    }\\n}\\n\",\"keccak256\":\"0xc7c9d41c9ede9238089a9f649330e77e70a96628a7c316a724063381f49bbba0\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(address, address, uint256);\\n    event Transfer(address, address, uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\\n\\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\\n}\\n\",\"keccak256\":\"0xe5c96d567fa7105b50c9ca77735160db4ade2ea51703c066d02df4fca855a462\",\"license\":\"MIT\"},\"src/contracts/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 amount) external;\\n\\n    function deposit() external payable;\\n}\\n\",\"keccak256\":\"0x7b31ca489d1bdf6631d5cf8c6f8ff9dc4a5c881d801a525f4e592a6884b9d2ad\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is Context, AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n        _setupRole(MAINTAINER_ROLE, msgSender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        address msgSender = _msgSender();\\n        renounceRole(role, msgSender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        address msgSender = _msgSender();\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        address msgSender = _msgSender();\\n        require(hasRole(MAINTAINER_ROLE, msgSender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcf17b3f89386f661ee6230c9774bc88a119f2385111279497bbb443209ad6bb2\",\"license\":\"MIT\"},\"src/contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d77601f615804eb7471002f23f9a4593f86ac295e7353c2e7545f51d4f81728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002f2b38038062002f2b83398101604081905262000034916200094f565b82816000620000426200009a565b9050620000516000826200009e565b6200006c60008051602062002f0b833981519152826200009e565b506200007882620000ae565b6200008381620000ed565b50620000919050826200019a565b50505062000d57565b3390565b620000aa828262000240565b5050565b8051620000d85760405162461bcd60e51b8152600401620000cf9062000b09565b60405180910390fd5b8051620000aa906002906020840190620007b3565b6000620000f96200009a565b90506200011660008051602062002f0b83398151915282620002ca565b620001355760405162461bcd60e51b8152600401620000cf9062000a8c565b81620001555760405162461bcd60e51b8152600401620000cf9062000b40565b600182905560405130907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a906200018e90859062000a83565b60405180910390a25050565b6000620001a66200009a565b9050620001c360008051602062002f0b83398151915282620002ca565b620001e25760405162461bcd60e51b8152600401620000cf9062000a8c565b60005b82518110156200023b57620002288382815181106200021457634e487b7160e01b600052603260045260246000fd5b6020026020010151620002f560201b60201c565b620002338162000d0d565b9050620001e5565b505050565b6200024c8282620002ca565b620000aa576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002866200009a565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff165b92915050565b60008062000303836200037f565b915091506200032e83600019846001600160a01b03166200049260201b62000d58179092919060201c565b60005b60006200033f83836200059b565b90506001600160a01b03811662000357575062000379565b62000365858583856200062b565b50620003718162000d0d565b905062000331565b50505050565b600080826001600160a01b031663c661065760006040518263ffffffff1660e01b8152600401620003b1919062000a83565b60206040518083038186803b158015620003ca57600080fd5b505afa158015620003df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000405919062000909565b60405163c661065760e01b81529092506001600160a01b0384169063c661065790620004379060019060040162000a83565b60206040518083038186803b1580156200045057600080fd5b505afa15801562000465573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200048b919062000909565b9050915091565b801580620005215750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90620004cb903090869060040162000a50565b60206040518083038186803b158015620004e457600080fd5b505afa158015620004f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200051f919062000a19565b155b620005405760405162461bcd60e51b8152600401620000cf9062000bc1565b6200023b8363095ea7b360e01b84846040516024016200056292919062000a6a565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b0393841617905290620006f016565b60405163c661065760e01b81526000906001600160a01b0384169063c661065790620005cc90859060040162000a83565b60206040518083038186803b158015620005e557600080fd5b505afa92505050801562000618575060408051601f3d908101601f19168201909252620006159181019062000909565b60015b6200062357620002ef565b9050620002ef565b6200065284600019846001600160a01b03166200049260201b62000d58179092919060201c565b6200065f81600162000c4a565b6001600160a01b0394851660008181526003602090815260408083209689168084529682528083208054600f9690960b6001600160801b03166001600160801b031990961695909517909455600480825284832097909816825295865282812080546001600160a01b0319908116841790915596865282812094815293909452909120805490931690911790915550565b600080836001600160a01b0316836040516200070d919062000a32565b6000604051808303816000865af19150503d80600081146200074c576040519150601f19603f3d011682016040523d82523d6000602084013e62000751565b606091505b509150915081620007765760405162461bcd60e51b8152600401620000cf9062000ad4565b8051156200037957808060200190518101906200079491906200092d565b620003795760405162461bcd60e51b8152600401620000cf9062000b77565b828054620007c19062000cd0565b90600052602060002090601f016020900481019282620007e5576000855562000830565b82601f106200080057805160ff191683800117855562000830565b8280016001018555821562000830579182015b828111156200083057825182559160200191906001019062000813565b506200083e92915062000842565b5090565b5b808211156200083e576000815560010162000843565b80516001600160a01b03811681146200087157600080fd5b919050565b600082601f83011262000887578081fd5b815160206001600160401b03821115620008a557620008a562000d41565b808202620008b582820162000c1e565b838152828101908684018388018501891015620008d0578687fd5b8693505b85841015620008fd57620008e88162000859565b835260019390930192918401918401620008d4565b50979650505050505050565b6000602082840312156200091b578081fd5b620009268262000859565b9392505050565b6000602082840312156200093f578081fd5b8151801515811462000926578182fd5b60008060006060848603121562000964578182fd5b83516001600160401b03808211156200097b578384fd5b818601915086601f8301126200098f578384fd5b815181811115620009a457620009a462000d41565b620009b9601f8201601f191660200162000c1e565b818152886020838601011115620009ce578586fd5b620009e182602083016020870162000ca1565b602088015190965092505080821115620009f9578384fd5b5062000a088682870162000876565b925050604084015190509250925092565b60006020828403121562000a2b578081fd5b5051919050565b6000825162000a4681846020870162000ca1565b9190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b90815260200190565b60208082526028908201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160408201526734b73a30b4b732b960c11b606082015260800190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526014908201527f496e76616c69642061646170746572206e616d65000000000000000000000000604082015260600190565b60208082526014908201527f496e76616c6964206761732d657374696d617465000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6040518181016001600160401b038111828210171562000c425762000c4262000d41565b604052919050565b6000600f82810b9084900b828212801560016001607f1b038490038313161562000c785762000c7862000d2b565b60016001607f1b0319839003821281161562000c985762000c9862000d2b565b50019392505050565b60005b8381101562000cbe57818101518382015260200162000ca4565b83811115620003795750506000910152565b60028104600182168062000ce557607f821691505b6020821081141562000d0757634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141562000d245762000d2462000d2b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6121a48062000d676000396000f3fe60806040526004361061019a5760003560e01c806384a33e63116100e1578063a217fddf1161008a578063eab90da611610064578063eab90da614610471578063ef99893a14610491578063f2fde38b146104b1578063f8742254146104d1576101a1565b8063a217fddf1461041c578063d547741f14610431578063d8baf7cf14610451576101a1565b80638bb9c5bf116100bb5780638bb9c5bf146103bc57806391d14854146103dc5780639b04b009146103fc576101a1565b806384a33e631461035c5780638544c53b1461037c5780638980f11f1461039c576101a1565b80634ebb7916116101435780636b453c1f1161011d5780636b453c1f146102ef578063700123e01461030f5780637ae267731461033c576101a1565b80634ebb79161461028d578063531aa03e146102ad57806369cff80d146102da576101a1565b80632f2ff15d116101745780632f2ff15d1461022b57806336568abe1461024d5780634490af061461026d576101a1565b806301ffc9a7146101a657806306fdde03146101dc578063248a9ca3146101fe576101a1565b366101a157005b600080fd5b3480156101b257600080fd5b506101c66101c1366004611adc565b6104e6565b6040516101d39190611c9f565b60405180910390f35b3480156101e857600080fd5b506101f161052c565b6040516101d39190611d02565b34801561020a57600080fd5b5061021e610219366004611aa0565b6105ba565b6040516101d39190611caa565b34801561023757600080fd5b5061024b610246366004611ab8565b6105cf565b005b34801561025957600080fd5b5061024b610268366004611ab8565b6105f0565b34801561027957600080fd5b5061024b6102883660046119bf565b61063f565b34801561029957600080fd5b5061024b6102a8366004611aa0565b6106dd565b3480156102b957600080fd5b506102cd6102c836600461195c565b6107c3565b6040516101d39190611c58565b3480156102e657600080fd5b5061021e6107f2565b3480156102fb57600080fd5b5061024b61030a366004611924565b6107f8565b34801561031b57600080fd5b5061032f61032a36600461195c565b610825565b6040516101d39190611cb3565b34801561034857600080fd5b5061024b61035736600461195c565b610845565b34801561036857600080fd5b5061024b610377366004611aa0565b6108ac565b34801561038857600080fd5b5061024b6103973660046119bf565b610952565b3480156103a857600080fd5b5061024b6103b7366004611994565b6109f0565b3480156103c857600080fd5b5061024b6103d7366004611aa0565b610abc565b3480156103e857600080fd5b506101c66103f7366004611ab8565b610ad2565b34801561040857600080fd5b506102cd61041736600461195c565b610afb565b34801561042857600080fd5b5061021e610b21565b34801561043d57600080fd5b5061024b61044c366004611ab8565b610b26565b34801561045d57600080fd5b5061024b61046c366004611924565b610b42565b34801561047d57600080fd5b5061024b61048c366004611b5d565b610b6c565b34801561049d57600080fd5b5061021e6104ac366004611b1c565b610cfb565b3480156104bd57600080fd5b5061024b6104cc366004611924565b610d12565b3480156104dd57600080fd5b5061021e610d34565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610524575061052482610e80565b90505b919050565b60028054610539906120d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610565906120d7565b80156105b25780601f10610587576101008083540402835291602001916105b2565b820191906000526020600020905b81548152906001019060200180831161059557829003601f168201915b505050505081565b60009081526020819052604090206001015490565b6105d8826105ba565b6105e181610eb2565b6105eb8383610ec3565b505050565b6105f8610f48565b6001600160a01b0316816001600160a01b0316146106315760405162461bcd60e51b815260040161062890611f5b565b60405180910390fd5b61063b8282610f4c565b5050565b6000610649610f48565b90506106757f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610ad2565b6106915760405162461bcd60e51b815260040161062890611da1565b60005b82518110156105eb576106cd8382815181106106c057634e487b7160e01b600052603260045260246000fd5b6020026020010151610fcf565b6106d681612112565b9050610694565b60006106e7610f48565b90506107137f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610ad2565b61072f5760405162461bcd60e51b815260040161062890611da1565b6000821161074f5760405162461bcd60e51b815260040161062890611dfe565b604051339083156108fc029084906000818181858888f1935050505015801561077c573d6000803e3d6000fd5b5060006001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28836040516107b79190611caa565b60405180910390a25050565b6001600160a01b0380831660009081526004602090815260408083208585168452909152902054165b92915050565b60015481565b6108227f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826105cf565b50565b6003602090815260009283526040808420909152908252902054600f0b81565b600061084f610f48565b905061087b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610ad2565b6108975760405162461bcd60e51b815260040161062890611da1565b6105eb6001600160a01b038416836000610d58565b60006108b6610f48565b90506108e27f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610ad2565b6108fe5760405162461bcd60e51b815260040161062890611da1565b8161091b5760405162461bcd60e51b815260040161062890611e6a565b600182905560405130907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a906107b7908590611caa565b600061095c610f48565b90506109887f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610ad2565b6109a45760405162461bcd60e51b815260040161062890611da1565b60005b82518110156105eb576109e08382815181106109d357634e487b7160e01b600052603260045260246000fd5b6020026020010151611077565b6109e981612112565b90506109a7565b60006109fa610f48565b9050610a267f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610ad2565b610a425760405162461bcd60e51b815260040161062890611da1565b60008211610a625760405162461bcd60e51b815260040161062890611dfe565b610a766001600160a01b03841633846110e0565b826001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2883604051610aaf9190611caa565b60405180910390a2505050565b6000610ac6610f48565b905061063b82826105f0565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b600081565b610b2f826105ba565b610b3881610eb2565b6105eb8383610f4c565b6108227f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610b26565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190610b9b908590600401611c58565b60206040518083038186803b158015610bb357600080fd5b505afa158015610bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610beb9190611b04565b9050610bfa86868686866110ff565b600081846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610c299190611c58565b60206040518083038186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c799190611b04565b610c83919061207d565b905085811015610ca55760405162461bcd60e51b815260040161062890611d35565b836001600160a01b0316856001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8989604051610cea929190611fb8565b60405180910390a350505050505050565b6000610d0884848461124d565b90505b9392505050565b6000610d1c610f48565b9050610d296000836105cf565b61063b6000826105f0565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b801580610df957506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e90610da79030908690600401611c6c565b60206040518083038186803b158015610dbf57600080fd5b505afa158015610dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df79190611b04565b155b610e155760405162461bcd60e51b815260040161062890611efe565b6105eb8363095ea7b360e01b8484604051602401610e34929190611c86565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091526112b2565b6001600160e01b031981167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b61082281610ebe610f48565b611368565b610ecd8282610ad2565b61063b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610f04610f48565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b3390565b610f568282610ad2565b1561063b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055610f8b610f48565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600080610fdb836113cc565b9150915060005b6000610fee83836114d3565b90506001600160a01b0381166110045750611071565b6001600160a01b0390811660008181526004602081815260408084209589168452948152848320805473ffffffffffffffffffffffffffffffffffffffff1990811690915591815284832093835292909252919091208054909116905561106a81612112565b9050610fe2565b50505050565b600080611083836113cc565b909250905061109e6001600160a01b03831684600019610d58565b60005b60006110ad83836114d3565b90506001600160a01b0381166110c35750611071565b6110cf8585838561155a565b506110d981612112565b90506110a1565b6105eb8363a9059cbb60e01b8484604051602401610e34929190611c86565b600061110b84846107c3565b6001600160a01b0381811660008181526003602090815260408083208a86168452909152808220549388168252908190205490517fa6417ed6000000000000000000000000000000000000000000000000000000008152939450909263a6417ed69261118692600f91820b92910b908b908b90600401611cdf565b600060405180830381600087803b1580156111a057600080fd5b505af11580156111b4573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03861691506370a08231906111e7903090600401611c58565b60206040518083038186803b1580156111ff57600080fd5b505afa158015611213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112379190611b04565b905061124484828561162b565b50505050505050565b60008061125a84846107c3565b90506001600160a01b0381161580611270575084155b1561127f576000915050610d0b565b600061128d8287878761164f565b905061271061129e8261270f61205e565b6112a8919061203e565b9695505050505050565b600080836001600160a01b0316836040516112cd9190611bbb565b6000604051808303816000865af19150503d806000811461130a576040519150601f19603f3d011682016040523d82523d6000602084013e61130f565b606091505b5091509150816113315760405162461bcd60e51b815260040161062890611e35565b805115611071578080602001905181019061134c9190611a80565b6110715760405162461bcd60e51b815260040161062890611ea1565b6113728282610ad2565b61063b5761138a816001600160a01b03166014611722565b611395836020611722565b6040516020016113a6929190611bd7565b60408051601f198184030181529082905262461bcd60e51b825261062891600401611d02565b600080826001600160a01b031663c661065760006040518263ffffffff1660e01b81526004016113fc9190611caa565b60206040518083038186803b15801561141457600080fd5b505afa158015611428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144c9190611940565b60405163c661065760e01b81529092506001600160a01b0384169063c66106579061147c90600190600401611caa565b60206040518083038186803b15801561149457600080fd5b505afa1580156114a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cc9190611940565b9050915091565b60405163c661065760e01b81526000906001600160a01b0384169063c661065790611502908590600401611caa565b60206040518083038186803b15801561151a57600080fd5b505afa92505050801561154a575060408051601f3d908101601f1916820190925261154791810190611940565b60015b611553576107ec565b90506107ec565b6115706001600160a01b03831685600019610d58565b61157b816001611fc6565b6001600160a01b0394851660008181526003602090815260408083209689168084529682528083208054600f9690960b6fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff19909616959095179094556004808252848320979098168252958652828120805473ffffffffffffffffffffffffffffffffffffffff19908116841790915596865282812094815293909452909120805490931690911790915550565b306001600160a01b038216146105eb576105eb6001600160a01b03841682846110e0565b6001600160a01b03848116600081815260036020908152604080832087861684529091528082205493851682528082205490517f07211ef700000000000000000000000000000000000000000000000000000000815291936307211ef7926116c392600f92830b920b908990600401611cc1565b60206040518083038186803b1580156116db57600080fd5b505afa92505050801561170b575060408051601f3d908101601f1916820190925261170891810190611b04565b60015b6117175750600061171a565b90505b949350505050565b6060600061173183600261205e565b61173c906002612026565b67ffffffffffffffff81111561176257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561178c576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106117d157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061182a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061184e84600261205e565b611859906001612026565b90505b60018111156118fa577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106118a857634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106118cc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936118f3816120c0565b905061185c565b508315610d0b5760405162461bcd60e51b815260040161062890611d6c565b803561052781612159565b600060208284031215611935578081fd5b8135610d0b81612159565b600060208284031215611951578081fd5b8151610d0b81612159565b6000806040838503121561196e578081fd5b823561197981612159565b9150602083013561198981612159565b809150509250929050565b600080604083850312156119a6578182fd5b82356119b181612159565b946020939093013593505050565b600060208083850312156119d1578182fd5b823567ffffffffffffffff808211156119e8578384fd5b818501915085601f8301126119fb578384fd5b813581811115611a0d57611a0d612143565b83810260405185828201018181108582111715611a2c57611a2c612143565b604052828152858101935084860182860187018a1015611a4a578788fd5b8795505b83861015611a7357611a5f81611919565b855260019590950194938601938601611a4e565b5098975050505050505050565b600060208284031215611a91578081fd5b81518015158114610d0b578182fd5b600060208284031215611ab1578081fd5b5035919050565b60008060408385031215611aca578182fd5b82359150602083013561198981612159565b600060208284031215611aed578081fd5b81356001600160e01b031981168114610d0b578182fd5b600060208284031215611b15578081fd5b5051919050565b600080600060608486031215611b30578081fd5b833592506020840135611b4281612159565b91506040840135611b5281612159565b809150509250925092565b600080600080600060a08688031215611b74578081fd5b85359450602086013593506040860135611b8d81612159565b92506060860135611b9d81612159565b91506080860135611bad81612159565b809150509295509295909350565b60008251611bcd818460208701612094565b9190910192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351611c0f816017850160208801612094565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611c4c816028840160208801612094565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b600f9190910b815260200190565b600f93840b81529190920b6020820152604081019190915260600190565b600f94850b81529290930b60208301526040820152606081019190915260800190565b6000602082528251806020840152611d21816040850160208701612094565b601f01601f19169190910160400192915050565b60208082526017908201527f496e73756666696369656e7420616d6f756e742d6f7574000000000000000000604082015260600190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b60208082526028908201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160408201527f696e7461696e6572000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526014908201527f496e76616c6964206761732d657374696d617465000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b918252602082015260400190565b600081600f0b83600f0b828212826f7fffffffffffffffffffffffffffffff03821381151615611ff857611ff861212d565b826f7fffffffffffffffffffffffffffffff1903821281161561201d5761201d61212d565b50019392505050565b600082198211156120395761203961212d565b500190565b60008261205957634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156120785761207861212d565b500290565b60008282101561208f5761208f61212d565b500390565b60005b838110156120af578181015183820152602001612097565b838111156110715750506000910152565b6000816120cf576120cf61212d565b506000190190565b6002810460018216806120eb57607f821691505b6020821081141561210c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156121265761212661212d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461082257600080fdfea26469706673582212201becc4e069c4d49a64597817edd75364aa6104366affc86b58c22d9875421fce64736f6c63430008000033339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
  "deployedBytecode": "0x60806040526004361061019a5760003560e01c806384a33e63116100e1578063a217fddf1161008a578063eab90da611610064578063eab90da614610471578063ef99893a14610491578063f2fde38b146104b1578063f8742254146104d1576101a1565b8063a217fddf1461041c578063d547741f14610431578063d8baf7cf14610451576101a1565b80638bb9c5bf116100bb5780638bb9c5bf146103bc57806391d14854146103dc5780639b04b009146103fc576101a1565b806384a33e631461035c5780638544c53b1461037c5780638980f11f1461039c576101a1565b80634ebb7916116101435780636b453c1f1161011d5780636b453c1f146102ef578063700123e01461030f5780637ae267731461033c576101a1565b80634ebb79161461028d578063531aa03e146102ad57806369cff80d146102da576101a1565b80632f2ff15d116101745780632f2ff15d1461022b57806336568abe1461024d5780634490af061461026d576101a1565b806301ffc9a7146101a657806306fdde03146101dc578063248a9ca3146101fe576101a1565b366101a157005b600080fd5b3480156101b257600080fd5b506101c66101c1366004611adc565b6104e6565b6040516101d39190611c9f565b60405180910390f35b3480156101e857600080fd5b506101f161052c565b6040516101d39190611d02565b34801561020a57600080fd5b5061021e610219366004611aa0565b6105ba565b6040516101d39190611caa565b34801561023757600080fd5b5061024b610246366004611ab8565b6105cf565b005b34801561025957600080fd5b5061024b610268366004611ab8565b6105f0565b34801561027957600080fd5b5061024b6102883660046119bf565b61063f565b34801561029957600080fd5b5061024b6102a8366004611aa0565b6106dd565b3480156102b957600080fd5b506102cd6102c836600461195c565b6107c3565b6040516101d39190611c58565b3480156102e657600080fd5b5061021e6107f2565b3480156102fb57600080fd5b5061024b61030a366004611924565b6107f8565b34801561031b57600080fd5b5061032f61032a36600461195c565b610825565b6040516101d39190611cb3565b34801561034857600080fd5b5061024b61035736600461195c565b610845565b34801561036857600080fd5b5061024b610377366004611aa0565b6108ac565b34801561038857600080fd5b5061024b6103973660046119bf565b610952565b3480156103a857600080fd5b5061024b6103b7366004611994565b6109f0565b3480156103c857600080fd5b5061024b6103d7366004611aa0565b610abc565b3480156103e857600080fd5b506101c66103f7366004611ab8565b610ad2565b34801561040857600080fd5b506102cd61041736600461195c565b610afb565b34801561042857600080fd5b5061021e610b21565b34801561043d57600080fd5b5061024b61044c366004611ab8565b610b26565b34801561045d57600080fd5b5061024b61046c366004611924565b610b42565b34801561047d57600080fd5b5061024b61048c366004611b5d565b610b6c565b34801561049d57600080fd5b5061021e6104ac366004611b1c565b610cfb565b3480156104bd57600080fd5b5061024b6104cc366004611924565b610d12565b3480156104dd57600080fd5b5061021e610d34565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610524575061052482610e80565b90505b919050565b60028054610539906120d7565b80601f0160208091040260200160405190810160405280929190818152602001828054610565906120d7565b80156105b25780601f10610587576101008083540402835291602001916105b2565b820191906000526020600020905b81548152906001019060200180831161059557829003601f168201915b505050505081565b60009081526020819052604090206001015490565b6105d8826105ba565b6105e181610eb2565b6105eb8383610ec3565b505050565b6105f8610f48565b6001600160a01b0316816001600160a01b0316146106315760405162461bcd60e51b815260040161062890611f5b565b60405180910390fd5b61063b8282610f4c565b5050565b6000610649610f48565b90506106757f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610ad2565b6106915760405162461bcd60e51b815260040161062890611da1565b60005b82518110156105eb576106cd8382815181106106c057634e487b7160e01b600052603260045260246000fd5b6020026020010151610fcf565b6106d681612112565b9050610694565b60006106e7610f48565b90506107137f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610ad2565b61072f5760405162461bcd60e51b815260040161062890611da1565b6000821161074f5760405162461bcd60e51b815260040161062890611dfe565b604051339083156108fc029084906000818181858888f1935050505015801561077c573d6000803e3d6000fd5b5060006001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28836040516107b79190611caa565b60405180910390a25050565b6001600160a01b0380831660009081526004602090815260408083208585168452909152902054165b92915050565b60015481565b6108227f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826105cf565b50565b6003602090815260009283526040808420909152908252902054600f0b81565b600061084f610f48565b905061087b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610ad2565b6108975760405162461bcd60e51b815260040161062890611da1565b6105eb6001600160a01b038416836000610d58565b60006108b6610f48565b90506108e27f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610ad2565b6108fe5760405162461bcd60e51b815260040161062890611da1565b8161091b5760405162461bcd60e51b815260040161062890611e6a565b600182905560405130907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a906107b7908590611caa565b600061095c610f48565b90506109887f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610ad2565b6109a45760405162461bcd60e51b815260040161062890611da1565b60005b82518110156105eb576109e08382815181106109d357634e487b7160e01b600052603260045260246000fd5b6020026020010151611077565b6109e981612112565b90506109a7565b60006109fa610f48565b9050610a267f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610ad2565b610a425760405162461bcd60e51b815260040161062890611da1565b60008211610a625760405162461bcd60e51b815260040161062890611dfe565b610a766001600160a01b03841633846110e0565b826001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2883604051610aaf9190611caa565b60405180910390a2505050565b6000610ac6610f48565b905061063b82826105f0565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60046020908152600092835260408084209091529082529020546001600160a01b031681565b600081565b610b2f826105ba565b610b3881610eb2565b6105eb8383610f4c565b6108227f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610b26565b6040516370a0823160e01b81526000906001600160a01b038416906370a0823190610b9b908590600401611c58565b60206040518083038186803b158015610bb357600080fd5b505afa158015610bc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610beb9190611b04565b9050610bfa86868686866110ff565b600081846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610c299190611c58565b60206040518083038186803b158015610c4157600080fd5b505afa158015610c55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c799190611b04565b610c83919061207d565b905085811015610ca55760405162461bcd60e51b815260040161062890611d35565b836001600160a01b0316856001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8989604051610cea929190611fb8565b60405180910390a350505050505050565b6000610d0884848461124d565b90505b9392505050565b6000610d1c610f48565b9050610d296000836105cf565b61063b6000826105f0565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b801580610df957506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e90610da79030908690600401611c6c565b60206040518083038186803b158015610dbf57600080fd5b505afa158015610dd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df79190611b04565b155b610e155760405162461bcd60e51b815260040161062890611efe565b6105eb8363095ea7b360e01b8484604051602401610e34929190611c86565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091526112b2565b6001600160e01b031981167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b61082281610ebe610f48565b611368565b610ecd8282610ad2565b61063b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610f04610f48565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b3390565b610f568282610ad2565b1561063b576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055610f8b610f48565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600080610fdb836113cc565b9150915060005b6000610fee83836114d3565b90506001600160a01b0381166110045750611071565b6001600160a01b0390811660008181526004602081815260408084209589168452948152848320805473ffffffffffffffffffffffffffffffffffffffff1990811690915591815284832093835292909252919091208054909116905561106a81612112565b9050610fe2565b50505050565b600080611083836113cc565b909250905061109e6001600160a01b03831684600019610d58565b60005b60006110ad83836114d3565b90506001600160a01b0381166110c35750611071565b6110cf8585838561155a565b506110d981612112565b90506110a1565b6105eb8363a9059cbb60e01b8484604051602401610e34929190611c86565b600061110b84846107c3565b6001600160a01b0381811660008181526003602090815260408083208a86168452909152808220549388168252908190205490517fa6417ed6000000000000000000000000000000000000000000000000000000008152939450909263a6417ed69261118692600f91820b92910b908b908b90600401611cdf565b600060405180830381600087803b1580156111a057600080fd5b505af11580156111b4573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03861691506370a08231906111e7903090600401611c58565b60206040518083038186803b1580156111ff57600080fd5b505afa158015611213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112379190611b04565b905061124484828561162b565b50505050505050565b60008061125a84846107c3565b90506001600160a01b0381161580611270575084155b1561127f576000915050610d0b565b600061128d8287878761164f565b905061271061129e8261270f61205e565b6112a8919061203e565b9695505050505050565b600080836001600160a01b0316836040516112cd9190611bbb565b6000604051808303816000865af19150503d806000811461130a576040519150601f19603f3d011682016040523d82523d6000602084013e61130f565b606091505b5091509150816113315760405162461bcd60e51b815260040161062890611e35565b805115611071578080602001905181019061134c9190611a80565b6110715760405162461bcd60e51b815260040161062890611ea1565b6113728282610ad2565b61063b5761138a816001600160a01b03166014611722565b611395836020611722565b6040516020016113a6929190611bd7565b60408051601f198184030181529082905262461bcd60e51b825261062891600401611d02565b600080826001600160a01b031663c661065760006040518263ffffffff1660e01b81526004016113fc9190611caa565b60206040518083038186803b15801561141457600080fd5b505afa158015611428573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144c9190611940565b60405163c661065760e01b81529092506001600160a01b0384169063c66106579061147c90600190600401611caa565b60206040518083038186803b15801561149457600080fd5b505afa1580156114a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114cc9190611940565b9050915091565b60405163c661065760e01b81526000906001600160a01b0384169063c661065790611502908590600401611caa565b60206040518083038186803b15801561151a57600080fd5b505afa92505050801561154a575060408051601f3d908101601f1916820190925261154791810190611940565b60015b611553576107ec565b90506107ec565b6115706001600160a01b03831685600019610d58565b61157b816001611fc6565b6001600160a01b0394851660008181526003602090815260408083209689168084529682528083208054600f9690960b6fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff19909616959095179094556004808252848320979098168252958652828120805473ffffffffffffffffffffffffffffffffffffffff19908116841790915596865282812094815293909452909120805490931690911790915550565b306001600160a01b038216146105eb576105eb6001600160a01b03841682846110e0565b6001600160a01b03848116600081815260036020908152604080832087861684529091528082205493851682528082205490517f07211ef700000000000000000000000000000000000000000000000000000000815291936307211ef7926116c392600f92830b920b908990600401611cc1565b60206040518083038186803b1580156116db57600080fd5b505afa92505050801561170b575060408051601f3d908101601f1916820190925261170891810190611b04565b60015b6117175750600061171a565b90505b949350505050565b6060600061173183600261205e565b61173c906002612026565b67ffffffffffffffff81111561176257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561178c576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106117d157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061182a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061184e84600261205e565b611859906001612026565b90505b60018111156118fa577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106118a857634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106118cc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936118f3816120c0565b905061185c565b508315610d0b5760405162461bcd60e51b815260040161062890611d6c565b803561052781612159565b600060208284031215611935578081fd5b8135610d0b81612159565b600060208284031215611951578081fd5b8151610d0b81612159565b6000806040838503121561196e578081fd5b823561197981612159565b9150602083013561198981612159565b809150509250929050565b600080604083850312156119a6578182fd5b82356119b181612159565b946020939093013593505050565b600060208083850312156119d1578182fd5b823567ffffffffffffffff808211156119e8578384fd5b818501915085601f8301126119fb578384fd5b813581811115611a0d57611a0d612143565b83810260405185828201018181108582111715611a2c57611a2c612143565b604052828152858101935084860182860187018a1015611a4a578788fd5b8795505b83861015611a7357611a5f81611919565b855260019590950194938601938601611a4e565b5098975050505050505050565b600060208284031215611a91578081fd5b81518015158114610d0b578182fd5b600060208284031215611ab1578081fd5b5035919050565b60008060408385031215611aca578182fd5b82359150602083013561198981612159565b600060208284031215611aed578081fd5b81356001600160e01b031981168114610d0b578182fd5b600060208284031215611b15578081fd5b5051919050565b600080600060608486031215611b30578081fd5b833592506020840135611b4281612159565b91506040840135611b5281612159565b809150509250925092565b600080600080600060a08688031215611b74578081fd5b85359450602086013593506040860135611b8d81612159565b92506060860135611b9d81612159565b91506080860135611bad81612159565b809150509295509295909350565b60008251611bcd818460208701612094565b9190910192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351611c0f816017850160208801612094565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611c4c816028840160208801612094565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b600f9190910b815260200190565b600f93840b81529190920b6020820152604081019190915260600190565b600f94850b81529290930b60208301526040820152606081019190915260800190565b6000602082528251806020840152611d21816040850160208701612094565b601f01601f19169190910160400192915050565b60208082526017908201527f496e73756666696369656e7420616d6f756e742d6f7574000000000000000000604082015260600190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b60208082526028908201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160408201527f696e7461696e6572000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526014908201527f496e76616c6964206761732d657374696d617465000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b918252602082015260400190565b600081600f0b83600f0b828212826f7fffffffffffffffffffffffffffffff03821381151615611ff857611ff861212d565b826f7fffffffffffffffffffffffffffffff1903821281161561201d5761201d61212d565b50019392505050565b600082198211156120395761203961212d565b500190565b60008261205957634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156120785761207861212d565b500290565b60008282101561208f5761208f61212d565b500390565b60005b838110156120af578181015183820152602001612097565b838111156110715750506000910152565b6000816120cf576120cf61212d565b506000190190565b6002810460018216806120eb57607f821691505b6020821081141561210c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156121265761212661212d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461082257600080fdfea26469706673582212201becc4e069c4d49a64597817edd75364aa6104366affc86b58c22d9875421fce64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/adapters/CurveMetaV3Adapter.sol:CurveMetaV3Adapter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1452,
        "contract": "src/contracts/adapters/CurveMetaV3Adapter.sol:CurveMetaV3Adapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1454,
        "contract": "src/contracts/adapters/CurveMetaV3Adapter.sol:CurveMetaV3Adapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 6073,
        "contract": "src/contracts/adapters/CurveMetaV3Adapter.sol:CurveMetaV3Adapter",
        "label": "tokenIndexForPool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_int128))"
      },
      {
        "astId": 6079,
        "contract": "src/contracts/adapters/CurveMetaV3Adapter.sol:CurveMetaV3Adapter",
        "label": "poolForTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_int128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int128)",
        "numberOfBytes": "32",
        "value": "t_int128"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_int128))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => int128))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_int128)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/adapters/CurveMetaV3Adapter.sol:CurveMetaV3Adapter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/adapters/CurveMetaV3Adapter.sol:CurveMetaV3Adapter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}