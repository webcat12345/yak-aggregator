{
  "address": "0xb60CE5bF2A231EDA70825f9cdcD0795102218ab0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_POINTS_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRICE_PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDG_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "addPoolTkns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isPoolTkn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "rmPoolTkns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbdea4858dc07bc0f4866806cdd8a3a1530d41fa94c11209c91cf1d1152d46913",
  "receipt": {
    "to": null,
    "from": "0xd22044706DeA3c342f68396bEDBCf6a2536d951D",
    "contractAddress": "0xb60CE5bF2A231EDA70825f9cdcD0795102218ab0",
    "transactionIndex": 2,
    "gasUsed": "17840412",
    "logsBloom": "0x
    "blockHash": "0x3c711ddd6c6e6f6925491e1cda3d9a6b21122ac7521b0245b342fd953bae0d83",
    "transactionHash": "0xbdea4858dc07bc0f4866806cdd8a3a1530d41fa94c11209c91cf1d1152d46913",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 53908764,
        "transactionHash": "0xbdea4858dc07bc0f4866806cdd8a3a1530d41fa94c11209c91cf1d1152d46913",
        "address": "0xb60CE5bF2A231EDA70825f9cdcD0795102218ab0",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x3c711ddd6c6e6f6925491e1cda3d9a6b21122ac7521b0245b342fd953bae0d83"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 53908764,
        "transactionHash": "0xbdea4858dc07bc0f4866806cdd8a3a1530d41fa94c11209c91cf1d1152d46913",
        "address": "0xb60CE5bF2A231EDA70825f9cdcD0795102218ab0",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x3c711ddd6c6e6f6925491e1cda3d9a6b21122ac7521b0245b342fd953bae0d83"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 53908764,
        "transactionHash": "0xbdea4858dc07bc0f4866806cdd8a3a1530d41fa94c11209c91cf1d1152d46913",
        "address": "0xb60CE5bF2A231EDA70825f9cdcD0795102218ab0",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x000000000000000000000000b60ce5bf2a231eda70825f9cdcd0795102218ab0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000099cf0",
        "logIndex": 7,
        "blockHash": "0x3c711ddd6c6e6f6925491e1cda3d9a6b21122ac7521b0245b342fd953bae0d83"
      }
    ],
    "blockNumber": 53908764,
    "cumulativeGasUsed": "18721328",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "GmxAdapter",
    "0x489ee077994B6658eAfA855C308275EAd8097C4A",
    630000
  ],
  "solcInputHash": "2f7c552725bac4cbb59f7eeca6343ccc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_POINTS_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDG_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"addPoolTkns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isPoolTkn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"rmPoolTkns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/adapters/GmxAdapter.sol\":\"GmxAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IWETH.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\n\\nabstract contract YakAdapter is Maintainable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\\n    event Recovered(address indexed _asset, uint256 amount);\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n    uint256 public swapGasEstimate;\\n    string public name;\\n\\n    constructor(string memory _name, uint256 _gasEstimate) {\\n        setName(_name);\\n        setSwapGasEstimate(_gasEstimate);\\n    }\\n\\n    function setName(string memory _name) internal {\\n        require(bytes(_name).length != 0, \\\"Invalid adapter name\\\");\\n        name = _name;\\n    }\\n\\n    function setSwapGasEstimate(uint256 _estimate) public onlyMaintainer {\\n        require(_estimate != 0, \\\"Invalid gas-estimate\\\");\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    function revokeAllowance(address _token, address _spender) external onlyMaintainer {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\\n        require(_tokenAmount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\\n        require(_amount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (uint256) {\\n        return _query(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) external {\\n        uint256 toBal0 = IERC20(_toToken).balanceOf(_to);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBal0;\\n        require(diff >= _amountOut, \\\"Insufficient amount-out\\\");\\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\\n    }\\n\\n    function _returnTo(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual returns (uint256);\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xa4058929ff6bd42af6ad0fcae4b74531dfb5e9c2c3f2bdc1d933ba7b25165467\",\"license\":\"GPL-3.0-only\"},\"src/contracts/adapters/GmxAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IGmxVault.sol\\\";\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"../YakAdapter.sol\\\";\\n\\ncontract GmxAdapter is YakAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public constant BASIS_POINTS_DIVISOR = 1e4;\\n    uint256 public constant PRICE_PRECISION = 1e30;\\n    uint256 public constant USDG_DECIMALS = 18;\\n    address public immutable VAULT;\\n    bool immutable USE_VAULT_UTILS;\\n    address immutable USDG;\\n    mapping(address => bool) public isPoolTkn; // unwanted tkns can be ignored by adapter\\n    mapping(address => uint256) tokenDecimals;\\n\\n    constructor(\\n        string memory _name,\\n        address _vault,\\n        uint256 _swapGasEstimate\\n    ) YakAdapter(_name, _swapGasEstimate) {\\n        _setVaultTkns(_vault);\\n        USE_VAULT_UTILS = _vaultHasUtils(_vault);\\n        USDG = IGmxVault(_vault).usdg();\\n        VAULT = _vault;\\n    }\\n\\n    //                                 UTILS                                  \\\\\\\\\\n\\n    function addPoolTkns(address[] calldata _tokens) external onlyMaintainer {\\n        for (uint256 i; i < _tokens.length; ++i) _setToken(_tokens[i]);\\n    }\\n\\n    function rmPoolTkns(address[] calldata _tokens) external onlyMaintainer {\\n        for (uint256 i; i < _tokens.length; ++i) isPoolTkn[_tokens[i]] = false;\\n    }\\n\\n    function _setVaultTkns(address _vault) internal {\\n        uint256 whitelistedTknsLen = IGmxVault(_vault).allWhitelistedTokensLength();\\n        for (uint256 i = 0; i < whitelistedTknsLen; i++) {\\n            address token = IGmxVault(_vault).allWhitelistedTokens(i);\\n            _setToken(token);\\n        }\\n    }\\n\\n    function _setToken(address _token) internal {\\n        tokenDecimals[_token] = IERC20(_token).decimals();\\n        isPoolTkn[_token] = true;\\n    }\\n\\n    function _vaultHasUtils(address _vault) internal view returns (bool) {\\n        try IGmxVault(_vault).vaultUtils() {\\n            return true;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    //                                 QUERY                                  \\\\\\\\\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view override returns (uint256) {\\n        if (_validArgs(_amountIn, _tokenIn, _tokenOut)) return _getAmountOut(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function _validArgs(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view returns (bool) {\\n        return\\n            _amountIn != 0 &&\\n            _tokenIn != _tokenOut &&\\n            isPoolTkn[_tokenIn] &&\\n            IGmxVault(VAULT).whitelistedTokens(_tokenIn) &&\\n            IGmxVault(VAULT).whitelistedTokens(_tokenOut) &&\\n            IGmxVault(VAULT).isSwapEnabled() &&\\n            _hasVaultEnoughBal(_tokenIn, 1); // Prevents calc problems\\n    }\\n\\n    function _getAmountOut(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view returns (uint256) {\\n        (uint256 amountOut, uint256 usdgAmount) = _getGrossAmountOutAndUsdg(_amountIn, _tokenIn, _tokenOut);\\n        return _calcNetAmountOut(_tokenIn, _tokenOut, amountOut, usdgAmount);\\n    }\\n\\n    function _calcNetAmountOut(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountOut,\\n        uint256 _usdgAmount\\n    ) internal view returns (uint256) {\\n        uint256 feeBps = _getFeeBasisPoint(_tokenIn, _tokenOut, _usdgAmount);\\n        uint256 netAmountOut = _amountOutAfterFees(_amountOut, feeBps);\\n        bool withinVaultLimits = _isWithinVaultLimits(_tokenIn, _tokenOut, _usdgAmount, netAmountOut);\\n        if (withinVaultLimits) return netAmountOut;\\n    }\\n\\n    function _getGrossAmountOutAndUsdg(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view returns (uint256 amountOut, uint256 usdgAmount) {\\n        (uint256 priceIn, uint256 priceOut) = _getPrices(_tokenIn, _tokenOut);\\n        amountOut = (_amountIn * priceIn) / priceOut;\\n        amountOut = _adjustForDecimals(amountOut, _tokenIn, _tokenOut);\\n        usdgAmount = _getUsdgAmount(_amountIn, priceIn, _tokenIn);\\n    }\\n\\n    function _getUsdgAmount(\\n        uint256 _amountIn,\\n        uint256 _priceIn,\\n        address _tokenIn\\n    ) internal view returns (uint256 usdgAmount) {\\n        usdgAmount = (_amountIn * _priceIn) / PRICE_PRECISION;\\n        usdgAmount = _adjustForDecimals(usdgAmount, _tokenIn, USDG);\\n    }\\n\\n    function _amountOutAfterFees(uint256 _amountOut, uint256 _feeBasisPoints) internal pure returns (uint256) {\\n        return (_amountOut * (BASIS_POINTS_DIVISOR - _feeBasisPoints)) / BASIS_POINTS_DIVISOR;\\n    }\\n\\n    function _adjustForDecimals(\\n        uint256 _amount,\\n        address _tokenDiv,\\n        address _tokenMul\\n    ) internal view returns (uint256) {\\n        uint256 decimalsDiv = _tokenDiv == USDG ? USDG_DECIMALS : tokenDecimals[_tokenDiv];\\n        uint256 decimalsMul = _tokenMul == USDG ? USDG_DECIMALS : tokenDecimals[_tokenMul];\\n        return (_amount * 10**decimalsMul) / 10**decimalsDiv;\\n    }\\n\\n    function _getPrices(address _tokenIn, address _tokenOut) internal view returns (uint256 priceIn, uint256 priceOut) {\\n        IGmxVaultPriceFeed priceFeed = IGmxVault(VAULT).priceFeed();\\n        priceIn = priceFeed.getPrice(_tokenIn, false, true, true);\\n        priceOut = priceFeed.getPrice(_tokenOut, true, true, true);\\n    }\\n\\n    function _hasVaultEnoughBal(address _token, uint256 _amount) private view returns (bool) {\\n        return IERC20(_token).balanceOf(VAULT) >= _amount;\\n    }\\n\\n    function _isWithinVaultLimits(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountInUsdg,\\n        uint256 _amountOut\\n    ) private view returns (bool) {\\n        uint256 poolBalTknOut = IGmxVault(VAULT).poolAmounts(_tokenOut);\\n        if (poolBalTknOut < _amountOut) return false;\\n        uint256 newPoolBalTknOut = poolBalTknOut - _amountOut;\\n        return\\n            !reservedAmountExceeded(newPoolBalTknOut, _tokenOut) &&\\n            !bufferAmountExceeded(newPoolBalTknOut, _tokenOut) &&\\n            !maxDebtExceeded(_amountInUsdg, _tokenIn);\\n    }\\n\\n    function reservedAmountExceeded(uint256 _newPoolBalTknOut, address _tokenOut) internal view returns (bool) {\\n        uint256 reservedAmount = IGmxVault(VAULT).reservedAmounts(_tokenOut);\\n        return _newPoolBalTknOut < reservedAmount;\\n    }\\n\\n    function bufferAmountExceeded(uint256 _newPoolBalTknOut, address _tokenOut) internal view returns (bool) {\\n        uint256 bufferAmount = IGmxVault(VAULT).bufferAmounts(_tokenOut);\\n        return _newPoolBalTknOut < bufferAmount;\\n    }\\n\\n    function maxDebtExceeded(uint256 _amountInUsdg, address _tokenIn) internal view returns (bool) {\\n        uint256 maxUsdgAmount = IGmxVault(VAULT).maxUsdgAmounts(_tokenIn);\\n        if (maxUsdgAmount == 0) return false;\\n        uint256 newUsdgAmount = IGmxVault(VAULT).usdgAmounts(_tokenIn) + _amountInUsdg;\\n        return newUsdgAmount > maxUsdgAmount;\\n    }\\n\\n    function _getFeeBasisPoint(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 usdgAmount\\n    ) internal view returns (uint256) {\\n        if (USE_VAULT_UTILS)\\n            return IGmxVault(VAULT).vaultUtils().getSwapFeeBasisPoints(_tokenIn, _tokenOut, usdgAmount);\\n        return _calcFeeBasisPoints(_tokenIn, _tokenOut, usdgAmount);\\n    }\\n\\n    function _calcFeeBasisPoints(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 usdgAmount\\n    ) internal view returns (uint256 feeBasisPoints) {\\n        bool isStableSwap = IGmxVault(VAULT).stableTokens(_tokenIn) && IGmxVault(VAULT).stableTokens(_tokenOut);\\n        uint256 baseBps = isStableSwap\\n            ? IGmxVault(VAULT).stableSwapFeeBasisPoints()\\n            : IGmxVault(VAULT).swapFeeBasisPoints();\\n        uint256 taxBps = isStableSwap ? IGmxVault(VAULT).stableTaxBasisPoints() : IGmxVault(VAULT).taxBasisPoints();\\n        uint256 feesBasisPoints0 = IGmxVault(VAULT).getFeeBasisPoints(_tokenIn, usdgAmount, baseBps, taxBps, true);\\n        uint256 feesBasisPoints1 = IGmxVault(VAULT).getFeeBasisPoints(_tokenOut, usdgAmount, baseBps, taxBps, false);\\n        // use the higher of the two fee basis points\\n        feeBasisPoints = feesBasisPoints0 > feesBasisPoints1 ? feesBasisPoints0 : feesBasisPoints1;\\n    }\\n\\n    //                                  SWAP                                  \\\\\\\\\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to\\n    ) internal override {\\n        IERC20(_tokenIn).safeTransfer(VAULT, _amountIn);\\n        IGmxVault(VAULT).swap(\\n            _tokenIn,\\n            _tokenOut,\\n            address(this) // No check for amount-out within swap function\\n        );\\n        // Confidently transfer amount-out\\n        _returnTo(_tokenOut, _amountOut, _to);\\n    }\\n}\\n\",\"keccak256\":\"0xc61b33bd000d1b9b4105310f4c404ef2b6cfd987a56d6310f90bc3b9faf5080a\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(address, address, uint256);\\n    event Transfer(address, address, uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\\n\\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\\n}\\n\",\"keccak256\":\"0xe5c96d567fa7105b50c9ca77735160db4ade2ea51703c066d02df4fca855a462\",\"license\":\"MIT\"},\"src/contracts/interface/IGmxVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGmxVaultPriceFeed {\\n    function getPrice(\\n        address,\\n        bool,\\n        bool,\\n        bool\\n    ) external view returns (uint256);\\n}\\n\\ninterface IGmxVaultUtils {\\n    function getSwapFeeBasisPoints(\\n        address,\\n        address,\\n        uint256\\n    ) external view returns (uint256);\\n}\\n\\ninterface IGmxVault {\\n    function swap(\\n        address,\\n        address,\\n        address\\n    ) external;\\n\\n    function whitelistedTokens(address) external view returns (bool);\\n\\n    function isSwapEnabled() external view returns (bool);\\n\\n    function vaultUtils() external view returns (IGmxVaultUtils);\\n\\n    function priceFeed() external view returns (IGmxVaultPriceFeed);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n\\n    function maxUsdgAmounts(address) external view returns (uint256);\\n\\n    function usdgAmounts(address) external view returns (uint256);\\n\\n    function reservedAmounts(address) external view returns (uint256);\\n\\n    function bufferAmounts(address) external view returns (uint256);\\n\\n    function poolAmounts(address) external view returns (uint256);\\n\\n    function usdg() external view returns (address);\\n\\n    function hasDynamicFees() external view returns (bool);\\n\\n    function stableTokens(address) external view returns (bool);\\n\\n    function getFeeBasisPoints(\\n        address,\\n        uint256,\\n        uint256,\\n        uint256,\\n        bool\\n    ) external view returns (uint256);\\n\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n\\n    function swapFeeBasisPoints() external view returns (uint256);\\n\\n    function stableTaxBasisPoints() external view returns (uint256);\\n\\n    function taxBasisPoints() external view returns (uint256);\\n\\n    function setBufferAmount(address, uint256) external;\\n\\n    function gov() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd9c49c7176bad4cf7e003151e64d60014c110d48f3bf56ac3144d98603cac86a\",\"license\":\"MIT\"},\"src/contracts/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 amount) external;\\n\\n    function deposit() external payable;\\n}\\n\",\"keccak256\":\"0x7b31ca489d1bdf6631d5cf8c6f8ff9dc4a5c881d801a525f4e592a6884b9d2ad\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is Context, AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n        _setupRole(MAINTAINER_ROLE, msgSender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        address msgSender = _msgSender();\\n        renounceRole(role, msgSender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        address msgSender = _msgSender();\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        address msgSender = _msgSender();\\n        require(hasRole(MAINTAINER_ROLE, msgSender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcf17b3f89386f661ee6230c9774bc88a119f2385111279497bbb443209ad6bb2\",\"license\":\"MIT\"},\"src/contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d77601f615804eb7471002f23f9a4593f86ac295e7353c2e7545f51d4f81728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200388638038062003886833981016040819052620000349162000636565b828160006200004262000144565b90506200005160008262000148565b6200006c600080516020620038668339815191528262000148565b50620000788262000158565b620000838162000197565b506200009190508262000244565b6200009c8262000376565b151560a081151560f81b81525050816001600160a01b031663f5b91b7b6040518163ffffffff1660e01b815260040160206040518083038186803b158015620000e457600080fd5b505afa158015620000f9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011f919062000610565b6001600160601b0319606091821b811660c05292901b90911660805250620008b29050565b3390565b620001548282620003fe565b5050565b8051620001825760405162461bcd60e51b81526004016200017990620007a7565b60405180910390fd5b8051620001549060029060208401906200055d565b6000620001a362000144565b9050620001c0600080516020620038668339815191528262000488565b620001df5760405162461bcd60e51b815260040162000179906200075f565b81620001ff5760405162461bcd60e51b81526004016200017990620007de565b600182905560405130907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a906200023890859062000815565b60405180910390a25050565b6000816001600160a01b0316630842b0766040518163ffffffff1660e01b815260040160206040518083038186803b1580156200028057600080fd5b505afa15801562000295573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002bb919062000723565b905060005b818110156200037157604051630e468baf60e41b81526000906001600160a01b0385169063e468baf090620002fa90859060040162000815565b60206040518083038186803b1580156200031357600080fd5b505afa15801562000328573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200034e919062000610565b90506200035b81620004b1565b508062000368816200085b565b915050620002c0565b505050565b6000816001600160a01b0316636abbe0c86040518163ffffffff1660e01b815260040160206040518083038186803b158015620003b257600080fd5b505afa925050508015620003e5575060408051601f3d908101601f19168201909252620003e29181019062000610565b60015b620003f357506000620003f9565b50600190505b919050565b6200040a828262000488565b62000154576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556200044462000144565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620004eb57600080fd5b505afa15801562000500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200052691906200073c565b6001600160a01b03909116600090815260046020908152604080832060ff949094169093556003905220805460ff19166001179055565b8280546200056b906200081e565b90600052602060002090601f0160209004810192826200058f5760008555620005da565b82601f10620005aa57805160ff1916838001178555620005da565b82800160010185558215620005da579182015b82811115620005da578251825591602001919060010190620005bd565b50620005e8929150620005ec565b5090565b5b80821115620005e85760008155600101620005ed565b8051620003f98162000899565b60006020828403121562000622578081fd5b81516200062f8162000899565b9392505050565b6000806000606084860312156200064b578182fd5b83516001600160401b038082111562000662578384fd5b818601915086601f83011262000676578384fd5b8151818111156200068b576200068b62000883565b6040516020601f8301601f1916820181018481118382101715620006b357620006b362000883565b60405282825284830181018a1015620006ca578687fd5b8693505b82841015620006ed5784840181015182850182015292830192620006ce565b82841115620006fe57868184840101525b8197506200070e818a0162000603565b96505050505050604084015190509250925092565b60006020828403121562000735578081fd5b5051919050565b6000602082840312156200074e578081fd5b815160ff811681146200062f578182fd5b60208082526028908201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160408201526734b73a30b4b732b960c11b606082015260800190565b60208082526014908201527f496e76616c69642061646170746572206e616d65000000000000000000000000604082015260600190565b60208082526014908201527f496e76616c6964206761732d657374696d617465000000000000000000000000604082015260600190565b90815260200190565b6002810460018216806200083357607f821691505b602082108114156200085557634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156200087c57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114620008af57600080fd5b50565b60805160601c60a05160f81c60c05160601c612eda6200098c60003960008181611a7d01528181611adb0152611b8c01526000611bb4015260008181610662015281816110fd015281816111520152818161139601528181611439015281816114c70152818161179d015281816118d201528181611bda01528181611d1b01528181611e1801528181611ee901528181611f790152818161200f015281816120a90152818161213f015281816121d40152818161227d01528181612343015281816123ec0152818161243b01526124eb0152612eda6000f3fe6080604052600436106101b05760003560e01c8063870d917c116100ec578063d8baf7cf1161008a578063eab90da611610064578063eab90da61461048e578063ef99893a146104ae578063f2fde38b146104ce578063f8742254146104ee576101b7565b8063d8baf7cf1461042e578063e2eba5f01461044e578063e98f45f01461046e576101b7565b806391d14854116100c657806391d14854146103c457806395082d25146103e4578063a217fddf146103f9578063d547741f1461040e576101b7565b8063870d917c1461036f5780638980f11f146103845780638bb9c5bf146103a4576101b7565b8063411557d11161015957806369cff80d1161013357806369cff80d146102fa5780636b453c1f1461030f5780637ae267731461032f57806384a33e631461034f576101b7565b8063411557d1146102985780634ebb7916146102ba57806367818e3d146102da576101b7565b8063248a9ca31161018a578063248a9ca3146102365780632f2ff15d1461025657806336568abe14610278576101b7565b806301ffc9a7146101bc57806306fdde03146101f2578063126082cf14610214576101b7565b366101b757005b600080fd5b3480156101c857600080fd5b506101dc6101d73660046126e5565b610503565b6040516101e99190612986565b60405180910390f35b3480156101fe57600080fd5b50610207610547565b6040516101e9919061299a565b34801561022057600080fd5b506102296105d5565b6040516101e99190612991565b34801561024257600080fd5b506102296102513660046126a9565b6105db565b34801561026257600080fd5b506102766102713660046126c1565b6105f0565b005b34801561028457600080fd5b506102766102933660046126c1565b610611565b3480156102a457600080fd5b506102ad610660565b6040516101e9919061289e565b3480156102c657600080fd5b506102766102d53660046126a9565b610684565b3480156102e657600080fd5b506101dc6102f536600461259b565b61076a565b34801561030657600080fd5b5061022961077f565b34801561031b57600080fd5b5061027661032a36600461259b565b610785565b34801561033b57600080fd5b5061027661034a3660046125b7565b6107b2565b34801561035b57600080fd5b5061027661036a3660046126a9565b610819565b34801561037b57600080fd5b506102296108bf565b34801561039057600080fd5b5061027661039f3660046125ef565b6108c4565b3480156103b057600080fd5b506102766103bf3660046126a9565b610990565b3480156103d057600080fd5b506101dc6103df3660046126c1565b6109a6565b3480156103f057600080fd5b506102296109cf565b34801561040557600080fd5b506102296109e0565b34801561041a57600080fd5b506102766104293660046126c1565b6109e5565b34801561043a57600080fd5b5061027661044936600461259b565b610a01565b34801561045a57600080fd5b5061027661046936600461261a565b610a2b565b34801561047a57600080fd5b5061027661048936600461261a565b610adb565b34801561049a57600080fd5b506102766104a9366004612782565b610bab565b3480156104ba57600080fd5b506102296104c9366004612741565b610d53565b3480156104da57600080fd5b506102766104e936600461259b565b610d6a565b3480156104fa57600080fd5b50610229610d8c565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610541575061054182610db0565b92915050565b6002805461055490612e23565b80601f016020809104026020016040519081016040528092919081815260200182805461058090612e23565b80156105cd5780601f106105a2576101008083540402835291602001916105cd565b820191906000526020600020905b8154815290600101906020018083116105b057829003601f168201915b505050505081565b61271081565b60009081526020819052604090206001015490565b6105f9826105db565b61060281610de2565b61060c8383610df3565b505050565b610619610e78565b6001600160a01b0316816001600160a01b0316146106525760405162461bcd60e51b815260040161064990612bf3565b60405180910390fd5b61065c8282610e7c565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061068e610e78565b90506106ba7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826109a6565b6106d65760405162461bcd60e51b815260040161064990612a39565b600082116106f65760405162461bcd60e51b815260040161064990612a96565b604051339083156108fc029084906000818181858888f19350505050158015610723573d6000803e3d6000fd5b5060006001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288360405161075e9190612991565b60405180910390a25050565b60036020526000908152604090205460ff1681565b60015481565b6107af7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826105f0565b50565b60006107bc610e78565b90506107e87f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826109a6565b6108045760405162461bcd60e51b815260040161064990612a39565b61060c6001600160a01b038416836000610eff565b6000610823610e78565b905061084f7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826109a6565b61086b5760405162461bcd60e51b815260040161064990612a39565b816108885760405162461bcd60e51b815260040161064990612b02565b600182905560405130907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9061075e908590612991565b601281565b60006108ce610e78565b90506108fa7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826109a6565b6109165760405162461bcd60e51b815260040161064990612a39565b600082116109365760405162461bcd60e51b815260040161064990612a96565b61094a6001600160a01b0384163384611027565b826001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28836040516109839190612991565b60405180910390a2505050565b600061099a610e78565b905061065c8282610611565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6c0c9f2c9cd04674edea4000000081565b600081565b6109ee826105db565b6109f781610de2565b61060c8383610e7c565b6107af7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826109e5565b6000610a35610e78565b9050610a617f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826109a6565b610a7d5760405162461bcd60e51b815260040161064990612a39565b60005b82811015610ad557610ac5848483818110610aab57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610ac0919061259b565b611046565b610ace81612e5e565b9050610a80565b50505050565b6000610ae5610e78565b9050610b117f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826109a6565b610b2d5760405162461bcd60e51b815260040161064990612a39565b60005b82811015610ad557600060036000868685818110610b5e57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610b73919061259b565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055610ba481612e5e565b9050610b30565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038416906370a0823190610bf390859060040161289e565b60206040518083038186803b158015610c0b57600080fd5b505afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c439190612729565b9050610c5286868686866110ee565b600081846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610c81919061289e565b60206040518083038186803b158015610c9957600080fd5b505afa158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd19190612729565b610cdb9190612dc9565b905085811015610cfd5760405162461bcd60e51b8152600401610649906129cd565b836001600160a01b0316856001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8989604051610d42929190612c50565b60405180910390a350505050505050565b6000610d608484846111cf565b90505b9392505050565b6000610d74610e78565b9050610d816000836105f0565b61065c600082610611565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b6001600160e01b031981167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6107af81610dee610e78565b6111f3565b610dfd82826109a6565b61065c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e34610e78565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b3390565b610e8682826109a6565b1561065c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055610ebb610e78565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b801580610fa057506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e90610f4e90309086906004016128b2565b60206040518083038186803b158015610f6657600080fd5b505afa158015610f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9e9190612729565b155b610fbc5760405162461bcd60e51b815260040161064990612b96565b61060c8363095ea7b360e01b8484604051602401610fdb92919061293d565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611257565b61060c8363a9059cbb60e01b8484604051602401610fdb92919061293d565b806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561107f57600080fd5b505afa158015611093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b791906127e0565b6001600160a01b03909116600090815260046020908152604080832060ff949094169093556003905220805460ff19166001179055565b6111226001600160a01b0384167f000000000000000000000000000000000000000000000000000000000000000087611027565b6040517f933162120000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063933162129061118b908690869030906004016128cc565b600060405180830381600087803b1580156111a557600080fd5b505af11580156111b9573d6000803e3d6000fd5b505050506111c882858361130d565b5050505050565b60006111dc848484611331565b15610d63576111ec848484611568565b9050610d63565b6111fd82826109a6565b61065c57611215816001600160a01b03166014611592565b611220836020611592565b60405160200161123192919061281d565b60408051601f198184030181529082905262461bcd60e51b82526106499160040161299a565b600080836001600160a01b0316836040516112729190612801565b6000604051808303816000865af19150503d80600081146112af576040519150601f19603f3d011682016040523d82523d6000602084013e6112b4565b606091505b5091509150816112d65760405162461bcd60e51b815260040161064990612acd565b805115610ad557808060200190518101906112f19190612689565b610ad55760405162461bcd60e51b815260040161064990612b39565b306001600160a01b0382161461060c5761060c6001600160a01b0384168284611027565b600083158015906113545750816001600160a01b0316836001600160a01b031614155b801561137857506001600160a01b03831660009081526003602052604090205460ff165b801561141b5750604051630daf9c2160e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063daf9c210906113cb90869060040161289e565b60206040518083038186803b1580156113e357600080fd5b505afa1580156113f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141b9190612689565b80156114be5750604051630daf9c2160e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063daf9c2109061146e90859060040161289e565b60206040518083038186803b15801561148657600080fd5b505afa15801561149a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114be9190612689565b801561155657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663351a964d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561151e57600080fd5b505afa158015611532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115569190612689565b8015610d605750610d60836001611789565b6000806000611578868686611831565b9150915061158885858484611881565b9695505050505050565b606060006115a1836002612daa565b6115ac906002612c5e565b67ffffffffffffffff8111156115d257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115fc576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061164157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061169a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006116be846002612daa565b6116c9906001612c5e565b90505b600181111561176a577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061171857634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061173c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361176381612e0c565b90506116cc565b508315610d635760405162461bcd60e51b815260040161064990612a04565b600081836001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016117d8919061289e565b60206040518083038186803b1580156117f057600080fd5b505afa158015611804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118289190612729565b10159392505050565b60008060008061184186866118cb565b9092509050806118518389612daa565b61185b9190612c76565b9350611868848787611a78565b9350611875878388611b5f565b92505050935093915050565b60008061188f868685611bb0565b9050600061189d8583611cf3565b905060006118ad88888785611d16565b905080156118bf575091506118c39050565b5050505b949350505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192957600080fd5b505afa15801561193d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611961919061270d565b6040516317e1d38560e11b81529091506001600160a01b03821690632fc3a70a906119989088906000906001908190600401612913565b60206040518083038186803b1580156119b057600080fd5b505afa1580156119c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e89190612729565b6040516317e1d38560e11b81529093506001600160a01b03821690632fc3a70a90611a1e90879060019081908190600401612913565b60206040518083038186803b158015611a3657600080fd5b505afa158015611a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6e9190612729565b9150509250929050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614611ad2576001600160a01b038416600090815260046020526040902054611ad5565b60125b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614611b30576001600160a01b038416600090815260046020526040902054611b33565b60125b9050611b4082600a612cdc565b611b4b82600a612cdc565b611b559088612daa565b6115889190612c76565b60006c0c9f2c9cd04674edea40000000611b798486612daa565b611b839190612c76565b9050610d6081837f0000000000000000000000000000000000000000000000000000000000000000611a78565b60007f000000000000000000000000000000000000000000000000000000000000000015611ce8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636abbe0c86040518163ffffffff1660e01b815260040160206040518083038186803b158015611c3157600080fd5b505afa158015611c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c69919061270d565b6001600160a01b031663da1338168585856040518463ffffffff1660e01b8152600401611c98939291906128ef565b60206040518083038186803b158015611cb057600080fd5b505afa158015611cc4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ec9190612729565b610d60848484611e13565b6000612710611d028382612dc9565b611d0c9085612daa565b610d639190612c76565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352f55eed866040518263ffffffff1660e01b8152600401611d65919061289e565b60206040518083038186803b158015611d7d57600080fd5b505afa158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db59190612729565b905082811015611dc95760009150506118c3565b6000611dd58483612dc9565b9050611de1818761233e565b158015611df55750611df381876123e7565b155b8015611e085750611e068588612436565b155b979650505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342b60b03866040518263ffffffff1660e01b8152600401611e62919061289e565b60206040518083038186803b158015611e7a57600080fd5b505afa158015611e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb29190612689565b8015611f6e57506040517f42b60b030000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342b60b0390611f1e90879060040161289e565b60206040518083038186803b158015611f3657600080fd5b505afa158015611f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6e9190612689565b905060008161200d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a22f23926040518163ffffffff1660e01b815260040160206040518083038186803b158015611fd057600080fd5b505afa158015611fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120089190612729565b61209e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df73a2676040518163ffffffff1660e01b815260040160206040518083038186803b15801561206657600080fd5b505afa15801561207a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209e9190612729565b905060008261213d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637a210a2b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561210057600080fd5b505afa158015612114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121389190612729565b6121ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310eb56c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561219657600080fd5b505afa1580156121aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ce9190612729565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c7e074c38988868660016040518663ffffffff1660e01b8152600401612227959493929190612956565b60206040518083038186803b15801561223f57600080fd5b505afa158015612253573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122779190612729565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c7e074c38989878760006040518663ffffffff1660e01b81526004016122d0959493929190612956565b60206040518083038186803b1580156122e857600080fd5b505afa1580156122fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123209190612729565b905080821161232f5780612331565b815b9998505050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c3c7b9e9846040518263ffffffff1660e01b815260040161238d919061289e565b60206040518083038186803b1580156123a557600080fd5b505afa1580156123b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dd9190612729565b9093109392505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634a993ee9846040518263ffffffff1660e01b815260040161238d919061289e565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad1e4f8d846040518263ffffffff1660e01b8152600401612485919061289e565b60206040518083038186803b15801561249d57600080fd5b505afa1580156124b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d59190612729565b9050806124e6576000915050610541565b6000847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631aa4ace5866040518263ffffffff1660e01b8152600401612535919061289e565b60206040518083038186803b15801561254d57600080fd5b505afa158015612561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125859190612729565b61258f9190612c5e565b91909111949350505050565b6000602082840312156125ac578081fd5b8135610d6381612e8f565b600080604083850312156125c9578081fd5b82356125d481612e8f565b915060208301356125e481612e8f565b809150509250929050565b60008060408385031215612601578182fd5b823561260c81612e8f565b946020939093013593505050565b6000806020838503121561262c578182fd5b823567ffffffffffffffff80821115612643578384fd5b818501915085601f830112612656578384fd5b813581811115612664578485fd5b8660208083028501011115612677578485fd5b60209290920196919550909350505050565b60006020828403121561269a578081fd5b81518015158114610d63578182fd5b6000602082840312156126ba578081fd5b5035919050565b600080604083850312156126d3578182fd5b8235915060208301356125e481612e8f565b6000602082840312156126f6578081fd5b81356001600160e01b031981168114610d63578182fd5b60006020828403121561271e578081fd5b8151610d6381612e8f565b60006020828403121561273a578081fd5b5051919050565b600080600060608486031215612755578081fd5b83359250602084013561276781612e8f565b9150604084013561277781612e8f565b809150509250925092565b600080600080600060a08688031215612799578081fd5b853594506020860135935060408601356127b281612e8f565b925060608601356127c281612e8f565b915060808601356127d281612e8f565b809150509295509295909350565b6000602082840312156127f1578081fd5b815160ff81168114610d63578182fd5b60008251612813818460208701612de0565b9190910192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351612855816017850160208801612de0565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612892816028840160208801612de0565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039490941684529115156020840152151560408301521515606082015260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039590951685526020850193909352604084019190915260608301521515608082015260a00190565b901515815260200190565b90815260200190565b60006020825282518060208401526129b9816040850160208701612de0565b601f01601f19169190910160400192915050565b60208082526017908201527f496e73756666696369656e7420616d6f756e742d6f7574000000000000000000604082015260600190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b60208082526028908201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160408201527f696e7461696e6572000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526014908201527f496e76616c6964206761732d657374696d617465000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b918252602082015260400190565b60008219821115612c7157612c71612e79565b500190565b600082612c9157634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611612ca85750612cd3565b818704821115612cba57612cba612e79565b80861615612cc757918102915b9490941c938002612c99565b94509492505050565b6000610d636000198484600082612cf557506001610d63565b81612d0257506000610d63565b8160018114612d185760028114612d2257612d4f565b6001915050610d63565b60ff841115612d3357612d33612e79565b6001841b915084821115612d4957612d49612e79565b50610d63565b5060208310610133831016604e8410600b8410161715612d82575081810a83811115612d7d57612d7d612e79565b610d63565b612d8f8484846001612c96565b808604821115612da157612da1612e79565b02949350505050565b6000816000190483118215151615612dc457612dc4612e79565b500290565b600082821015612ddb57612ddb612e79565b500390565b60005b83811015612dfb578181015183820152602001612de3565b83811115610ad55750506000910152565b600081612e1b57612e1b612e79565b506000190190565b600281046001821680612e3757607f821691505b60208210811415612e5857634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612e7257612e72612e79565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146107af57600080fdfea26469706673582212202a2c9f30ba627b483f047d7f4a6b78c49e31686a4468a42d552b593a0fb1854664736f6c63430008000033339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
  "deployedBytecode": "0x6080604052600436106101b05760003560e01c8063870d917c116100ec578063d8baf7cf1161008a578063eab90da611610064578063eab90da61461048e578063ef99893a146104ae578063f2fde38b146104ce578063f8742254146104ee576101b7565b8063d8baf7cf1461042e578063e2eba5f01461044e578063e98f45f01461046e576101b7565b806391d14854116100c657806391d14854146103c457806395082d25146103e4578063a217fddf146103f9578063d547741f1461040e576101b7565b8063870d917c1461036f5780638980f11f146103845780638bb9c5bf146103a4576101b7565b8063411557d11161015957806369cff80d1161013357806369cff80d146102fa5780636b453c1f1461030f5780637ae267731461032f57806384a33e631461034f576101b7565b8063411557d1146102985780634ebb7916146102ba57806367818e3d146102da576101b7565b8063248a9ca31161018a578063248a9ca3146102365780632f2ff15d1461025657806336568abe14610278576101b7565b806301ffc9a7146101bc57806306fdde03146101f2578063126082cf14610214576101b7565b366101b757005b600080fd5b3480156101c857600080fd5b506101dc6101d73660046126e5565b610503565b6040516101e99190612986565b60405180910390f35b3480156101fe57600080fd5b50610207610547565b6040516101e9919061299a565b34801561022057600080fd5b506102296105d5565b6040516101e99190612991565b34801561024257600080fd5b506102296102513660046126a9565b6105db565b34801561026257600080fd5b506102766102713660046126c1565b6105f0565b005b34801561028457600080fd5b506102766102933660046126c1565b610611565b3480156102a457600080fd5b506102ad610660565b6040516101e9919061289e565b3480156102c657600080fd5b506102766102d53660046126a9565b610684565b3480156102e657600080fd5b506101dc6102f536600461259b565b61076a565b34801561030657600080fd5b5061022961077f565b34801561031b57600080fd5b5061027661032a36600461259b565b610785565b34801561033b57600080fd5b5061027661034a3660046125b7565b6107b2565b34801561035b57600080fd5b5061027661036a3660046126a9565b610819565b34801561037b57600080fd5b506102296108bf565b34801561039057600080fd5b5061027661039f3660046125ef565b6108c4565b3480156103b057600080fd5b506102766103bf3660046126a9565b610990565b3480156103d057600080fd5b506101dc6103df3660046126c1565b6109a6565b3480156103f057600080fd5b506102296109cf565b34801561040557600080fd5b506102296109e0565b34801561041a57600080fd5b506102766104293660046126c1565b6109e5565b34801561043a57600080fd5b5061027661044936600461259b565b610a01565b34801561045a57600080fd5b5061027661046936600461261a565b610a2b565b34801561047a57600080fd5b5061027661048936600461261a565b610adb565b34801561049a57600080fd5b506102766104a9366004612782565b610bab565b3480156104ba57600080fd5b506102296104c9366004612741565b610d53565b3480156104da57600080fd5b506102766104e936600461259b565b610d6a565b3480156104fa57600080fd5b50610229610d8c565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610541575061054182610db0565b92915050565b6002805461055490612e23565b80601f016020809104026020016040519081016040528092919081815260200182805461058090612e23565b80156105cd5780601f106105a2576101008083540402835291602001916105cd565b820191906000526020600020905b8154815290600101906020018083116105b057829003601f168201915b505050505081565b61271081565b60009081526020819052604090206001015490565b6105f9826105db565b61060281610de2565b61060c8383610df3565b505050565b610619610e78565b6001600160a01b0316816001600160a01b0316146106525760405162461bcd60e51b815260040161064990612bf3565b60405180910390fd5b61065c8282610e7c565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061068e610e78565b90506106ba7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826109a6565b6106d65760405162461bcd60e51b815260040161064990612a39565b600082116106f65760405162461bcd60e51b815260040161064990612a96565b604051339083156108fc029084906000818181858888f19350505050158015610723573d6000803e3d6000fd5b5060006001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288360405161075e9190612991565b60405180910390a25050565b60036020526000908152604090205460ff1681565b60015481565b6107af7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826105f0565b50565b60006107bc610e78565b90506107e87f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826109a6565b6108045760405162461bcd60e51b815260040161064990612a39565b61060c6001600160a01b038416836000610eff565b6000610823610e78565b905061084f7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826109a6565b61086b5760405162461bcd60e51b815260040161064990612a39565b816108885760405162461bcd60e51b815260040161064990612b02565b600182905560405130907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9061075e908590612991565b601281565b60006108ce610e78565b90506108fa7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826109a6565b6109165760405162461bcd60e51b815260040161064990612a39565b600082116109365760405162461bcd60e51b815260040161064990612a96565b61094a6001600160a01b0384163384611027565b826001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28836040516109839190612991565b60405180910390a2505050565b600061099a610e78565b905061065c8282610611565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6c0c9f2c9cd04674edea4000000081565b600081565b6109ee826105db565b6109f781610de2565b61060c8383610e7c565b6107af7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826109e5565b6000610a35610e78565b9050610a617f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826109a6565b610a7d5760405162461bcd60e51b815260040161064990612a39565b60005b82811015610ad557610ac5848483818110610aab57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610ac0919061259b565b611046565b610ace81612e5e565b9050610a80565b50505050565b6000610ae5610e78565b9050610b117f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826109a6565b610b2d5760405162461bcd60e51b815260040161064990612a39565b60005b82811015610ad557600060036000868685818110610b5e57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610b73919061259b565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055610ba481612e5e565b9050610b30565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038416906370a0823190610bf390859060040161289e565b60206040518083038186803b158015610c0b57600080fd5b505afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c439190612729565b9050610c5286868686866110ee565b600081846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610c81919061289e565b60206040518083038186803b158015610c9957600080fd5b505afa158015610cad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd19190612729565b610cdb9190612dc9565b905085811015610cfd5760405162461bcd60e51b8152600401610649906129cd565b836001600160a01b0316856001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8989604051610d42929190612c50565b60405180910390a350505050505050565b6000610d608484846111cf565b90505b9392505050565b6000610d74610e78565b9050610d816000836105f0565b61065c600082610611565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b6001600160e01b031981167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b6107af81610dee610e78565b6111f3565b610dfd82826109a6565b61065c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e34610e78565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b3390565b610e8682826109a6565b1561065c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055610ebb610e78565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b801580610fa057506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e90610f4e90309086906004016128b2565b60206040518083038186803b158015610f6657600080fd5b505afa158015610f7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9e9190612729565b155b610fbc5760405162461bcd60e51b815260040161064990612b96565b61060c8363095ea7b360e01b8484604051602401610fdb92919061293d565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611257565b61060c8363a9059cbb60e01b8484604051602401610fdb92919061293d565b806001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561107f57600080fd5b505afa158015611093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b791906127e0565b6001600160a01b03909116600090815260046020908152604080832060ff949094169093556003905220805460ff19166001179055565b6111226001600160a01b0384167f000000000000000000000000000000000000000000000000000000000000000087611027565b6040517f933162120000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063933162129061118b908690869030906004016128cc565b600060405180830381600087803b1580156111a557600080fd5b505af11580156111b9573d6000803e3d6000fd5b505050506111c882858361130d565b5050505050565b60006111dc848484611331565b15610d63576111ec848484611568565b9050610d63565b6111fd82826109a6565b61065c57611215816001600160a01b03166014611592565b611220836020611592565b60405160200161123192919061281d565b60408051601f198184030181529082905262461bcd60e51b82526106499160040161299a565b600080836001600160a01b0316836040516112729190612801565b6000604051808303816000865af19150503d80600081146112af576040519150601f19603f3d011682016040523d82523d6000602084013e6112b4565b606091505b5091509150816112d65760405162461bcd60e51b815260040161064990612acd565b805115610ad557808060200190518101906112f19190612689565b610ad55760405162461bcd60e51b815260040161064990612b39565b306001600160a01b0382161461060c5761060c6001600160a01b0384168284611027565b600083158015906113545750816001600160a01b0316836001600160a01b031614155b801561137857506001600160a01b03831660009081526003602052604090205460ff165b801561141b5750604051630daf9c2160e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063daf9c210906113cb90869060040161289e565b60206040518083038186803b1580156113e357600080fd5b505afa1580156113f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141b9190612689565b80156114be5750604051630daf9c2160e41b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063daf9c2109061146e90859060040161289e565b60206040518083038186803b15801561148657600080fd5b505afa15801561149a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114be9190612689565b801561155657507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663351a964d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561151e57600080fd5b505afa158015611532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115569190612689565b8015610d605750610d60836001611789565b6000806000611578868686611831565b9150915061158885858484611881565b9695505050505050565b606060006115a1836002612daa565b6115ac906002612c5e565b67ffffffffffffffff8111156115d257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115fc576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061164157634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061169a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006116be846002612daa565b6116c9906001612c5e565b90505b600181111561176a577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061171857634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061173c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361176381612e0c565b90506116cc565b508315610d635760405162461bcd60e51b815260040161064990612a04565b600081836001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016117d8919061289e565b60206040518083038186803b1580156117f057600080fd5b505afa158015611804573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118289190612729565b10159392505050565b60008060008061184186866118cb565b9092509050806118518389612daa565b61185b9190612c76565b9350611868848787611a78565b9350611875878388611b5f565b92505050935093915050565b60008061188f868685611bb0565b9050600061189d8583611cf3565b905060006118ad88888785611d16565b905080156118bf575091506118c39050565b5050505b949350505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663741bef1a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192957600080fd5b505afa15801561193d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611961919061270d565b6040516317e1d38560e11b81529091506001600160a01b03821690632fc3a70a906119989088906000906001908190600401612913565b60206040518083038186803b1580156119b057600080fd5b505afa1580156119c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e89190612729565b6040516317e1d38560e11b81529093506001600160a01b03821690632fc3a70a90611a1e90879060019081908190600401612913565b60206040518083038186803b158015611a3657600080fd5b505afa158015611a4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6e9190612729565b9150509250929050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614611ad2576001600160a01b038416600090815260046020526040902054611ad5565b60125b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316846001600160a01b031614611b30576001600160a01b038416600090815260046020526040902054611b33565b60125b9050611b4082600a612cdc565b611b4b82600a612cdc565b611b559088612daa565b6115889190612c76565b60006c0c9f2c9cd04674edea40000000611b798486612daa565b611b839190612c76565b9050610d6081837f0000000000000000000000000000000000000000000000000000000000000000611a78565b60007f000000000000000000000000000000000000000000000000000000000000000015611ce8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636abbe0c86040518163ffffffff1660e01b815260040160206040518083038186803b158015611c3157600080fd5b505afa158015611c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c69919061270d565b6001600160a01b031663da1338168585856040518463ffffffff1660e01b8152600401611c98939291906128ef565b60206040518083038186803b158015611cb057600080fd5b505afa158015611cc4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ec9190612729565b610d60848484611e13565b6000612710611d028382612dc9565b611d0c9085612daa565b610d639190612c76565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352f55eed866040518263ffffffff1660e01b8152600401611d65919061289e565b60206040518083038186803b158015611d7d57600080fd5b505afa158015611d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db59190612729565b905082811015611dc95760009150506118c3565b6000611dd58483612dc9565b9050611de1818761233e565b158015611df55750611df381876123e7565b155b8015611e085750611e068588612436565b155b979650505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166342b60b03866040518263ffffffff1660e01b8152600401611e62919061289e565b60206040518083038186803b158015611e7a57600080fd5b505afa158015611e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb29190612689565b8015611f6e57506040517f42b60b030000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342b60b0390611f1e90879060040161289e565b60206040518083038186803b158015611f3657600080fd5b505afa158015611f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6e9190612689565b905060008161200d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a22f23926040518163ffffffff1660e01b815260040160206040518083038186803b158015611fd057600080fd5b505afa158015611fe4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120089190612729565b61209e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663df73a2676040518163ffffffff1660e01b815260040160206040518083038186803b15801561206657600080fd5b505afa15801561207a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209e9190612729565b905060008261213d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637a210a2b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561210057600080fd5b505afa158015612114573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121389190612729565b6121ce565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310eb56c26040518163ffffffff1660e01b815260040160206040518083038186803b15801561219657600080fd5b505afa1580156121aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ce9190612729565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c7e074c38988868660016040518663ffffffff1660e01b8152600401612227959493929190612956565b60206040518083038186803b15801561223f57600080fd5b505afa158015612253573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122779190612729565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c7e074c38989878760006040518663ffffffff1660e01b81526004016122d0959493929190612956565b60206040518083038186803b1580156122e857600080fd5b505afa1580156122fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123209190612729565b905080821161232f5780612331565b815b9998505050505050505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c3c7b9e9846040518263ffffffff1660e01b815260040161238d919061289e565b60206040518083038186803b1580156123a557600080fd5b505afa1580156123b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dd9190612729565b9093109392505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316634a993ee9846040518263ffffffff1660e01b815260040161238d919061289e565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ad1e4f8d846040518263ffffffff1660e01b8152600401612485919061289e565b60206040518083038186803b15801561249d57600080fd5b505afa1580156124b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d59190612729565b9050806124e6576000915050610541565b6000847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316631aa4ace5866040518263ffffffff1660e01b8152600401612535919061289e565b60206040518083038186803b15801561254d57600080fd5b505afa158015612561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125859190612729565b61258f9190612c5e565b91909111949350505050565b6000602082840312156125ac578081fd5b8135610d6381612e8f565b600080604083850312156125c9578081fd5b82356125d481612e8f565b915060208301356125e481612e8f565b809150509250929050565b60008060408385031215612601578182fd5b823561260c81612e8f565b946020939093013593505050565b6000806020838503121561262c578182fd5b823567ffffffffffffffff80821115612643578384fd5b818501915085601f830112612656578384fd5b813581811115612664578485fd5b8660208083028501011115612677578485fd5b60209290920196919550909350505050565b60006020828403121561269a578081fd5b81518015158114610d63578182fd5b6000602082840312156126ba578081fd5b5035919050565b600080604083850312156126d3578182fd5b8235915060208301356125e481612e8f565b6000602082840312156126f6578081fd5b81356001600160e01b031981168114610d63578182fd5b60006020828403121561271e578081fd5b8151610d6381612e8f565b60006020828403121561273a578081fd5b5051919050565b600080600060608486031215612755578081fd5b83359250602084013561276781612e8f565b9150604084013561277781612e8f565b809150509250925092565b600080600080600060a08688031215612799578081fd5b853594506020860135935060408601356127b281612e8f565b925060608601356127c281612e8f565b915060808601356127d281612e8f565b809150509295509295909350565b6000602082840312156127f1578081fd5b815160ff81168114610d63578182fd5b60008251612813818460208701612de0565b9190910192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351612855816017850160208801612de0565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612892816028840160208801612de0565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681529183166020830152909116604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039490941684529115156020840152151560408301521515606082015260800190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039590951685526020850193909352604084019190915260608301521515608082015260a00190565b901515815260200190565b90815260200190565b60006020825282518060208401526129b9816040850160208701612de0565b601f01601f19169190910160400192915050565b60208082526017908201527f496e73756666696369656e7420616d6f756e742d6f7574000000000000000000604082015260600190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b60208082526028908201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160408201527f696e7461696e6572000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526014908201527f496e76616c6964206761732d657374696d617465000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b918252602082015260400190565b60008219821115612c7157612c71612e79565b500190565b600082612c9157634e487b7160e01b81526012600452602481fd5b500490565b80825b6001808611612ca85750612cd3565b818704821115612cba57612cba612e79565b80861615612cc757918102915b9490941c938002612c99565b94509492505050565b6000610d636000198484600082612cf557506001610d63565b81612d0257506000610d63565b8160018114612d185760028114612d2257612d4f565b6001915050610d63565b60ff841115612d3357612d33612e79565b6001841b915084821115612d4957612d49612e79565b50610d63565b5060208310610133831016604e8410600b8410161715612d82575081810a83811115612d7d57612d7d612e79565b610d63565b612d8f8484846001612c96565b808604821115612da157612da1612e79565b02949350505050565b6000816000190483118215151615612dc457612dc4612e79565b500290565b600082821015612ddb57612ddb612e79565b500390565b60005b83811015612dfb578181015183820152602001612de3565b83811115610ad55750506000910152565b600081612e1b57612e1b612e79565b506000190190565b600281046001821680612e3757607f821691505b60208210811415612e5857634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612e7257612e72612e79565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146107af57600080fdfea26469706673582212202a2c9f30ba627b483f047d7f4a6b78c49e31686a4468a42d552b593a0fb1854664736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/adapters/GmxAdapter.sol:GmxAdapter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1452,
        "contract": "src/contracts/adapters/GmxAdapter.sol:GmxAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1454,
        "contract": "src/contracts/adapters/GmxAdapter.sol:GmxAdapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 9041,
        "contract": "src/contracts/adapters/GmxAdapter.sol:GmxAdapter",
        "label": "isPoolTkn",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9045,
        "contract": "src/contracts/adapters/GmxAdapter.sol:GmxAdapter",
        "label": "tokenDecimals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/adapters/GmxAdapter.sol:GmxAdapter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/adapters/GmxAdapter.sol:GmxAdapter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}