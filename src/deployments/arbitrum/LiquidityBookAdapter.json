{
  "address": "0xFCFa6855b3E79f1c3ae4314cC0e85f37DfA14B3F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowExternalPairs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allowIgnoredPairs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quoteGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_allowExternalPairs",
          "type": "bool"
        }
      ],
      "name": "setAllowExternalPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_allowIgnoredPairs",
          "type": "bool"
        }
      ],
      "name": "setAllowIgnoredPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quoteGasLimit",
          "type": "uint256"
        }
      ],
      "name": "setQuoteGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1b8e6e9cda54b50ba7109174c395b0184e7c3e4056df138c29a83e27b3ed042f",
  "receipt": {
    "to": null,
    "from": "0xd22044706DeA3c342f68396bEDBCf6a2536d951D",
    "contractAddress": "0xFCFa6855b3E79f1c3ae4314cC0e85f37DfA14B3F",
    "transactionIndex": 1,
    "gasUsed": "13820469",
    "logsBloom": "0x
    "blockHash": "0x6488f1d8f4f90aee12f0f6288af3b8063b41e3e6a33d405e23e59ac4a5d1c901",
    "transactionHash": "0x1b8e6e9cda54b50ba7109174c395b0184e7c3e4056df138c29a83e27b3ed042f",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 53908782,
        "transactionHash": "0x1b8e6e9cda54b50ba7109174c395b0184e7c3e4056df138c29a83e27b3ed042f",
        "address": "0xFCFa6855b3E79f1c3ae4314cC0e85f37DfA14B3F",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6488f1d8f4f90aee12f0f6288af3b8063b41e3e6a33d405e23e59ac4a5d1c901"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 53908782,
        "transactionHash": "0x1b8e6e9cda54b50ba7109174c395b0184e7c3e4056df138c29a83e27b3ed042f",
        "address": "0xFCFa6855b3E79f1c3ae4314cC0e85f37DfA14B3F",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x6488f1d8f4f90aee12f0f6288af3b8063b41e3e6a33d405e23e59ac4a5d1c901"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 53908782,
        "transactionHash": "0x1b8e6e9cda54b50ba7109174c395b0184e7c3e4056df138c29a83e27b3ed042f",
        "address": "0xFCFa6855b3E79f1c3ae4314cC0e85f37DfA14B3F",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x000000000000000000000000fcfa6855b3e79f1c3ae4314cc0e85f37dfa14b3f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000082b31",
        "logIndex": 2,
        "blockHash": "0x6488f1d8f4f90aee12f0f6288af3b8063b41e3e6a33d405e23e59ac4a5d1c901"
      }
    ],
    "blockNumber": 53908782,
    "cumulativeGasUsed": "13820469",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "LiquidityBookAdapter",
    535345,
    "0x7BFd7192E76D950832c77BB412aaE841049D8D9B"
  ],
  "solcInputHash": "2f7c552725bac4cbb59f7eeca6343ccc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowExternalPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowIgnoredPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowExternalPairs\",\"type\":\"bool\"}],\"name\":\"setAllowExternalPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_allowIgnoredPairs\",\"type\":\"bool\"}],\"name\":\"setAllowIgnoredPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quoteGasLimit\",\"type\":\"uint256\"}],\"name\":\"setQuoteGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/adapters/LBAdapter.sol\":\"LBAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IWETH.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\n\\nabstract contract YakAdapter is Maintainable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\\n    event Recovered(address indexed _asset, uint256 amount);\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n    uint256 public swapGasEstimate;\\n    string public name;\\n\\n    constructor(string memory _name, uint256 _gasEstimate) {\\n        setName(_name);\\n        setSwapGasEstimate(_gasEstimate);\\n    }\\n\\n    function setName(string memory _name) internal {\\n        require(bytes(_name).length != 0, \\\"Invalid adapter name\\\");\\n        name = _name;\\n    }\\n\\n    function setSwapGasEstimate(uint256 _estimate) public onlyMaintainer {\\n        require(_estimate != 0, \\\"Invalid gas-estimate\\\");\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    function revokeAllowance(address _token, address _spender) external onlyMaintainer {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\\n        require(_tokenAmount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\\n        require(_amount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (uint256) {\\n        return _query(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) external {\\n        uint256 toBal0 = IERC20(_toToken).balanceOf(_to);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBal0;\\n        require(diff >= _amountOut, \\\"Insufficient amount-out\\\");\\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\\n    }\\n\\n    function _returnTo(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual returns (uint256);\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xa4058929ff6bd42af6ad0fcae4b74531dfb5e9c2c3f2bdc1d933ba7b25165467\",\"license\":\"GPL-3.0-only\"},\"src/contracts/adapters/LBAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../YakAdapter.sol\\\";\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"../interface/ILBRouter.sol\\\";\\nimport \\\"../interface/ILBFactory.sol\\\";\\nimport \\\"../interface/ILBPair.sol\\\";\\n\\nstruct LBQuote {\\n    uint256 amountOut;\\n    address pair;\\n    bool swapForY;\\n}\\n\\ncontract LBAdapter is YakAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable FACTORY;\\n    address public immutable ROUTER;\\n    bool public allowIgnoredPairs = true;\\n    bool public allowExternalPairs = true;\\n    uint256 public quoteGasLimit = 600_000;\\n\\n    constructor(\\n        string memory _name,\\n        uint256 _swapGasEstimate,\\n        address _router\\n    ) YakAdapter(_name, _swapGasEstimate) {\\n        FACTORY = ILBRouter(_router).factory();\\n        ROUTER = _router;\\n    }\\n\\n    function setAllowIgnoredPairs(bool _allowIgnoredPairs) external onlyMaintainer {\\n        allowIgnoredPairs = _allowIgnoredPairs;\\n    }\\n\\n    function setAllowExternalPairs(bool _allowExternalPairs) external onlyMaintainer {\\n        allowExternalPairs = _allowExternalPairs;\\n    }\\n\\n    function setQuoteGasLimit(uint256 _quoteGasLimit) external onlyMaintainer {\\n        quoteGasLimit = _quoteGasLimit;\\n    }\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view override returns (uint256 amountOut) {\\n        (amountOut, , ) = _getBestQuote(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address to\\n    ) internal override {\\n        (uint256 amountOut, address pair, bool swapForY) = _getBestQuote(_amountIn, _tokenIn, _tokenOut);\\n        require(amountOut >= _minAmountOut, \\\"LBAdapter: insufficient amountOut received\\\");\\n        IERC20(_tokenIn).transfer(pair, _amountIn);\\n        ILBPair(pair).swap(swapForY, to);\\n    }\\n\\n    function _getBestQuote(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    )\\n        internal\\n        view\\n        returns (\\n            uint256 amountOut,\\n            address pair,\\n            bool swapForY\\n        )\\n    {\\n        ILBFactory.LBPairInformation[] memory LBPairsAvailable = ILBFactory(FACTORY).getAllLBPairs(_tokenIn, _tokenOut);\\n\\n        if (LBPairsAvailable.length > 0 && _amountIn > 0) {\\n            for (uint256 i; i < LBPairsAvailable.length; ++i) {\\n                if (!LBPairsAvailable[i].ignoredForRouting && !allowIgnoredPairs) {\\n                    continue;\\n                }\\n                if (!LBPairsAvailable[i].createdByOwner && !allowExternalPairs) {\\n                    continue;\\n                }\\n\\n                swapForY = ILBPair(LBPairsAvailable[i].LBPair).tokenY() == _tokenOut;\\n                uint256 swapAmountOut = getQuote(LBPairsAvailable[i].LBPair, _amountIn, swapForY);\\n\\n                if (swapAmountOut > amountOut) {\\n                    amountOut = swapAmountOut;\\n                    pair = LBPairsAvailable[i].LBPair;\\n                }\\n            }\\n        }\\n    }\\n\\n    function getQuote(\\n        address pair,\\n        uint256 amountIn,\\n        bool swapForY\\n    ) internal view returns (uint256 amountOut) {\\n        bytes memory calldata_ = abi.encodeWithSignature(\\\"getSwapOut(address,uint256,bool)\\\", pair, amountIn, swapForY);\\n        (bool success, bytes memory data) = ROUTER.staticcall{ gas: quoteGasLimit }(calldata_);\\n        if (success)\\n            assembly {\\n                amountOut := mload(add(data, 0x20))\\n            }\\n    }\\n}\\n\",\"keccak256\":\"0x2359d0e8a75e1f85d8de9ac9b7722a7c8406e6d66ee43f3fe03c059045cd38cf\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(address, address, uint256);\\n    event Transfer(address, address, uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\\n\\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\\n}\\n\",\"keccak256\":\"0xe5c96d567fa7105b50c9ca77735160db4ade2ea51703c066d02df4fca855a462\",\"license\":\"MIT\"},\"src/contracts/interface/ILBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILBFactory {\\n    struct LBPairInformation {\\n        uint24 binStep;\\n        address LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    function getAllLBPairs(address tokenX, address tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n}\\n\",\"keccak256\":\"0x2560927ecfe60287bc0fb7775098074a960da4bd891ca552a7fd1d09be77b874\",\"license\":\"MIT\"},\"src/contracts/interface/ILBPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILBPair {\\n    function tokenX() external view returns (address);\\n\\n    function tokenY() external view returns (address);\\n\\n    function swap(bool sentTokenY, address to) external returns (uint256 amountXOut, uint256 amountYOut);\\n}\\n\",\"keccak256\":\"0x6c5d73633594cc391acd7d0017f5102508252f1105c5dcf66413b2e5a28bcdad\",\"license\":\"MIT\"},\"src/contracts/interface/ILBRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface ILBRouter {\\n    function factory() external view returns (address);\\n\\n    function getSwapOut(\\n        address pair,\\n        uint256 amountIn,\\n        bool swapForY\\n    ) external view returns (uint256 amountOut, uint256 feesIn);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        address[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n}\\n\",\"keccak256\":\"0xc518da23b7af0012df40f75ff0e20237c56bae7eb94fd6799a00e393a2fcc963\",\"license\":\"MIT\"},\"src/contracts/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 amount) external;\\n\\n    function deposit() external payable;\\n}\\n\",\"keccak256\":\"0x7b31ca489d1bdf6631d5cf8c6f8ff9dc4a5c881d801a525f4e592a6884b9d2ad\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is Context, AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n        _setupRole(MAINTAINER_ROLE, msgSender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        address msgSender = _msgSender();\\n        renounceRole(role, msgSender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        address msgSender = _msgSender();\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        address msgSender = _msgSender();\\n        require(hasRole(MAINTAINER_ROLE, msgSender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcf17b3f89386f661ee6230c9774bc88a119f2385111279497bbb443209ad6bb2\",\"license\":\"MIT\"},\"src/contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d77601f615804eb7471002f23f9a4593f86ac295e7353c2e7545f51d4f81728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526003805461ff001960ff1990911660011716610100179055620927c06004553480156200003057600080fd5b50604051620027d1380380620027d18339810160408190526200005391620003d6565b82826000620000616200013c565b90506200007060008262000140565b6200008b600080516020620027b18339815191528262000140565b50620000978262000150565b620000a2816200018f565b5050806001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015620000de57600080fd5b505afa158015620000f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001199190620003b2565b6001600160601b0319606091821b811660805291901b1660a05250620005d49050565b3390565b6200014c82826200023c565b5050565b80516200017a5760405162461bcd60e51b815260040162000171906200050a565b60405180910390fd5b80516200014c906002906020840190620002ef565b60006200019b6200013c565b9050620001b8600080516020620027b183398151915282620002c6565b620001d75760405162461bcd60e51b81526004016200017190620004c2565b81620001f75760405162461bcd60e51b8152600401620001719062000541565b600182905560405130907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a906200023090859062000578565b60405180910390a25050565b620002488282620002c6565b6200014c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002826200013c565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b828054620002fd9062000581565b90600052602060002090601f0160209004810192826200032157600085556200036c565b82601f106200033c57805160ff19168380011785556200036c565b828001600101855582156200036c579182015b828111156200036c5782518255916020019190600101906200034f565b506200037a9291506200037e565b5090565b5b808211156200037a57600081556001016200037f565b80516001600160a01b0381168114620003ad57600080fd5b919050565b600060208284031215620003c4578081fd5b620003cf8262000395565b9392505050565b600080600060608486031215620003eb578182fd5b83516001600160401b038082111562000402578384fd5b818601915086601f83011262000416578384fd5b8151818111156200042b576200042b620005be565b6040516020601f8301601f1916820181018481118382101715620004535762000453620005be565b60405282825284830181018a10156200046a578687fd5b8693505b828410156200048d57848401810151828501820152928301926200046e565b828411156200049e57868184840101525b8801519096509450620004b992505060408601905062000395565b90509250925092565b60208082526028908201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160408201526734b73a30b4b732b960c11b606082015260800190565b60208082526014908201527f496e76616c69642061646170746572206e616d65000000000000000000000000604082015260600190565b60208082526014908201527f496e76616c6964206761732d657374696d617465000000000000000000000000604082015260600190565b90815260200190565b6002810460018216806200059657607f821691505b60208210811415620005b857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60805160601c60a05160601c6121a36200060e600039600081816106cf01526117f301526000818161068a01526112d501526121a36000f3fe6080604052600436106101bb5760003560e01c80637ae26773116100ec578063a217fddf1161008a578063eab90da611610064578063eab90da6146104ae578063ef99893a146104ce578063f2fde38b146104ee578063f87422541461050e576101c2565b8063a217fddf14610459578063d547741f1461046e578063d8baf7cf1461048e576101c2565b80638bb9c5bf116100c65780638bb9c5bf146103e45780638ffbc78d1461040457806391d148541461041957806397efe68c14610439576101c2565b80637ae267731461038457806384a33e63146103a45780638980f11f146103c4576101c2565b806332fe7b26116101595780634ebb7916116101335780634ebb79161461030f57806367b2634e1461032f57806369cff80d1461034f5780636b453c1f14610364576101c2565b806332fe7b26146102c557806336568abe146102da57806338d967a5146102fa576101c2565b806319549170116101955780631954917014610241578063248a9ca3146102635780632dd31000146102835780632f2ff15d146102a5576101c2565b806301ffc9a7146101c757806306fdde03146101fd57806314d4cddb1461021f576101c2565b366101c257005b600080fd5b3480156101d357600080fd5b506101e76101e2366004611ab6565b610523565b6040516101f49190611cbf565b60405180910390f35b34801561020957600080fd5b50610212610569565b6040516101f49190611cec565b34801561022b57600080fd5b506102346105f7565b6040516101f49190611ce3565b34801561024d57600080fd5b5061026161025c366004611a42565b6105fd565b005b34801561026f57600080fd5b5061023461027e366004611a7a565b610673565b34801561028f57600080fd5b50610298610688565b6040516101f49190611c55565b3480156102b157600080fd5b506102616102c0366004611a92565b6106ac565b3480156102d157600080fd5b506102986106cd565b3480156102e657600080fd5b506102616102f5366004611a92565b6106f1565b34801561030657600080fd5b506101e7610737565b34801561031b57600080fd5b5061026161032a366004611a7a565b610740565b34801561033b57600080fd5b5061026161034a366004611a7a565b610826565b34801561035b57600080fd5b5061023461087e565b34801561037057600080fd5b5061026161037f366004611888565b610884565b34801561039057600080fd5b5061026161039f3660046118c0565b6108b1565b3480156103b057600080fd5b506102616103bf366004611a7a565b610918565b3480156103d057600080fd5b506102616103df3660046118f8565b6109be565b3480156103f057600080fd5b506102616103ff366004611a7a565b610a8a565b34801561041057600080fd5b506101e7610aa0565b34801561042557600080fd5b506101e7610434366004611a92565b610aae565b34801561044557600080fd5b50610261610454366004611a42565b610ad7565b34801561046557600080fd5b50610234610b3d565b34801561047a57600080fd5b50610261610489366004611a92565b610b42565b34801561049a57600080fd5b506102616104a9366004611888565b610b5e565b3480156104ba57600080fd5b506102616104c9366004611b5a565b610b88565b3480156104da57600080fd5b506102346104e9366004611af6565b610d30565b3480156104fa57600080fd5b50610261610509366004611888565b610d45565b34801561051a57600080fd5b50610234610d67565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610561575061056182610d8b565b90505b919050565b60028054610576906120c8565b80601f01602080910402602001604051908101604052809291908181526020018280546105a2906120c8565b80156105ef5780601f106105c4576101008083540402835291602001916105ef565b820191906000526020600020905b8154815290600101906020018083116105d257829003601f168201915b505050505081565b60045481565b6000610607610dbd565b90506106337f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610aae565b6106585760405162461bcd60e51b815260040161064f90611de8565b60405180910390fd5b50600380549115156101000261ff0019909216919091179055565b60009081526020819052604090206001015490565b7f000000000000000000000000000000000000000000000000000000000000000081565b6106b582610673565b6106be81610dc1565b6106c88383610dd2565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6106f9610dbd565b6001600160a01b0316816001600160a01b0316146107295760405162461bcd60e51b815260040161064f90611fa2565b6107338282610e57565b5050565b60035460ff1681565b600061074a610dbd565b90506107767f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610aae565b6107925760405162461bcd60e51b815260040161064f90611de8565b600082116107b25760405162461bcd60e51b815260040161064f90611e45565b604051339083156108fc029084906000818181858888f193505050501580156107df573d6000803e3d6000fd5b5060006001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288360405161081a9190611ce3565b60405180910390a25050565b6000610830610dbd565b905061085c7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610aae565b6108785760405162461bcd60e51b815260040161064f90611de8565b50600455565b60015481565b6108ae7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826106ac565b50565b60006108bb610dbd565b90506108e77f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610aae565b6109035760405162461bcd60e51b815260040161064f90611de8565b6106c86001600160a01b038416836000610eda565b6000610922610dbd565b905061094e7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610aae565b61096a5760405162461bcd60e51b815260040161064f90611de8565b816109875760405162461bcd60e51b815260040161064f90611eb1565b600182905560405130907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9061081a908590611ce3565b60006109c8610dbd565b90506109f47f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610aae565b610a105760405162461bcd60e51b815260040161064f90611de8565b60008211610a305760405162461bcd60e51b815260040161064f90611e45565b610a446001600160a01b0384163384611002565b826001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2883604051610a7d9190611ce3565b60405180910390a2505050565b6000610a94610dbd565b905061073382826106f1565b600354610100900460ff1681565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610ae1610dbd565b9050610b0d7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610aae565b610b295760405162461bcd60e51b815260040161064f90611de8565b506003805460ff1916911515919091179055565b600081565b610b4b82610673565b610b5481610dc1565b6106c88383610e57565b6108ae7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610b42565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038416906370a0823190610bd0908590600401611c55565b60206040518083038186803b158015610be857600080fd5b505afa158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190611ade565b9050610c2f8686868686611021565b600081846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610c5e9190611c55565b60206040518083038186803b158015610c7657600080fd5b505afa158015610c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cae9190611ade565b610cb8919061206e565b905085811015610cda5760405162461bcd60e51b815260040161064f90611d1f565b836001600160a01b0316856001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8989604051610d1f929190611fff565b60405180910390a350505050505050565b6000610d3d848484611195565b949350505050565b6000610d4f610dbd565b9050610d5c6000836106ac565b6107336000826106f1565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b6001600160e01b031981167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b3390565b6108ae81610dcd610dbd565b6111ad565b610ddc8282610aae565b610733576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e13610dbd565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610e618282610aae565b15610733576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055610e96610dbd565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b801580610f7b57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e90610f299030908690600401611c69565b60206040518083038186803b158015610f4157600080fd5b505afa158015610f55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f799190611ade565b155b610f975760405162461bcd60e51b815260040161064f90611f45565b6106c88363095ea7b360e01b8484604051602401610fb6929190611c83565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611211565b6106c88363a9059cbb60e01b8484604051602401610fb6929190611c83565b60008060006110318887876112cd565b925092509250868310156110575760405162461bcd60e51b815260040161064f90611d8b565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063a9059cbb9061109e9085908c90600401611c83565b602060405180830381600087803b1580156110b857600080fd5b505af11580156110cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f09190611a5e565b506040517f53c059a00000000000000000000000000000000000000000000000000000000081526001600160a01b038316906353c059a0906111389084908890600401611cca565b6040805180830381600087803b15801561115157600080fd5b505af1158015611165573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111899190611b37565b50505050505050505050565b60006111a28484846112cd565b509095945050505050565b6111b78282610aae565b610733576111cf816001600160a01b0316601461156e565b6111da83602061156e565b6040516020016111eb929190611bd4565b60408051601f198184030181529082905262461bcd60e51b825261064f91600401611cec565b600080836001600160a01b03168360405161122c9190611bb8565b6000604051808303816000865af19150503d8060008114611269576040519150601f19603f3d011682016040523d82523d6000602084013e61126e565b606091505b5091509150816112905760405162461bcd60e51b815260040161064f90611e7c565b8051156112c757808060200190518101906112ab9190611a5e565b6112c75760405162461bcd60e51b815260040161064f90611ee8565b50505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636622e0d787876040518363ffffffff1660e01b8152600401611321929190611c69565b60006040518083038186803b15801561133957600080fd5b505afa15801561134d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113759190810190611923565b9050600081511180156113885750600087115b156115645760005b8151811015611562578181815181106113b957634e487b7160e01b600052603260045260246000fd5b6020026020010151606001511580156113d5575060035460ff16155b156113df57611552565b8181815181106113ff57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001511580156114205750600354610100900460ff16155b1561142a57611552565b856001600160a01b031682828151811061145457634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160a01b031663b7d19fc46040518163ffffffff1660e01b815260040160206040518083038186803b15801561149857600080fd5b505afa1580156114ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d091906118a4565b6001600160a01b0316149250600061151483838151811061150157634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518a8661176c565b9050858111156115505780955082828151811061154157634e487b7160e01b600052603260045260246000fd5b60200260200101516020015194505b505b61155b81612103565b9050611390565b505b5093509350939050565b6060600061157d83600261204f565b611588906002612037565b67ffffffffffffffff8111156115ae57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115d8576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061161d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061167657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061169a84600261204f565b6116a5906001612037565b90505b6001811115611746577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106116f457634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061171857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361173f816120b1565b90506116a8565b5083156117655760405162461bcd60e51b815260040161064f90611d56565b9392505050565b60008084848460405160240161178493929190611c9c565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f2004b72400000000000000000000000000000000000000000000000000000000179052600454905191925060009182916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169161181f908690611bb8565b6000604051808303818686fa925050503d806000811461185b576040519150601f19603f3d011682016040523d82523d6000602084013e611860565b606091505b5091509150811561187357602081015193505b5050509392505050565b80516105648161215f565b600060208284031215611899578081fd5b81356117658161214a565b6000602082840312156118b5578081fd5b81516117658161214a565b600080604083850312156118d2578081fd5b82356118dd8161214a565b915060208301356118ed8161214a565b809150509250929050565b6000806040838503121561190a578182fd5b82356119158161214a565b946020939093013593505050565b60006020808385031215611935578182fd5b825167ffffffffffffffff8082111561194c578384fd5b818501915085601f83011261195f578384fd5b81518181111561197157611971612134565b61197e848583020161200d565b818152848101908486016080808502870188018b101561199c578889fd5b8896505b84871015611a335780828c0312156119b6578889fd5b6040805182810181811089821117156119d1576119d1612134565b8252835162ffffff811681146119e5578b8cfd5b8152838a01516119f48161214a565b818b0152611a0384830161187d565b8282015260609150611a1682850161187d565b9181019190915284526001969096019592870192908101906119a0565b50909998505050505050505050565b600060208284031215611a53578081fd5b81356117658161215f565b600060208284031215611a6f578081fd5b81516117658161215f565b600060208284031215611a8b578081fd5b5035919050565b60008060408385031215611aa4578182fd5b8235915060208301356118ed8161214a565b600060208284031215611ac7578081fd5b81356001600160e01b031981168114611765578182fd5b600060208284031215611aef578081fd5b5051919050565b600080600060608486031215611b0a578081fd5b833592506020840135611b1c8161214a565b91506040840135611b2c8161214a565b809150509250925092565b60008060408385031215611b49578182fd5b505080516020909101519092909150565b600080600080600060a08688031215611b71578283fd5b85359450602086013593506040860135611b8a8161214a565b92506060860135611b9a8161214a565b91506080860135611baa8161214a565b809150509295509295909350565b60008251611bca818460208701612085565b9190910192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351611c0c816017850160208801612085565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611c49816028840160208801612085565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b901515815260200190565b91151582526001600160a01b0316602082015260400190565b90815260200190565b6000602082528251806020840152611d0b816040850160208701612085565b601f01601f19169190910160400192915050565b60208082526017908201527f496e73756666696369656e7420616d6f756e742d6f7574000000000000000000604082015260600190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252602a908201527f4c42416461707465723a20696e73756666696369656e7420616d6f756e744f7560408201527f7420726563656976656400000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160408201527f696e7461696e6572000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526014908201527f496e76616c6964206761732d657374696d617465000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561202f5761202f612134565b604052919050565b6000821982111561204a5761204a61211e565b500190565b60008160001904831182151516156120695761206961211e565b500290565b6000828210156120805761208061211e565b500390565b60005b838110156120a0578181015183820152602001612088565b838111156112c75750506000910152565b6000816120c0576120c061211e565b506000190190565b6002810460018216806120dc57607f821691505b602082108114156120fd57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156121175761211761211e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146108ae57600080fd5b80151581146108ae57600080fdfea2646970667358221220f684d7b73f56ff92bd6de8db8b49f852a59143aee550f9d17ce0ca1e9976c74c64736f6c63430008000033339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c80637ae26773116100ec578063a217fddf1161008a578063eab90da611610064578063eab90da6146104ae578063ef99893a146104ce578063f2fde38b146104ee578063f87422541461050e576101c2565b8063a217fddf14610459578063d547741f1461046e578063d8baf7cf1461048e576101c2565b80638bb9c5bf116100c65780638bb9c5bf146103e45780638ffbc78d1461040457806391d148541461041957806397efe68c14610439576101c2565b80637ae267731461038457806384a33e63146103a45780638980f11f146103c4576101c2565b806332fe7b26116101595780634ebb7916116101335780634ebb79161461030f57806367b2634e1461032f57806369cff80d1461034f5780636b453c1f14610364576101c2565b806332fe7b26146102c557806336568abe146102da57806338d967a5146102fa576101c2565b806319549170116101955780631954917014610241578063248a9ca3146102635780632dd31000146102835780632f2ff15d146102a5576101c2565b806301ffc9a7146101c757806306fdde03146101fd57806314d4cddb1461021f576101c2565b366101c257005b600080fd5b3480156101d357600080fd5b506101e76101e2366004611ab6565b610523565b6040516101f49190611cbf565b60405180910390f35b34801561020957600080fd5b50610212610569565b6040516101f49190611cec565b34801561022b57600080fd5b506102346105f7565b6040516101f49190611ce3565b34801561024d57600080fd5b5061026161025c366004611a42565b6105fd565b005b34801561026f57600080fd5b5061023461027e366004611a7a565b610673565b34801561028f57600080fd5b50610298610688565b6040516101f49190611c55565b3480156102b157600080fd5b506102616102c0366004611a92565b6106ac565b3480156102d157600080fd5b506102986106cd565b3480156102e657600080fd5b506102616102f5366004611a92565b6106f1565b34801561030657600080fd5b506101e7610737565b34801561031b57600080fd5b5061026161032a366004611a7a565b610740565b34801561033b57600080fd5b5061026161034a366004611a7a565b610826565b34801561035b57600080fd5b5061023461087e565b34801561037057600080fd5b5061026161037f366004611888565b610884565b34801561039057600080fd5b5061026161039f3660046118c0565b6108b1565b3480156103b057600080fd5b506102616103bf366004611a7a565b610918565b3480156103d057600080fd5b506102616103df3660046118f8565b6109be565b3480156103f057600080fd5b506102616103ff366004611a7a565b610a8a565b34801561041057600080fd5b506101e7610aa0565b34801561042557600080fd5b506101e7610434366004611a92565b610aae565b34801561044557600080fd5b50610261610454366004611a42565b610ad7565b34801561046557600080fd5b50610234610b3d565b34801561047a57600080fd5b50610261610489366004611a92565b610b42565b34801561049a57600080fd5b506102616104a9366004611888565b610b5e565b3480156104ba57600080fd5b506102616104c9366004611b5a565b610b88565b3480156104da57600080fd5b506102346104e9366004611af6565b610d30565b3480156104fa57600080fd5b50610261610509366004611888565b610d45565b34801561051a57600080fd5b50610234610d67565b60006001600160e01b031982167f7965db0b000000000000000000000000000000000000000000000000000000001480610561575061056182610d8b565b90505b919050565b60028054610576906120c8565b80601f01602080910402602001604051908101604052809291908181526020018280546105a2906120c8565b80156105ef5780601f106105c4576101008083540402835291602001916105ef565b820191906000526020600020905b8154815290600101906020018083116105d257829003601f168201915b505050505081565b60045481565b6000610607610dbd565b90506106337f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610aae565b6106585760405162461bcd60e51b815260040161064f90611de8565b60405180910390fd5b50600380549115156101000261ff0019909216919091179055565b60009081526020819052604090206001015490565b7f000000000000000000000000000000000000000000000000000000000000000081565b6106b582610673565b6106be81610dc1565b6106c88383610dd2565b505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6106f9610dbd565b6001600160a01b0316816001600160a01b0316146107295760405162461bcd60e51b815260040161064f90611fa2565b6107338282610e57565b5050565b60035460ff1681565b600061074a610dbd565b90506107767f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610aae565b6107925760405162461bcd60e51b815260040161064f90611de8565b600082116107b25760405162461bcd60e51b815260040161064f90611e45565b604051339083156108fc029084906000818181858888f193505050501580156107df573d6000803e3d6000fd5b5060006001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288360405161081a9190611ce3565b60405180910390a25050565b6000610830610dbd565b905061085c7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610aae565b6108785760405162461bcd60e51b815260040161064f90611de8565b50600455565b60015481565b6108ae7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826106ac565b50565b60006108bb610dbd565b90506108e77f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610aae565b6109035760405162461bcd60e51b815260040161064f90611de8565b6106c86001600160a01b038416836000610eda565b6000610922610dbd565b905061094e7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610aae565b61096a5760405162461bcd60e51b815260040161064f90611de8565b816109875760405162461bcd60e51b815260040161064f90611eb1565b600182905560405130907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9061081a908590611ce3565b60006109c8610dbd565b90506109f47f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610aae565b610a105760405162461bcd60e51b815260040161064f90611de8565b60008211610a305760405162461bcd60e51b815260040161064f90611e45565b610a446001600160a01b0384163384611002565b826001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2883604051610a7d9190611ce3565b60405180910390a2505050565b6000610a94610dbd565b905061073382826106f1565b600354610100900460ff1681565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610ae1610dbd565b9050610b0d7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610aae565b610b295760405162461bcd60e51b815260040161064f90611de8565b506003805460ff1916911515919091179055565b600081565b610b4b82610673565b610b5481610dc1565b6106c88383610e57565b6108ae7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610b42565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526000906001600160a01b038416906370a0823190610bd0908590600401611c55565b60206040518083038186803b158015610be857600080fd5b505afa158015610bfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c209190611ade565b9050610c2f8686868686611021565b600081846001600160a01b03166370a08231856040518263ffffffff1660e01b8152600401610c5e9190611c55565b60206040518083038186803b158015610c7657600080fd5b505afa158015610c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cae9190611ade565b610cb8919061206e565b905085811015610cda5760405162461bcd60e51b815260040161064f90611d1f565b836001600160a01b0316856001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8989604051610d1f929190611fff565b60405180910390a350505050505050565b6000610d3d848484611195565b949350505050565b6000610d4f610dbd565b9050610d5c6000836106ac565b6107336000826106f1565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b6001600160e01b031981167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b3390565b6108ae81610dcd610dbd565b6111ad565b610ddc8282610aae565b610733576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610e13610dbd565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610e618282610aae565b15610733576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055610e96610dbd565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b801580610f7b57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e90610f299030908690600401611c69565b60206040518083038186803b158015610f4157600080fd5b505afa158015610f55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f799190611ade565b155b610f975760405162461bcd60e51b815260040161064f90611f45565b6106c88363095ea7b360e01b8484604051602401610fb6929190611c83565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611211565b6106c88363a9059cbb60e01b8484604051602401610fb6929190611c83565b60008060006110318887876112cd565b925092509250868310156110575760405162461bcd60e51b815260040161064f90611d8b565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0387169063a9059cbb9061109e9085908c90600401611c83565b602060405180830381600087803b1580156110b857600080fd5b505af11580156110cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f09190611a5e565b506040517f53c059a00000000000000000000000000000000000000000000000000000000081526001600160a01b038316906353c059a0906111389084908890600401611cca565b6040805180830381600087803b15801561115157600080fd5b505af1158015611165573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111899190611b37565b50505050505050505050565b60006111a28484846112cd565b509095945050505050565b6111b78282610aae565b610733576111cf816001600160a01b0316601461156e565b6111da83602061156e565b6040516020016111eb929190611bd4565b60408051601f198184030181529082905262461bcd60e51b825261064f91600401611cec565b600080836001600160a01b03168360405161122c9190611bb8565b6000604051808303816000865af19150503d8060008114611269576040519150601f19603f3d011682016040523d82523d6000602084013e61126e565b606091505b5091509150816112905760405162461bcd60e51b815260040161064f90611e7c565b8051156112c757808060200190518101906112ab9190611a5e565b6112c75760405162461bcd60e51b815260040161064f90611ee8565b50505050565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636622e0d787876040518363ffffffff1660e01b8152600401611321929190611c69565b60006040518083038186803b15801561133957600080fd5b505afa15801561134d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113759190810190611923565b9050600081511180156113885750600087115b156115645760005b8151811015611562578181815181106113b957634e487b7160e01b600052603260045260246000fd5b6020026020010151606001511580156113d5575060035460ff16155b156113df57611552565b8181815181106113ff57634e487b7160e01b600052603260045260246000fd5b6020026020010151604001511580156114205750600354610100900460ff16155b1561142a57611552565b856001600160a01b031682828151811061145457634e487b7160e01b600052603260045260246000fd5b6020026020010151602001516001600160a01b031663b7d19fc46040518163ffffffff1660e01b815260040160206040518083038186803b15801561149857600080fd5b505afa1580156114ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d091906118a4565b6001600160a01b0316149250600061151483838151811061150157634e487b7160e01b600052603260045260246000fd5b6020026020010151602001518a8661176c565b9050858111156115505780955082828151811061154157634e487b7160e01b600052603260045260246000fd5b60200260200101516020015194505b505b61155b81612103565b9050611390565b505b5093509350939050565b6060600061157d83600261204f565b611588906002612037565b67ffffffffffffffff8111156115ae57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156115d8576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061161d57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061167657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061169a84600261204f565b6116a5906001612037565b90505b6001811115611746577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106116f457634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061171857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361173f816120b1565b90506116a8565b5083156117655760405162461bcd60e51b815260040161064f90611d56565b9392505050565b60008084848460405160240161178493929190611c9c565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f2004b72400000000000000000000000000000000000000000000000000000000179052600454905191925060009182916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169161181f908690611bb8565b6000604051808303818686fa925050503d806000811461185b576040519150601f19603f3d011682016040523d82523d6000602084013e611860565b606091505b5091509150811561187357602081015193505b5050509392505050565b80516105648161215f565b600060208284031215611899578081fd5b81356117658161214a565b6000602082840312156118b5578081fd5b81516117658161214a565b600080604083850312156118d2578081fd5b82356118dd8161214a565b915060208301356118ed8161214a565b809150509250929050565b6000806040838503121561190a578182fd5b82356119158161214a565b946020939093013593505050565b60006020808385031215611935578182fd5b825167ffffffffffffffff8082111561194c578384fd5b818501915085601f83011261195f578384fd5b81518181111561197157611971612134565b61197e848583020161200d565b818152848101908486016080808502870188018b101561199c578889fd5b8896505b84871015611a335780828c0312156119b6578889fd5b6040805182810181811089821117156119d1576119d1612134565b8252835162ffffff811681146119e5578b8cfd5b8152838a01516119f48161214a565b818b0152611a0384830161187d565b8282015260609150611a1682850161187d565b9181019190915284526001969096019592870192908101906119a0565b50909998505050505050505050565b600060208284031215611a53578081fd5b81356117658161215f565b600060208284031215611a6f578081fd5b81516117658161215f565b600060208284031215611a8b578081fd5b5035919050565b60008060408385031215611aa4578182fd5b8235915060208301356118ed8161214a565b600060208284031215611ac7578081fd5b81356001600160e01b031981168114611765578182fd5b600060208284031215611aef578081fd5b5051919050565b600080600060608486031215611b0a578081fd5b833592506020840135611b1c8161214a565b91506040840135611b2c8161214a565b809150509250925092565b60008060408385031215611b49578182fd5b505080516020909101519092909150565b600080600080600060a08688031215611b71578283fd5b85359450602086013593506040860135611b8a8161214a565b92506060860135611b9a8161214a565b91506080860135611baa8161214a565b809150509295509295909350565b60008251611bca818460208701612085565b9190910192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351611c0c816017850160208801612085565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611c49816028840160208801612085565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b901515815260200190565b91151582526001600160a01b0316602082015260400190565b90815260200190565b6000602082528251806020840152611d0b816040850160208701612085565b601f01601f19169190910160400192915050565b60208082526017908201527f496e73756666696369656e7420616d6f756e742d6f7574000000000000000000604082015260600190565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252602a908201527f4c42416461707465723a20696e73756666696369656e7420616d6f756e744f7560408201527f7420726563656976656400000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160408201527f696e7461696e6572000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526014908201527f496e76616c6964206761732d657374696d617465000000000000000000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b918252602082015260400190565b60405181810167ffffffffffffffff8111828210171561202f5761202f612134565b604052919050565b6000821982111561204a5761204a61211e565b500190565b60008160001904831182151516156120695761206961211e565b500290565b6000828210156120805761208061211e565b500390565b60005b838110156120a0578181015183820152602001612088565b838111156112c75750506000910152565b6000816120c0576120c061211e565b506000190190565b6002810460018216806120dc57607f821691505b602082108114156120fd57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156121175761211761211e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146108ae57600080fd5b80151581146108ae57600080fdfea2646970667358221220f684d7b73f56ff92bd6de8db8b49f852a59143aee550f9d17ce0ca1e9976c74c64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/adapters/LBAdapter.sol:LBAdapter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1452,
        "contract": "src/contracts/adapters/LBAdapter.sol:LBAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1454,
        "contract": "src/contracts/adapters/LBAdapter.sol:LBAdapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 10640,
        "contract": "src/contracts/adapters/LBAdapter.sol:LBAdapter",
        "label": "allowIgnoredPairs",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 10643,
        "contract": "src/contracts/adapters/LBAdapter.sol:LBAdapter",
        "label": "allowExternalPairs",
        "offset": 1,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 10646,
        "contract": "src/contracts/adapters/LBAdapter.sol:LBAdapter",
        "label": "quoteGasLimit",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/adapters/LBAdapter.sol:LBAdapter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/adapters/LBAdapter.sol:LBAdapter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}