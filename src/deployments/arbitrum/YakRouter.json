{
  "address": "0x396a260016Af0FFD5bFfeefBCeC6B2c7d07533aD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_adapters",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_trustedTokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_feeClaimer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wrapped_native",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newAdapters",
          "type": "address[]"
        }
      ],
      "name": "UpdatedAdapters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_oldFeeClaimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newFeeClaimer",
          "type": "address"
        }
      ],
      "name": "UpdatedFeeClaimer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldMinFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newMinFee",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMinFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "_newTrustedTokens",
          "type": "address[]"
        }
      ],
      "name": "UpdatedTrustedTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakSwap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ADAPTERS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_CLAIMER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "TRUSTED_TOKENS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WNATIVE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adaptersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxSteps",
          "type": "uint256"
        }
      ],
      "name": "findBestPath",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            }
          ],
          "internalType": "struct YakRouter.FormattedOffer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxSteps",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasPrice",
          "type": "uint256"
        }
      ],
      "name": "findBestPathWithGas",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "gasEstimate",
              "type": "uint256"
            }
          ],
          "internalType": "struct YakRouter.FormattedOffer",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        }
      ],
      "name": "queryAdapter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "_options",
          "type": "uint8[]"
        }
      ],
      "name": "queryNoSplit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "adapter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct YakRouter.Query",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "queryNoSplit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "adapter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct YakRouter.Query",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_adapters",
          "type": "address[]"
        }
      ],
      "name": "setAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimer",
          "type": "address"
        }
      ],
      "name": "setFeeClaimer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setMinFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_trustedTokens",
          "type": "address[]"
        }
      ],
      "name": "setTrustedTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            }
          ],
          "internalType": "struct YakRouter.Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "swapNoSplit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            }
          ],
          "internalType": "struct YakRouter.Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "swapNoSplitFromAVAX",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            }
          ],
          "internalType": "struct YakRouter.Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "swapNoSplitToAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            }
          ],
          "internalType": "struct YakRouter.Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "swapNoSplitToAVAXWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "adapters",
              "type": "address[]"
            }
          ],
          "internalType": "struct YakRouter.Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "swapNoSplitWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trustedTokensCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd17f198a38b6419038c5e7cafeda34fa3192ce7dfcaf02f30e58736dba421cff",
  "receipt": {
    "to": null,
    "from": "0xd22044706DeA3c342f68396bEDBCf6a2536d951D",
    "contractAddress": "0x396a260016Af0FFD5bFfeefBCeC6B2c7d07533aD",
    "transactionIndex": 1,
    "gasUsed": "23071699",
    "logsBloom": "0x
    "blockHash": "0xa2cd8d1015d26da51ee1060d712416b4eecc0250aee7f9f4ecb4f80aa6a16384",
    "transactionHash": "0xd17f198a38b6419038c5e7cafeda34fa3192ce7dfcaf02f30e58736dba421cff",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 53913846,
        "transactionHash": "0xd17f198a38b6419038c5e7cafeda34fa3192ce7dfcaf02f30e58736dba421cff",
        "address": "0x396a260016Af0FFD5bFfeefBCeC6B2c7d07533aD",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa2cd8d1015d26da51ee1060d712416b4eecc0250aee7f9f4ecb4f80aa6a16384"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 53913846,
        "transactionHash": "0xd17f198a38b6419038c5e7cafeda34fa3192ce7dfcaf02f30e58736dba421cff",
        "address": "0x396a260016Af0FFD5bFfeefBCeC6B2c7d07533aD",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa2cd8d1015d26da51ee1060d712416b4eecc0250aee7f9f4ecb4f80aa6a16384"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 53913846,
        "transactionHash": "0xd17f198a38b6419038c5e7cafeda34fa3192ce7dfcaf02f30e58736dba421cff",
        "address": "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000396a260016af0ffd5bffeefbcec6b2c7d07533ad",
          "0x00000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab1"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xa2cd8d1015d26da51ee1060d712416b4eecc0250aee7f9f4ecb4f80aa6a16384"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 53913846,
        "transactionHash": "0xd17f198a38b6419038c5e7cafeda34fa3192ce7dfcaf02f30e58736dba421cff",
        "address": "0x396a260016Af0FFD5bFfeefBCeC6B2c7d07533aD",
        "topics": [
          "0x658ff1688002926d8f426cb10c052ec29003f50042df9652d8613484c1a58647"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000500000000000000000000000082af49447d8a07e3bd95bd0d56f35241523fbab10000000000000000000000002f2a2543b76a4166549f7aab2e75bef0aefc5b0f000000000000000000000000ff970a61a04b1ca14834a43f5de4533ebddb5cc8000000000000000000000000fd086bc7cd5c481dcc9c85ebe478a1c0b69fcbb9000000000000000000000000da10009cbd5d07dd0cecc66161fc93d7c9000da1",
        "logIndex": 3,
        "blockHash": "0xa2cd8d1015d26da51ee1060d712416b4eecc0250aee7f9f4ecb4f80aa6a16384"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 53913846,
        "transactionHash": "0xd17f198a38b6419038c5e7cafeda34fa3192ce7dfcaf02f30e58736dba421cff",
        "address": "0x396a260016Af0FFD5bFfeefBCeC6B2c7d07533aD",
        "topics": [
          "0xb2c853ac4d80d18d058c43d8018d077a036e542a79acae1647f5ad2a8c76f4e2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d",
        "logIndex": 4,
        "blockHash": "0xa2cd8d1015d26da51ee1060d712416b4eecc0250aee7f9f4ecb4f80aa6a16384"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 53913846,
        "transactionHash": "0xd17f198a38b6419038c5e7cafeda34fa3192ce7dfcaf02f30e58736dba421cff",
        "address": "0x396a260016Af0FFD5bFfeefBCeC6B2c7d07533aD",
        "topics": [
          "0xebf7325f48e05e5e38809c69f8b02a7c907ed31d8768e6c2d841b1296a9225fe"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000012000000000000000000000000972b5aa054f8d21f3f2a9e928e26b3dacf99b44f000000000000000000000000a7aa3581b486b865d03a5a896a44eb9fe27eb909000000000000000000000000985d014da6e6c781ec3ff77e8fd48c30174f3d96000000000000000000000000cc8ecd1c017b68ae336bbc2883d54400d22e6deb000000000000000000000000bf042126c0c0d2c658915c2d21922d3440092f48000000000000000000000000784e00cd961a994eff675e889af6ca564689bf390000000000000000000000005f030dc08eea2abfcc497f3c5351746dac971ad20000000000000000000000001d3e01bd14214fe3cd10904690dfa908c23b37a1000000000000000000000000b60ce5bf2a231eda70825f9cdcd0795102218ab00000000000000000000000004aff45ce2e48c159147fa7dd5b436cafd9688eba0000000000000000000000008fc296f44017b50ccaafb2e002d590c2e09873630000000000000000000000003b2378a29f9cbdb1f20a72611c0f000af05630cb000000000000000000000000610460dab540dae1eb84c22ea97866bfc0482c3f000000000000000000000000c5b9041f9748a9a4437ba90f9806ce8c3f9085fc000000000000000000000000fcfa6855b3e79f1c3ae4314cc0e85f37dfa14b3f0000000000000000000000000fdf64b6746ba759d120e973c85349a8b9cde8d40000000000000000000000004a6c794192831fb9f4782e61bec05d6c5cc9f3ea000000000000000000000000f558c5bb5c77f658453dd4baf74b69f2add3d934",
        "logIndex": 5,
        "blockHash": "0xa2cd8d1015d26da51ee1060d712416b4eecc0250aee7f9f4ecb4f80aa6a16384"
      }
    ],
    "blockNumber": 53913846,
    "cumulativeGasUsed": "23071699",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0x972B5AA054F8d21f3F2a9e928e26b3Dacf99B44F",
      "0xA7aA3581b486B865D03a5a896A44EB9Fe27eb909",
      "0x985d014DA6e6C781ec3FF77E8Fd48c30174F3d96",
      "0xCC8ecD1C017b68aE336bbc2883d54400d22E6DEb",
      "0xbf042126c0C0D2c658915C2d21922D3440092F48",
      "0x784E00Cd961a994eff675E889AF6CA564689BF39",
      "0x5F030dC08EeA2AbFcc497f3c5351746daC971ad2",
      "0x1d3E01bD14214fE3cd10904690DFa908C23b37A1",
      "0xb60CE5bF2A231EDA70825f9cdcD0795102218ab0",
      "0x4aFF45Ce2E48C159147fa7Dd5b436CafD9688eba",
      "0x8Fc296F44017B50ccaAfB2E002d590C2E0987363",
      "0x3b2378a29F9CbDb1f20A72611C0f000aF05630cb",
      "0x610460dAB540dAE1eb84C22ea97866BFc0482c3F",
      "0xc5b9041F9748A9A4437Ba90f9806cE8c3F9085Fc",
      "0xFCFa6855b3E79f1c3ae4314cC0e85f37DfA14B3F",
      "0x0FdF64B6746BA759d120e973C85349a8B9CdE8D4",
      "0x4a6c794192831fB9F4782E61Bec05d6C5cC9F3eA",
      "0xf558C5Bb5C77f658453dD4baF74B69F2aDd3d934"
    ],
    [
      "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
      "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
      "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
      "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
      "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1"
    ],
    "0xd22044706DeA3c342f68396bEDBCf6a2536d951D",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1"
  ],
  "solcInputHash": "2f7c552725bac4cbb59f7eeca6343ccc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_trustedTokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_feeClaimer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wrapped_native\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newAdapters\",\"type\":\"address[]\"}],\"name\":\"UpdatedAdapters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldFeeClaimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFeeClaimer\",\"type\":\"address\"}],\"name\":\"UpdatedFeeClaimer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldMinFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newMinFee\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_newTrustedTokens\",\"type\":\"address[]\"}],\"name\":\"UpdatedTrustedTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakSwap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ADAPTERS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_CLAIMER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"TRUSTED_TOKENS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WNATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adaptersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSteps\",\"type\":\"uint256\"}],\"name\":\"findBestPath\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"internalType\":\"struct YakRouter.FormattedOffer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSteps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasPrice\",\"type\":\"uint256\"}],\"name\":\"findBestPathWithGas\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"gasEstimate\",\"type\":\"uint256\"}],\"internalType\":\"struct YakRouter.FormattedOffer\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"queryAdapter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"_options\",\"type\":\"uint8[]\"}],\"name\":\"queryNoSplit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct YakRouter.Query\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"queryNoSplit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct YakRouter.Query\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_adapters\",\"type\":\"address[]\"}],\"name\":\"setAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimer\",\"type\":\"address\"}],\"name\":\"setFeeClaimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setMinFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_trustedTokens\",\"type\":\"address[]\"}],\"name\":\"setTrustedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct YakRouter.Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"swapNoSplit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct YakRouter.Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"swapNoSplitFromAVAX\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct YakRouter.Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"swapNoSplitToAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct YakRouter.Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"swapNoSplitToAVAXWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"internalType\":\"struct YakRouter.Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"swapNoSplitWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedTokensCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"findBestPath(uint256,address,address,uint256)\":{\"notice\":\"Return path with best returns between two tokens\"},\"findBestPathWithGas(uint256,address,address,uint256,uint256)\":{\"notice\":\"Return path with best returns between two tokens Takes gas-cost into account\"},\"queryAdapter(uint256,address,address,uint8)\":{\"notice\":\"Query single adapter\"},\"queryNoSplit(uint256,address,address)\":{\"notice\":\"Query all adapters\"},\"queryNoSplit(uint256,address,address,uint8[])\":{\"notice\":\"Query specified adapters\"},\"swapNoSplitToAVAXWithPermit((uint256,uint256,address[],address[]),address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Swap token to AVAX without the need to approve the first token\"},\"swapNoSplitWithPermit((uint256,uint256,address[],address[]),address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Swap token to token without the need to approve the first token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/YakRouter.sol\":\"YakRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/YakRouter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/BytesManipulation.sol\\\";\\nimport \\\"./interface/IAdapter.sol\\\";\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IWETH.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\n\\ncontract YakRouter is Maintainable {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable WNATIVE;\\n    address public constant NATIVE = address(0);\\n    string public constant NAME = \\\"YakRouter\\\";\\n    uint256 public constant FEE_DENOMINATOR = 1e4;\\n    uint256 public MIN_FEE = 0;\\n    address public FEE_CLAIMER;\\n    address[] public TRUSTED_TOKENS;\\n    address[] public ADAPTERS;\\n\\n    event Recovered(address indexed _asset, uint256 amount);\\n    event UpdatedTrustedTokens(address[] _newTrustedTokens);\\n    event UpdatedAdapters(address[] _newAdapters);\\n    event UpdatedMinFee(uint256 _oldMinFee, uint256 _newMinFee);\\n    event UpdatedFeeClaimer(address _oldFeeClaimer, address _newFeeClaimer);\\n    event YakSwap(address indexed _tokenIn, address indexed _tokenOut, uint256 _amountIn, uint256 _amountOut);\\n\\n    struct Query {\\n        address adapter;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountOut;\\n    }\\n\\n    struct Offer {\\n        bytes amounts;\\n        bytes adapters;\\n        bytes path;\\n        uint256 gasEstimate;\\n    }\\n\\n    struct FormattedOffer {\\n        uint256[] amounts;\\n        address[] adapters;\\n        address[] path;\\n        uint256 gasEstimate;\\n    }\\n\\n    struct Trade {\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address[] path;\\n        address[] adapters;\\n    }\\n\\n    constructor(\\n        address[] memory _adapters,\\n        address[] memory _trustedTokens,\\n        address _feeClaimer,\\n        address _wrapped_native\\n    ) {\\n        _setAllowanceForWrapping(_wrapped_native);\\n        setTrustedTokens(_trustedTokens);\\n        setFeeClaimer(_feeClaimer);\\n        setAdapters(_adapters);\\n        WNATIVE = _wrapped_native;\\n    }\\n\\n    // -- SETTERS --\\n\\n    function _setAllowanceForWrapping(address _wnative) internal {\\n        IERC20(_wnative).safeApprove(_wnative, type(uint256).max);\\n    }\\n\\n    function setTrustedTokens(address[] memory _trustedTokens) public onlyMaintainer {\\n        emit UpdatedTrustedTokens(_trustedTokens);\\n        TRUSTED_TOKENS = _trustedTokens;\\n    }\\n\\n    function setAdapters(address[] memory _adapters) public onlyMaintainer {\\n        emit UpdatedAdapters(_adapters);\\n        ADAPTERS = _adapters;\\n    }\\n\\n    function setMinFee(uint256 _fee) external onlyMaintainer {\\n        emit UpdatedMinFee(MIN_FEE, _fee);\\n        MIN_FEE = _fee;\\n    }\\n\\n    function setFeeClaimer(address _claimer) public onlyMaintainer {\\n        emit UpdatedFeeClaimer(FEE_CLAIMER, _claimer);\\n        FEE_CLAIMER = _claimer;\\n    }\\n\\n    //  -- GENERAL --\\n\\n    function trustedTokensCount() external view returns (uint256) {\\n        return TRUSTED_TOKENS.length;\\n    }\\n\\n    function adaptersCount() external view returns (uint256) {\\n        return ADAPTERS.length;\\n    }\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\\n        require(_tokenAmount > 0, \\\"YakRouter: Nothing to recover\\\");\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\\n        require(_amount > 0, \\\"YakRouter: Nothing to recover\\\");\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    // Fallback\\n    receive() external payable {}\\n\\n    // -- HELPERS --\\n\\n    function _applyFee(uint256 _amountIn, uint256 _fee) internal view returns (uint256) {\\n        require(_fee >= MIN_FEE, \\\"YakRouter: Insufficient fee\\\");\\n        return (_amountIn * (FEE_DENOMINATOR - _fee)) / FEE_DENOMINATOR;\\n    }\\n\\n    function _wrap(uint256 _amount) internal {\\n        IWETH(WNATIVE).deposit{ value: _amount }();\\n    }\\n\\n    function _unwrap(uint256 _amount) internal {\\n        IWETH(WNATIVE).withdraw(_amount);\\n    }\\n\\n    /**\\n     * @notice Return tokens to user\\n     * @dev Pass address(0) for AVAX\\n     * @param _token address\\n     * @param _amount tokens to return\\n     * @param _to address where funds should be sent to\\n     */\\n    function _returnTokensTo(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (address(this) != _to) {\\n            if (_token == NATIVE) {\\n                payable(_to).transfer(_amount);\\n            } else {\\n                IERC20(_token).safeTransfer(_to, _amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Makes a deep copy of Offer struct\\n     */\\n    function _cloneOffer(Offer memory _queries) internal pure returns (Offer memory) {\\n        return Offer(_queries.amounts, _queries.adapters, _queries.path, _queries.gasEstimate);\\n    }\\n\\n    /**\\n     * Appends Query elements to Offer struct\\n     */\\n    function _addQuery(\\n        Offer memory _queries,\\n        uint256 _amount,\\n        address _adapter,\\n        address _tokenOut,\\n        uint256 _gasEstimate\\n    ) internal pure {\\n        _queries.path = BytesManipulation.mergeBytes(_queries.path, BytesManipulation.toBytes(_tokenOut));\\n        _queries.amounts = BytesManipulation.mergeBytes(_queries.amounts, BytesManipulation.toBytes(_amount));\\n        _queries.adapters = BytesManipulation.mergeBytes(_queries.adapters, BytesManipulation.toBytes(_adapter));\\n        _queries.gasEstimate += _gasEstimate;\\n    }\\n\\n    /**\\n     * Converts byte-arrays to an array of integers\\n     */\\n    function _formatAmounts(bytes memory _amounts) internal pure returns (uint256[] memory) {\\n        // Format amounts\\n        uint256 chunks = _amounts.length / 32;\\n        uint256[] memory amountsFormatted = new uint256[](chunks);\\n        for (uint256 i = 0; i < chunks; i++) {\\n            amountsFormatted[i] = BytesManipulation.bytesToUint256(i * 32 + 32, _amounts);\\n        }\\n        return amountsFormatted;\\n    }\\n\\n    /**\\n     * Converts byte-array to an array of addresses\\n     */\\n    function _formatAddresses(bytes memory _addresses) internal pure returns (address[] memory) {\\n        uint256 chunks = _addresses.length / 32;\\n        address[] memory addressesFormatted = new address[](chunks);\\n        for (uint256 i = 0; i < chunks; i++) {\\n            addressesFormatted[i] = BytesManipulation.bytesToAddress(i * 32 + 32, _addresses);\\n        }\\n        return addressesFormatted;\\n    }\\n\\n    /**\\n     * Formats elements in the Offer object from byte-arrays to integers and addresses\\n     */\\n    function _formatOffer(Offer memory _queries) internal pure returns (FormattedOffer memory) {\\n        return\\n            FormattedOffer(\\n                _formatAmounts(_queries.amounts),\\n                _formatAddresses(_queries.adapters),\\n                _formatAddresses(_queries.path),\\n                _queries.gasEstimate\\n            );\\n    }\\n\\n    // -- QUERIES --\\n\\n    /**\\n     * Query single adapter\\n     */\\n    function queryAdapter(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint8 _index\\n    ) external view returns (uint256) {\\n        IAdapter _adapter = IAdapter(ADAPTERS[_index]);\\n        uint256 amountOut = _adapter.query(_amountIn, _tokenIn, _tokenOut);\\n        return amountOut;\\n    }\\n\\n    /**\\n     * Query specified adapters\\n     */\\n    function queryNoSplit(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint8[] calldata _options\\n    ) public view returns (Query memory) {\\n        Query memory bestQuery;\\n        for (uint8 i; i < _options.length; i++) {\\n            address _adapter = ADAPTERS[_options[i]];\\n            uint256 amountOut = IAdapter(_adapter).query(_amountIn, _tokenIn, _tokenOut);\\n            if (i == 0 || amountOut > bestQuery.amountOut) {\\n                bestQuery = Query(_adapter, _tokenIn, _tokenOut, amountOut);\\n            }\\n        }\\n        return bestQuery;\\n    }\\n\\n    /**\\n     * Query all adapters\\n     */\\n    function queryNoSplit(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) public view returns (Query memory) {\\n        Query memory bestQuery;\\n        for (uint8 i; i < ADAPTERS.length; i++) {\\n            address _adapter = ADAPTERS[i];\\n            uint256 amountOut = IAdapter(_adapter).query(_amountIn, _tokenIn, _tokenOut);\\n            if (i == 0 || amountOut > bestQuery.amountOut) {\\n                bestQuery = Query(_adapter, _tokenIn, _tokenOut, amountOut);\\n            }\\n        }\\n        return bestQuery;\\n    }\\n\\n    /**\\n     * Return path with best returns between two tokens\\n     * Takes gas-cost into account\\n     */\\n    function findBestPathWithGas(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _maxSteps,\\n        uint256 _gasPrice\\n    ) external view returns (FormattedOffer memory) {\\n        require(_maxSteps > 0 && _maxSteps < 5, \\\"YakRouter: Invalid max-steps\\\");\\n        Offer memory queries;\\n        queries.amounts = BytesManipulation.toBytes(_amountIn);\\n        queries.path = BytesManipulation.toBytes(_tokenIn);\\n        uint256 gasPriceInExitTkn = _gasPrice > 0 ? getGasPriceInExitTkn(_gasPrice, _tokenOut) : 0;\\n        queries = _findBestPath(_amountIn, _tokenIn, _tokenOut, _maxSteps, queries, gasPriceInExitTkn);\\n        if (queries.adapters.length == 0) {\\n            queries.amounts = \\\"\\\";\\n            queries.path = \\\"\\\";\\n        }\\n        return _formatOffer(queries);\\n    }\\n\\n    // Find the market price between gas-asset(native) and token-out and express gas price in token-out\\n    function getGasPriceInExitTkn(uint256 _gasPrice, address _tokenOut) internal view returns (uint256 price) {\\n        // Avoid low-liquidity price appreciation (https://github.com/yieldyak/yak-aggregator/issues/20)\\n        FormattedOffer memory gasQuery = findBestPath(1e18, WNATIVE, _tokenOut, 2);\\n        if (gasQuery.path.length != 0) {\\n            // Leave result in nWei to preserve precision for assets with low decimal places\\n            price = (gasQuery.amounts[gasQuery.amounts.length - 1] * _gasPrice) / 1e9;\\n        }\\n    }\\n\\n    /**\\n     * Return path with best returns between two tokens\\n     */\\n    function findBestPath(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _maxSteps\\n    ) public view returns (FormattedOffer memory) {\\n        require(_maxSteps > 0 && _maxSteps < 5, \\\"YakRouter: Invalid max-steps\\\");\\n        Offer memory queries;\\n        queries.amounts = BytesManipulation.toBytes(_amountIn);\\n        queries.path = BytesManipulation.toBytes(_tokenIn);\\n        queries = _findBestPath(_amountIn, _tokenIn, _tokenOut, _maxSteps, queries, 0);\\n        // If no paths are found return empty struct\\n        if (queries.adapters.length == 0) {\\n            queries.amounts = \\\"\\\";\\n            queries.path = \\\"\\\";\\n        }\\n        return _formatOffer(queries);\\n    }\\n\\n    function _findBestPath(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _maxSteps,\\n        Offer memory _queries,\\n        uint256 _tknOutPriceNwei\\n    ) internal view returns (Offer memory) {\\n        Offer memory bestOption = _cloneOffer(_queries);\\n        uint256 bestAmountOut;\\n        uint256 gasEstimate;\\n        bool withGas = _tknOutPriceNwei != 0;\\n\\n        // First check if there is a path directly from tokenIn to tokenOut\\n        Query memory queryDirect = queryNoSplit(_amountIn, _tokenIn, _tokenOut);\\n\\n        if (queryDirect.amountOut != 0) {\\n            if (withGas) {\\n                gasEstimate = IAdapter(queryDirect.adapter).swapGasEstimate();\\n            }\\n            _addQuery(bestOption, queryDirect.amountOut, queryDirect.adapter, queryDirect.tokenOut, gasEstimate);\\n            bestAmountOut = queryDirect.amountOut;\\n        }\\n        // Only check the rest if they would go beyond step limit (Need at least 2 more steps)\\n        if (_maxSteps > 1 && _queries.adapters.length / 32 <= _maxSteps - 2) {\\n            // Check for paths that pass through trusted tokens\\n            for (uint256 i = 0; i < TRUSTED_TOKENS.length; i++) {\\n                if (_tokenIn == TRUSTED_TOKENS[i]) {\\n                    continue;\\n                }\\n                // Loop through all adapters to find the best one for swapping tokenIn for one of the trusted tokens\\n                Query memory bestSwap = queryNoSplit(_amountIn, _tokenIn, TRUSTED_TOKENS[i]);\\n                if (bestSwap.amountOut == 0) {\\n                    continue;\\n                }\\n                // Explore options that connect the current path to the tokenOut\\n                Offer memory newOffer = _cloneOffer(_queries);\\n                if (withGas) {\\n                    gasEstimate = IAdapter(bestSwap.adapter).swapGasEstimate();\\n                }\\n                _addQuery(newOffer, bestSwap.amountOut, bestSwap.adapter, bestSwap.tokenOut, gasEstimate);\\n                newOffer = _findBestPath(\\n                    bestSwap.amountOut,\\n                    TRUSTED_TOKENS[i],\\n                    _tokenOut,\\n                    _maxSteps,\\n                    newOffer,\\n                    _tknOutPriceNwei\\n                ); // Recursive step\\n                address tokenOut = BytesManipulation.bytesToAddress(newOffer.path.length, newOffer.path);\\n                uint256 amountOut = BytesManipulation.bytesToUint256(newOffer.amounts.length, newOffer.amounts);\\n                // Check that the last token in the path is the tokenOut and update the new best option if neccesary\\n                if (_tokenOut == tokenOut && amountOut > bestAmountOut) {\\n                    if (newOffer.gasEstimate > bestOption.gasEstimate) {\\n                        uint256 gasCostDiff = (_tknOutPriceNwei * (newOffer.gasEstimate - bestOption.gasEstimate)) /\\n                            1e9;\\n                        uint256 priceDiff = amountOut - bestAmountOut;\\n                        if (gasCostDiff > priceDiff) {\\n                            continue;\\n                        }\\n                    }\\n                    bestAmountOut = amountOut;\\n                    bestOption = newOffer;\\n                }\\n            }\\n        }\\n        return bestOption;\\n    }\\n\\n    // -- SWAPPERS --\\n\\n    function _swapNoSplit(\\n        Trade calldata _trade,\\n        address _from,\\n        address _to,\\n        uint256 _fee\\n    ) internal returns (uint256) {\\n        uint256[] memory amounts = new uint256[](_trade.path.length);\\n        if (_fee > 0 || MIN_FEE > 0) {\\n            // Transfer fees to the claimer account and decrease initial amount\\n            amounts[0] = _applyFee(_trade.amountIn, _fee);\\n            IERC20(_trade.path[0]).safeTransferFrom(_from, FEE_CLAIMER, _trade.amountIn - amounts[0]);\\n        } else {\\n            amounts[0] = _trade.amountIn;\\n        }\\n        IERC20(_trade.path[0]).safeTransferFrom(_from, _trade.adapters[0], amounts[0]);\\n        // Get amounts that will be swapped\\n        for (uint256 i = 0; i < _trade.adapters.length; i++) {\\n            amounts[i + 1] = IAdapter(_trade.adapters[i]).query(amounts[i], _trade.path[i], _trade.path[i + 1]);\\n        }\\n        require(amounts[amounts.length - 1] >= _trade.amountOut, \\\"YakRouter: Insufficient output amount\\\");\\n        for (uint256 i = 0; i < _trade.adapters.length; i++) {\\n            // All adapters should transfer output token to the following target\\n            // All targets are the adapters, expect for the last swap where tokens are sent out\\n            address targetAddress = i < _trade.adapters.length - 1 ? _trade.adapters[i + 1] : _to;\\n            IAdapter(_trade.adapters[i]).swap(\\n                amounts[i],\\n                amounts[i + 1],\\n                _trade.path[i],\\n                _trade.path[i + 1],\\n                targetAddress\\n            );\\n        }\\n        emit YakSwap(_trade.path[0], _trade.path[_trade.path.length - 1], _trade.amountIn, amounts[amounts.length - 1]);\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function swapNoSplit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee\\n    ) public {\\n        _swapNoSplit(_trade, msg.sender, _to, _fee);\\n    }\\n\\n    function swapNoSplitFromAVAX(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee\\n    ) external payable {\\n        require(_trade.path[0] == WNATIVE, \\\"YakRouter: Path needs to begin with WAVAX\\\");\\n        _wrap(_trade.amountIn);\\n        _swapNoSplit(_trade, address(this), _to, _fee);\\n    }\\n\\n    function swapNoSplitToAVAX(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee\\n    ) public {\\n        require(_trade.path[_trade.path.length - 1] == WNATIVE, \\\"YakRouter: Path needs to end with WAVAX\\\");\\n        uint256 returnAmount = _swapNoSplit(_trade, msg.sender, address(this), _fee);\\n        _unwrap(returnAmount);\\n        _returnTokensTo(NATIVE, returnAmount, _to);\\n    }\\n\\n    /**\\n     * Swap token to token without the need to approve the first token\\n     */\\n    function swapNoSplitWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        IERC20(_trade.path[0]).permit(msg.sender, address(this), _trade.amountIn, _deadline, _v, _r, _s);\\n        swapNoSplit(_trade, _to, _fee);\\n    }\\n\\n    /**\\n     * Swap token to AVAX without the need to approve the first token\\n     */\\n    function swapNoSplitToAVAXWithPermit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external {\\n        IERC20(_trade.path[0]).permit(msg.sender, address(this), _trade.amountIn, _deadline, _v, _r, _s);\\n        swapNoSplitToAVAX(_trade, _to, _fee);\\n    }\\n}\\n\",\"keccak256\":\"0x78019724d2b412de923f87ed16f215919de91438693ee26a1fb0df8a4ebbd537\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAdapter {\\n    function name() external view returns (string memory);\\n\\n    function swapGasEstimate() external view returns (uint256);\\n\\n    function swap(\\n        uint256,\\n        uint256,\\n        address,\\n        address,\\n        address\\n    ) external;\\n\\n    function query(\\n        uint256,\\n        address,\\n        address\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7efd1e561a2a064daefd8d690518f6cb23b83fbf6da172030c0c31fd8dafb073\",\"license\":\"MIT\"},\"src/contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(address, address, uint256);\\n    event Transfer(address, address, uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\\n\\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\\n}\\n\",\"keccak256\":\"0xe5c96d567fa7105b50c9ca77735160db4ade2ea51703c066d02df4fca855a462\",\"license\":\"MIT\"},\"src/contracts/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 amount) external;\\n\\n    function deposit() external payable;\\n}\\n\",\"keccak256\":\"0x7b31ca489d1bdf6631d5cf8c6f8ff9dc4a5c881d801a525f4e592a6884b9d2ad\",\"license\":\"MIT\"},\"src/contracts/lib/BytesManipulation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BytesToTypes.sol\\\";\\n\\nlibrary BytesManipulation {\\n    function toBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), x)\\n        }\\n    }\\n\\n    function toBytes(address x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), x)\\n        }\\n    }\\n\\n    function mergeBytes(bytes memory a, bytes memory b) public pure returns (bytes memory c) {\\n        // From https://ethereum.stackexchange.com/a/40456\\n        uint256 alen = a.length;\\n        uint256 totallen = alen + b.length;\\n        uint256 loopsa = (a.length + 31) / 32;\\n        uint256 loopsb = (b.length + 31) / 32;\\n        assembly {\\n            let m := mload(0x40)\\n            mstore(m, totallen)\\n            for {\\n                let i := 0\\n            } lt(i, loopsa) {\\n                i := add(1, i)\\n            } {\\n                mstore(add(m, mul(32, add(1, i))), mload(add(a, mul(32, add(1, i)))))\\n            }\\n            for {\\n                let i := 0\\n            } lt(i, loopsb) {\\n                i := add(1, i)\\n            } {\\n                mstore(add(m, add(mul(32, add(1, i)), alen)), mload(add(b, mul(32, add(1, i)))))\\n            }\\n            mstore(0x40, add(m, add(32, totallen)))\\n            c := m\\n        }\\n    }\\n\\n    function bytesToAddress(uint256 _offst, bytes memory _input) internal pure returns (address) {\\n        return BytesToTypes.bytesToAddress(_offst, _input);\\n    }\\n\\n    function bytesToUint256(uint256 _offst, bytes memory _input) internal pure returns (uint256) {\\n        return BytesToTypes.bytesToUint256(_offst, _input);\\n    }\\n}\\n\",\"keccak256\":\"0x13a69a31dedc5d312e60a51909fdac4deb670142c9ee660e82eea5e2c37dfb95\",\"license\":\"MIT\"},\"src/contracts/lib/BytesToTypes.sol\":{\"content\":\"// From https://github.com/pouladzade/Seriality/blob/master/src/BytesToTypes.sol (Licensed under Apache2.0)\\n\\n// SPDX-License-Identifier: Apache2.0\\npragma solidity ^0.8.0;\\n\\nlibrary BytesToTypes {\\n    function bytesToAddress(uint256 _offst, bytes memory _input) internal pure returns (address _output) {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n\\n    function bytesToUint256(uint256 _offst, bytes memory _input) internal pure returns (uint256 _output) {\\n        assembly {\\n            _output := mload(add(_input, _offst))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaa061ffaf163964421ec6cdd5d8c767639e3a2a5453ff76e43376ee4bafd5c4\",\"license\":\"Apache2.0\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is Context, AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n        _setupRole(MAINTAINER_ROLE, msgSender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        address msgSender = _msgSender();\\n        renounceRole(role, msgSender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        address msgSender = _msgSender();\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        address msgSender = _msgSender();\\n        require(hasRole(MAINTAINER_ROLE, msgSender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcf17b3f89386f661ee6230c9774bc88a119f2385111279497bbb443209ad6bb2\",\"license\":\"MIT\"},\"src/contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d77601f615804eb7471002f23f9a4593f86ac295e7353c2e7545f51d4f81728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260006001553480156200001657600080fd5b5060405162004639380380620046398339810160408190526200003991620006af565b600062000045620000b6565b905062000054600082620000ba565b6200006f6000805160206200461983398151915282620000ba565b506200007b81620000ca565b6200008683620000f4565b620000918262000198565b6200009c846200024c565b60601b6001600160601b0319166080525062000975915050565b3390565b620000c68282620002e2565b5050565b620000f181600019836001600160a01b03166200036c60201b620015fd179092919060201c565b50565b600062000100620000b6565b90506200011d600080516020620046198339815191528262000475565b620001455760405162461bcd60e51b81526004016200013c906200083b565b60405180910390fd5b7f658ff1688002926d8f426cb10c052ec29003f50042df9652d8613484c1a5864782604051620001769190620007ec565b60405180910390a181516200019390600390602085019062000567565b505050565b6000620001a4620000b6565b9050620001c1600080516020620046198339815191528262000475565b620001e05760405162461bcd60e51b81526004016200013c906200083b565b6002546040517fb2c853ac4d80d18d058c43d8018d077a036e542a79acae1647f5ad2a8c76f4e29162000221916001600160a01b03909116908590620007b9565b60405180910390a150600280546001600160a01b0319166001600160a01b0392909216919091179055565b600062000258620000b6565b905062000275600080516020620046198339815191528262000475565b620002945760405162461bcd60e51b81526004016200013c906200083b565b7febf7325f48e05e5e38809c69f8b02a7c907ed31d8768e6c2d841b1296a9225fe82604051620002c59190620007ec565b60405180910390a181516200019390600490602085019062000567565b620002ee828262000475565b620000c6576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905562000328620000b6565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b801580620003fb5750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90620003a59030908690600401620007b9565b60206040518083038186803b158015620003be57600080fd5b505afa158015620003d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003f9919062000764565b155b6200041a5760405162461bcd60e51b81526004016200013c9062000902565b620001938363095ea7b360e01b84846040516024016200043c929190620007d3565b60408051808303601f190181529190526020810180516001600160e01b0319939093166001600160e01b03938416179052906200049e16565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600080836001600160a01b031683604051620004bb91906200077d565b6000604051808303816000865af19150503d8060008114620004fa576040519150601f19603f3d011682016040523d82523d6000602084013e620004ff565b606091505b509150915081620005245760405162461bcd60e51b81526004016200013c9062000883565b8051156200056157808060200190518101906200054291906200073b565b620005615760405162461bcd60e51b81526004016200013c90620008b8565b50505050565b828054828255906000526020600020908101928215620005bf579160200282015b82811115620005bf57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000588565b50620005cd929150620005d1565b5090565b5b80821115620005cd5760008155600101620005d2565b80516001600160a01b03811681146200060057600080fd5b919050565b600082601f83011262000616578081fd5b815160206001600160401b03808311156200063557620006356200095f565b818302604051838282010181811084821117156200065757620006576200095f565b6040528481528381019250868401828801850189101562000676578687fd5b8692505b85831015620006a3576200068e81620005e8565b8452928401926001929092019184016200067a565b50979650505050505050565b60008060008060808587031215620006c5578384fd5b84516001600160401b0380821115620006dc578586fd5b620006ea8883890162000605565b9550602087015191508082111562000700578485fd5b506200070f8782880162000605565b9350506200072060408601620005e8565b91506200073060608601620005e8565b905092959194509250565b6000602082840312156200074d578081fd5b815180151581146200075d578182fd5b9392505050565b60006020828403121562000776578081fd5b5051919050565b60008251815b818110156200079f576020818601810151858301520162000783565b81811115620007ae5782828501525b509190910192915050565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156200082f5783516001600160a01b03168352928401929184019160010162000808565b50909695505050505050565b60208082526028908201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160408201526734b73a30b4b732b960c11b606082015260800190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b634e487b7160e01b600052604160045260246000fd5b60805160601c613c62620009b7600039600081816111230152818161144c01528181611560015281816117920152818161252501526125ff0152613c626000f3fe6080604052600436106102885760003560e01c80638980f11f11610153578063c3accd48116100cb578063dede7f151161007f578063f2fde38b11610064578063f2fde38b146106ea578063f87422541461070a578063fe38c5e61461071f5761028f565b8063dede7f15146106aa578063f0350382146106ca5761028f565b8063d547741f116100b0578063d547741f14610655578063d73792a914610675578063d8baf7cf1461068a5761028f565b8063c3accd4814610615578063c8a3a5c6146106355761028f565b8063952e901211610122578063a217fddf11610107578063a217fddf146105c9578063a3f4df7e146105de578063b381cf40146106005761028f565b8063952e901214610594578063a0cf0aea146105b45761028f565b80638980f11f146105075780638bb9c5bf1461052757806391d148541461054757806392f5d88a146105675761028f565b80634c09cf4e1161020157806375d19947116101b557806376ebe69c1161019a57806376ebe69c146104bd5780637c7a561b146104d2578063809356aa146104e75761028f565b806375d199471461048857806376c7a3c7146104a85761028f565b806352a52ab0116101e657806352a52ab0146104285780636b453c1f146104485780636bf2df86146104685761028f565b80634c09cf4e146103e85780634ebb7916146104085761028f565b8063248a9ca31161025857806331ac99201161023d57806331ac99201461038857806336568abe146103a85780633a9a4081146103c85761028f565b8063248a9ca31461033b5780632f2ff15d146103685761028f565b8062b99e361461029457806301ffc9a7146102bf578063061b15e7146102ec5780631e189dc2146103195761028f565b3661028f57005b600080fd5b3480156102a057600080fd5b506102a9610732565b6040516102b691906134ba565b60405180910390f35b3480156102cb57600080fd5b506102df6102da366004613046565b610741565b6040516102b69190613579565b3480156102f857600080fd5b5061030c6103073660046132fb565b610787565b6040516102b69190613968565b34801561032557600080fd5b5061033961033436600461314a565b610854565b005b34801561034757600080fd5b5061035b610356366004613003565b610916565b6040516102b69190613584565b34801561037457600080fd5b5061033961038336600461301b565b61092b565b34801561039457600080fd5b506103396103a3366004613003565b61094c565b3480156103b457600080fd5b506103396103c336600461301b565b6109df565b3480156103d457600080fd5b506103396103e3366004612f35565b610a25565b3480156103f457600080fd5b5061030c6104033660046132b8565b610ac1565b34801561041457600080fd5b50610339610423366004613003565b610b6a565b34801561043457600080fd5b506102a9610443366004613003565b610c50565b34801561045457600080fd5b50610339610463366004612ef2565b610c7a565b34801561047457600080fd5b506103396104833660046130f5565b610ca7565b34801561049457600080fd5b506103396104a336600461314a565b610cb9565b3480156104b457600080fd5b5061035b610d72565b3480156104c957600080fd5b5061035b610d78565b3480156104de57600080fd5b5061035b610d7e565b3480156104f357600080fd5b5061035b610502366004613348565b610d84565b34801561051357600080fd5b50610339610522366004612f0c565b610e45565b34801561053357600080fd5b50610339610542366004613003565b610f11565b34801561055357600080fd5b506102df61056236600461301b565b610f27565b34801561057357600080fd5b50610587610582366004613220565b610f50565b6040516102b69190613a02565b3480156105a057600080fd5b506102a96105af366004613003565b6110d3565b3480156105c057600080fd5b506102a96110e3565b3480156105d557600080fd5b5061035b6110e3565b3480156105ea57600080fd5b506105f36110e8565b6040516102b691906135bb565b34801561060c57600080fd5b506102a9611121565b34801561062157600080fd5b50610339610630366004612ef2565b611145565b34801561064157600080fd5b50610339610650366004612f35565b61120e565b34801561066157600080fd5b5061033961067036600461301b565b6112aa565b34801561068157600080fd5b5061035b6112c6565b34801561069657600080fd5b506103396106a5366004612ef2565b6112cc565b3480156106b657600080fd5b506105876106c53660046131e5565b6112f6565b3480156106d657600080fd5b506103396106e53660046130f5565b611442565b3480156106f657600080fd5b50610339610705366004612ef2565b611510565b34801561071657600080fd5b5061035b611532565b61033961072d3660046130f5565b611556565b6002546001600160a01b031681565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061077f575061077f82611725565b90505b919050565b61078f612ddd565b60008311801561079f5750600583105b6107c45760405162461bcd60e51b81526004016107bb90613603565b60405180910390fd5b6107cc612ddd565b6107d587611757565b81526107e086611757565b60408201526000836107f35760006107fd565b6107fd8487611781565b905061080d888888888686611824565b91508160200151516000141561083f576040805160208082018352600080835291855282519081018352908152908301525b61084882611ba2565b98975050505050505050565b6108616040880188613a9c565b600081811061088057634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108959190612ef2565b60405163d505accf60e01b81526001600160a01b03919091169063d505accf906108d090339030908c35908a908a908a908a9060040161350c565b600060405180830381600087803b1580156108ea57600080fd5b505af11580156108fe573d6000803e3d6000fd5b5050505061090d878787611442565b50505050505050565b60009081526020819052604090206001015490565b61093482610916565b61093d81611bfa565b6109478383611c0b565b505050565b6000610956611c90565b90506109827f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610f27565b61099e5760405162461bcd60e51b81526004016107bb9061363a565b7f4bb8a6184424e4bb853a4836042f5a726e4e710873989bfc6abdab19966f5b70600154836040516109d1929190613a60565b60405180910390a150600155565b6109e7611c90565b6001600160a01b0316816001600160a01b031614610a175760405162461bcd60e51b81526004016107bb906138d4565b610a218282611c94565b5050565b6000610a2f611c90565b9050610a5b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610f27565b610a775760405162461bcd60e51b81526004016107bb9061363a565b7febf7325f48e05e5e38809c69f8b02a7c907ed31d8768e6c2d841b1296a9225fe82604051610aa69190613566565b60405180910390a18151610947906004906020850190612e05565b610ac9612ddd565b600082118015610ad95750600582105b610af55760405162461bcd60e51b81526004016107bb90613603565b610afd612ddd565b610b0686611757565b8152610b1185611757565b6040820152610b2586868686856000611824565b905080602001515160001415610b57576040805160208082018352600080835291845282519081018352908152908201525b610b6081611ba2565b9695505050505050565b6000610b74611c90565b9050610ba07f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610f27565b610bbc5760405162461bcd60e51b81526004016107bb9061363a565b60008211610bdc5760405162461bcd60e51b81526004016107bb90613931565b604051339083156108fc029084906000818181858888f19350505050158015610c09573d6000803e3d6000fd5b5060006001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2883604051610c449190613584565b60405180910390a25050565b60038181548110610c6057600080fd5b6000918252602090912001546001600160a01b0316905081565b610ca47f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab958261092b565b50565b610cb383338484611d17565b50505050565b610cc66040880188613a9c565b6000818110610ce557634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610cfa9190612ef2565b60405163d505accf60e01b81526001600160a01b03919091169063d505accf90610d3590339030908c35908a908a908a908a9060040161350c565b600060405180830381600087803b158015610d4f57600080fd5b505af1158015610d63573d6000803e3d6000fd5b5050505061090d878787610ca7565b60015481565b60035490565b60045490565b60008060048360ff1681548110610dab57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516377ccc49d60e11b81526001600160a01b039091169250829063ef99893a90610dea908a908a908a90600401613a41565b60206040518083038186803b158015610e0257600080fd5b505afa158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a91906131cd565b979650505050505050565b6000610e4f611c90565b9050610e7b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610f27565b610e975760405162461bcd60e51b81526004016107bb9061363a565b60008211610eb75760405162461bcd60e51b81526004016107bb90613931565b610ecb6001600160a01b03841633846124d6565b826001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2883604051610f049190613584565b60405180910390a2505050565b6000610f1b611c90565b9050610a2182826109df565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610f58612e77565b610f60612e77565b60005b60ff81168411156110c8576000600486868460ff16818110610f9557634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610faa9190613394565b60ff1681548110610fcb57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516377ccc49d60e11b81526001600160a01b039091169250829063ef99893a9061100a908d908d908d90600401613a41565b60206040518083038186803b15801561102257600080fd5b505afa158015611036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105a91906131cd565b905060ff8316158061106f5750836060015181115b156110b3576040518060800160405280836001600160a01b031681526020018a6001600160a01b03168152602001896001600160a01b031681526020018281525093505b505080806110c090613be0565b915050610f63565b509695505050505050565b60048181548110610c6057600080fd5b600081565b6040518060400160405280600981526020017f59616b526f75746572000000000000000000000000000000000000000000000081525081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061114f611c90565b905061117b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610f27565b6111975760405162461bcd60e51b81526004016107bb9061363a565b6002546040517fb2c853ac4d80d18d058c43d8018d077a036e542a79acae1647f5ad2a8c76f4e2916111d6916001600160a01b039091169085906134ce565b60405180910390a1506002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000611218611c90565b90506112447f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610f27565b6112605760405162461bcd60e51b81526004016107bb9061363a565b7f658ff1688002926d8f426cb10c052ec29003f50042df9652d8613484c1a586478260405161128f9190613566565b60405180910390a18151610947906003906020850190612e05565b6112b382610916565b6112bc81611bfa565b6109478383611c94565b61271081565b610ca47f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826112aa565b6112fe612e77565b611306612e77565b60005b60045460ff8216101561143957600060048260ff168154811061133c57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516377ccc49d60e11b81526001600160a01b039091169250829063ef99893a9061137b908b908b908b90600401613a41565b60206040518083038186803b15801561139357600080fd5b505afa1580156113a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cb91906131cd565b905060ff831615806113e05750836060015181115b15611424576040518060800160405280836001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b031681526020018281525093505b5050808061143190613be0565b915050611309565b50949350505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166114796040850185613a9c565b60016114886040880188613a9c565b611493929150613b6b565b8181106114b057634e487b7160e01b600052603260045260246000fd5b90506020020160208101906114c59190612ef2565b6001600160a01b0316146114eb5760405162461bcd60e51b81526004016107bb90613697565b60006114f984333085611d17565b9050611504816124f5565b610cb36000828561258f565b600061151a611c90565b905061152760008361092b565b610a216000826109df565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661158d6040850185613a9c565b60008181106115ac57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906115c19190612ef2565b6001600160a01b0316146115e75760405162461bcd60e51b81526004016107bb90613729565b6115f183356125fd565b610cb383308484611d17565b80158061169e57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e9061164c90309086906004016134ce565b60206040518083038186803b15801561166457600080fd5b505afa158015611678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169c91906131cd565b155b6116ba5760405162461bcd60e51b81526004016107bb90613877565b6109478363095ea7b360e01b84846040516024016116d992919061354d565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612674565b6001600160e01b031981167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b6000806117b9670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000856002610ac1565b905080604001515160001461181d5780518051633b9aca009186916117e090600190613b6b565b815181106117fe57634e487b7160e01b600052603260045260246000fd5b60200260200101516118109190613b4c565b61181a9190613b2c565b91505b5092915050565b61182c612ddd565b60006118378461272a565b90506000808415158161184b8c8c8c6112f6565b905080606001516000146118f85781156118d75780600001516001600160a01b03166369cff80d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561189c57600080fd5b505afa1580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d491906131cd565b92505b6118f0858260600151836000015184604001518761276a565b806060015193505b600189118015611923575061190e60028a613b6b565b60208960200151516119209190613b2c565b11155b15611b925760005b600354811015611b90576003818154811061195657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b038d81169116141561197a57611b7e565b60006119bc8e8e600385815481106119a257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03166112f6565b90508060600151600014156119d15750611b7e565b60006119dc8b61272a565b90508415611a5c5781600001516001600160a01b03166369cff80d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a2157600080fd5b505afa158015611a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5991906131cd565b95505b611a75818360600151846000015185604001518a61276a565b611abc826060015160038581548110611a9e57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03168f8f858f611824565b90506000611ad38260400151518360400151612960565b82518051919250600091611ae691612960565b9050816001600160a01b03168f6001600160a01b0316148015611b0857508881115b15611b7957896060015183606001511115611b72576000633b9aca008b606001518560600151611b389190613b6b565b611b42908f613b4c565b611b4c9190613b2c565b90506000611b5a8b84613b6b565b905080821115611b6f57505050505050611b7e565b50505b8098508299505b505050505b80611b8881613bc5565b91505061192b565b505b50929a9950505050505050505050565b611baa612ddd565b6040518060800160405280611bc28460000151612973565b8152602001611bd48460200151612a4b565b8152602001611be68460400151612a4b565b815260200183606001518152509050919050565b610ca481611c06611c90565b612b17565b611c158282610f27565b610a21576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611c4c611c90565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b3390565b611c9e8282610f27565b15610a21576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055611cd3611c90565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600080611d276040870187613a9c565b905067ffffffffffffffff811115611d4f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d78578160200160208202803683370190505b5090506000831180611d8c57506000600154115b15611e7257611d9c863584612b7b565b81600081518110611dbd57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050611e6d85600260009054906101000a90046001600160a01b031683600081518110611e0457634e487b7160e01b600052603260045260246000fd5b60200260200101518960000135611e1b9190613b6b565b611e2860408b018b613a9c565b6000818110611e4757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611e5c9190612ef2565b6001600160a01b0316929190612bc0565b611ea5565b856000013581600081518110611e9857634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b611f2385611eb66060890189613a9c565b6000818110611ed557634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611eea9190612ef2565b83600081518110611f0b57634e487b7160e01b600052603260045260246000fd5b6020026020010151898060400190611e289190613a9c565b60005b611f336060880188613a9c565b90508110156120f457611f496060880188613a9c565b82818110611f6757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611f7c9190612ef2565b6001600160a01b031663ef99893a838381518110611faa57634e487b7160e01b600052603260045260246000fd5b6020026020010151898060400190611fc29190613a9c565b85818110611fe057634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611ff59190612ef2565b61200260408c018c613a9c565b61200d876001613b14565b81811061202a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061203f9190612ef2565b6040518463ffffffff1660e01b815260040161205d93929190613a41565b60206040518083038186803b15801561207557600080fd5b505afa158015612089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ad91906131cd565b826120b9836001613b14565b815181106120d757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806120ec81613bc5565b915050611f26565b50856020013581600183516121099190613b6b565b8151811061212757634e487b7160e01b600052603260045260246000fd5b6020026020010151101561214d5760405162461bcd60e51b81526004016107bb9061381a565b60005b61215d6060880188613a9c565b9050811015612378576000600161217760608a018a613a9c565b612182929150613b6b565b821061218e57856121d8565b61219b6060890189613a9c565b6121a6846001613b14565b8181106121c357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906121d89190612ef2565b90506121e76060890189613a9c565b8381811061220557634e487b7160e01b600052603260045260246000fd5b905060200201602081019061221a9190612ef2565b6001600160a01b031663eab90da684848151811061224857634e487b7160e01b600052603260045260246000fd5b60200260200101518585600161225e9190613b14565b8151811061227c57634e487b7160e01b600052603260045260246000fd5b60200260200101518b80604001906122949190613a9c565b878181106122b257634e487b7160e01b600052603260045260246000fd5b90506020020160208101906122c79190612ef2565b6122d460408e018e613a9c565b6122df896001613b14565b8181106122fc57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906123119190612ef2565b866040518663ffffffff1660e01b8152600401612332959493929190613a6e565b600060405180830381600087803b15801561234c57600080fd5b505af1158015612360573d6000803e3d6000fd5b5050505050808061237090613bc5565b915050612150565b506123866040870187613a9c565b600161239560408a018a613a9c565b6123a0929150613b6b565b8181106123bd57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906123d29190612ef2565b6001600160a01b03166123e86040880188613a9c565b600081811061240757634e487b7160e01b600052603260045260246000fd5b905060200201602081019061241c9190612ef2565b6001600160a01b03167f9fc8352e52998db4087d5e6e1c1aafa38788e749e5d7a24f5cb230f7379544028860000135846001865161245a9190613b6b565b8151811061247857634e487b7160e01b600052603260045260246000fd5b602002602001015160405161248e929190613a60565b60405180910390a380600182516124a59190613b6b565b815181106124c357634e487b7160e01b600052603260045260246000fd5b6020026020010151915050949350505050565b6109478363a9059cbb60e01b84846040516024016116d992919061354d565b6040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d9061255a908490600401613584565b600060405180830381600087803b15801561257457600080fd5b505af1158015612588573d6000803e3d6000fd5b5050505050565b306001600160a01b03821614610947576001600160a01b0383166125e9576040516001600160a01b0382169083156108fc029084906000818181858888f193505050501580156125e3573d6000803e3d6000fd5b50610947565b6109476001600160a01b03841682846124d6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561265857600080fd5b505af115801561266c573d6000803e3d6000fd5b505050505050565b600080836001600160a01b03168360405161268f919061341d565b6000604051808303816000865af19150503d80600081146126cc576040519150601f19603f3d011682016040523d82523d6000602084013e6126d1565b606091505b5091509150816126f35760405162461bcd60e51b81526004016107bb906136f4565b805115610cb3578080602001905181019061270e9190612fe3565b610cb35760405162461bcd60e51b81526004016107bb906137bd565b612732612ddd565b604051806080016040528083600001518152602001836020015181526020018360400151815260200183606001518152509050919050565b73A479b3aF0476a9e605133975C1F0C414d0654D12632f9680f5866040015161279285611757565b6040518363ffffffff1660e01b81526004016127af92919061358d565b60006040518083038186803b1580156127c757600080fd5b505af41580156127db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612803919081019061306e565b6040860152845173A479b3aF0476a9e605133975C1F0C414d0654D1290632f9680f59061282f87611757565b6040518363ffffffff1660e01b815260040161284c92919061358d565b60006040518083038186803b15801561286457600080fd5b505af4158015612878573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128a0919081019061306e565b8552602085015173A479b3aF0476a9e605133975C1F0C414d0654D1290632f9680f5906128cc86611757565b6040518363ffffffff1660e01b81526004016128e992919061358d565b60006040518083038186803b15801561290157600080fd5b505af4158015612915573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261293d919081019061306e565b6020860152606085018051829190612956908390613b14565b9052505050505050565b600061296c8383612be1565b9392505050565b60606000602083516129859190613b2c565b905060008167ffffffffffffffff8111156129b057634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156129d9578160200160208202803683370190505b50905060005b82811015612a4357612a066129f5826020613b4c565b612a00906020613b14565b86612960565b828281518110612a2657634e487b7160e01b600052603260045260246000fd5b602090810291909101015280612a3b81613bc5565b9150506129df565b509392505050565b6060600060208351612a5d9190613b2c565b905060008167ffffffffffffffff811115612a8857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612ab1578160200160208202803683370190505b50905060005b82811015612a4357612acd6129f5826020613b4c565b828281518110612aed57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015280612b0f81613bc5565b915050612ab7565b612b218282610f27565b610a2157612b39816001600160a01b03166014612be6565b612b44836020612be6565b604051602001612b55929190613439565b60408051601f198184030181529082905262461bcd60e51b82526107bb916004016135bb565b6000600154821015612b9f5760405162461bcd60e51b81526004016107bb90613786565b612710612bac8382613b6b565b612bb69085613b4c565b61296c9190613b2c565b610cb3846323b872dd60e01b8585856040516024016116d9939291906134e8565b015190565b60606000612bf5836002613b4c565b612c00906002613b14565b67ffffffffffffffff811115612c2657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612c50576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612c9557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612cee57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612d12846002613b4c565b612d1d906001613b14565b90505b6001811115612dbe577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612d6c57634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110612d9057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93612db781613bae565b9050612d20565b50831561296c5760405162461bcd60e51b81526004016107bb906135ce565b6040518060800160405280606081526020016060815260200160608152602001600081525090565b828054828255906000526020600020908101928215612e67579160200282015b82811115612e67578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178255602090920191600190910190612e25565b50612e73929150612e9e565b5090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b5b80821115612e735760008155600101612e9f565b80356001600160a01b038116811461078257600080fd5b600060808284031215612edb578081fd5b50919050565b803560ff8116811461078257600080fd5b600060208284031215612f03578081fd5b61296c82612eb3565b60008060408385031215612f1e578081fd5b612f2783612eb3565b946020939093013593505050565b60006020808385031215612f47578182fd5b823567ffffffffffffffff80821115612f5e578384fd5b818501915085601f830112612f71578384fd5b813581811115612f8357612f83613c16565b8381029150612f93848301613aea565b8181528481019084860184860187018a1015612fad578788fd5b8795505b83861015612fd657612fc281612eb3565b835260019590950194918601918601612fb1565b5098975050505050505050565b600060208284031215612ff4578081fd5b8151801515811461296c578182fd5b600060208284031215613014578081fd5b5035919050565b6000806040838503121561302d578182fd5b8235915061303d60208401612eb3565b90509250929050565b600060208284031215613057578081fd5b81356001600160e01b03198116811461296c578182fd5b60006020828403121561307f578081fd5b815167ffffffffffffffff80821115613096578283fd5b818401915084601f8301126130a9578283fd5b8151818111156130bb576130bb613c16565b6130ce601f8201601f1916602001613aea565b91508082528560208285010111156130e4578384fd5b611439816020840160208601613b82565b600080600060608486031215613109578081fd5b833567ffffffffffffffff81111561311f578182fd5b61312b86828701612eca565b93505061313a60208501612eb3565b9150604084013590509250925092565b600080600080600080600060e0888a031215613164578283fd5b873567ffffffffffffffff81111561317a578384fd5b6131868a828b01612eca565b97505061319560208901612eb3565b955060408801359450606088013593506131b160808901612ee1565b925060a0880135915060c0880135905092959891949750929550565b6000602082840312156131de578081fd5b5051919050565b6000806000606084860312156131f9578081fd5b8335925061320960208501612eb3565b915061321760408501612eb3565b90509250925092565b600080600080600060808688031215613237578283fd5b8535945061324760208701612eb3565b935061325560408701612eb3565b9250606086013567ffffffffffffffff80821115613271578283fd5b818801915088601f830112613284578283fd5b813581811115613292578384fd5b89602080830285010111156132a5578384fd5b9699959850939650602001949392505050565b600080600080608085870312156132cd578182fd5b843593506132dd60208601612eb3565b92506132eb60408601612eb3565b9396929550929360600135925050565b600080600080600060a08688031215613312578283fd5b8535945061332260208701612eb3565b935061333060408701612eb3565b94979396509394606081013594506080013592915050565b6000806000806080858703121561335d578182fd5b8435935061336d60208601612eb3565b925061337b60408601612eb3565b915061338960608601612ee1565b905092959194509250565b6000602082840312156133a5578081fd5b61296c82612ee1565b6000815180845260208085019450808401835b838110156133e65781516001600160a01b0316875295820195908201906001016133c1565b509495945050505050565b60008151808452613409816020860160208601613b82565b601f01601f19169290920160200192915050565b6000825161342f818460208701613b82565b9190910192915050565b60007f416363657373436f6e74726f6c3a206163636f756e742000000000000000000082528351613471816017850160208801613b82565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516134ae816028840160208801613b82565b01602801949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b60006020825261296c60208301846133ae565b901515815260200190565b90815260200190565b6000604082526135a060408301856133f1565b82810360208401526135b281856133f1565b95945050505050565b60006020825261296c60208301846133f1565b6020808252818101527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604082015260600190565b6020808252601c908201527f59616b526f757465723a20496e76616c6964206d61782d737465707300000000604082015260600190565b60208082526028908201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160408201527f696e7461696e6572000000000000000000000000000000000000000000000000606082015260800190565b60208082526027908201527f59616b526f757465723a2050617468206e6565647320746f20656e642077697460408201527f6820574156415800000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b60208082526029908201527f59616b526f757465723a2050617468206e6565647320746f20626567696e207760408201527f6974682057415641580000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f59616b526f757465723a20496e73756666696369656e74206665650000000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f59616b526f757465723a20496e73756666696369656e74206f7574707574206160408201527f6d6f756e74000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201527f20726f6c657320666f722073656c660000000000000000000000000000000000606082015260800190565b6020808252601d908201527f59616b526f757465723a204e6f7468696e6720746f207265636f766572000000604082015260600190565b60208082528251608083830152805160a0840181905260009291820190839060c08601905b808310156139ad578351825292840192600192909201919084019061398d565b50838701519350601f199250828682030160408701526139cd81856133ae565b935050506040850151818584030160608601526139ea83826133ae565b92505050606084015160808401528091505092915050565b60006080820190506001600160a01b03808451168352806020850151166020840152806040850151166040840152506060830151606083015292915050565b9283526001600160a01b03918216602084015216604082015260600190565b918252602082015260400190565b94855260208501939093526001600160a01b0391821660408501528116606084015216608082015260a00190565b6000808335601e19843603018112613ab2578283fd5b83018035915067ffffffffffffffff821115613acc578283fd5b6020908101925081023603821315613ae357600080fd5b9250929050565b60405181810167ffffffffffffffff81118282101715613b0c57613b0c613c16565b604052919050565b60008219821115613b2757613b27613c00565b500190565b600082613b4757634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613b6657613b66613c00565b500290565b600082821015613b7d57613b7d613c00565b500390565b60005b83811015613b9d578181015183820152602001613b85565b83811115610cb35750506000910152565b600081613bbd57613bbd613c00565b506000190190565b6000600019821415613bd957613bd9613c00565b5060010190565b600060ff821660ff811415613bf757613bf7613c00565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220b33e2aaef40ff3f7d2a1afc0a548e5662bb0ccc81b9e5d15e84a41598bd7358264736f6c63430008000033339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
  "deployedBytecode": "0x6080604052600436106102885760003560e01c80638980f11f11610153578063c3accd48116100cb578063dede7f151161007f578063f2fde38b11610064578063f2fde38b146106ea578063f87422541461070a578063fe38c5e61461071f5761028f565b8063dede7f15146106aa578063f0350382146106ca5761028f565b8063d547741f116100b0578063d547741f14610655578063d73792a914610675578063d8baf7cf1461068a5761028f565b8063c3accd4814610615578063c8a3a5c6146106355761028f565b8063952e901211610122578063a217fddf11610107578063a217fddf146105c9578063a3f4df7e146105de578063b381cf40146106005761028f565b8063952e901214610594578063a0cf0aea146105b45761028f565b80638980f11f146105075780638bb9c5bf1461052757806391d148541461054757806392f5d88a146105675761028f565b80634c09cf4e1161020157806375d19947116101b557806376ebe69c1161019a57806376ebe69c146104bd5780637c7a561b146104d2578063809356aa146104e75761028f565b806375d199471461048857806376c7a3c7146104a85761028f565b806352a52ab0116101e657806352a52ab0146104285780636b453c1f146104485780636bf2df86146104685761028f565b80634c09cf4e146103e85780634ebb7916146104085761028f565b8063248a9ca31161025857806331ac99201161023d57806331ac99201461038857806336568abe146103a85780633a9a4081146103c85761028f565b8063248a9ca31461033b5780632f2ff15d146103685761028f565b8062b99e361461029457806301ffc9a7146102bf578063061b15e7146102ec5780631e189dc2146103195761028f565b3661028f57005b600080fd5b3480156102a057600080fd5b506102a9610732565b6040516102b691906134ba565b60405180910390f35b3480156102cb57600080fd5b506102df6102da366004613046565b610741565b6040516102b69190613579565b3480156102f857600080fd5b5061030c6103073660046132fb565b610787565b6040516102b69190613968565b34801561032557600080fd5b5061033961033436600461314a565b610854565b005b34801561034757600080fd5b5061035b610356366004613003565b610916565b6040516102b69190613584565b34801561037457600080fd5b5061033961038336600461301b565b61092b565b34801561039457600080fd5b506103396103a3366004613003565b61094c565b3480156103b457600080fd5b506103396103c336600461301b565b6109df565b3480156103d457600080fd5b506103396103e3366004612f35565b610a25565b3480156103f457600080fd5b5061030c6104033660046132b8565b610ac1565b34801561041457600080fd5b50610339610423366004613003565b610b6a565b34801561043457600080fd5b506102a9610443366004613003565b610c50565b34801561045457600080fd5b50610339610463366004612ef2565b610c7a565b34801561047457600080fd5b506103396104833660046130f5565b610ca7565b34801561049457600080fd5b506103396104a336600461314a565b610cb9565b3480156104b457600080fd5b5061035b610d72565b3480156104c957600080fd5b5061035b610d78565b3480156104de57600080fd5b5061035b610d7e565b3480156104f357600080fd5b5061035b610502366004613348565b610d84565b34801561051357600080fd5b50610339610522366004612f0c565b610e45565b34801561053357600080fd5b50610339610542366004613003565b610f11565b34801561055357600080fd5b506102df61056236600461301b565b610f27565b34801561057357600080fd5b50610587610582366004613220565b610f50565b6040516102b69190613a02565b3480156105a057600080fd5b506102a96105af366004613003565b6110d3565b3480156105c057600080fd5b506102a96110e3565b3480156105d557600080fd5b5061035b6110e3565b3480156105ea57600080fd5b506105f36110e8565b6040516102b691906135bb565b34801561060c57600080fd5b506102a9611121565b34801561062157600080fd5b50610339610630366004612ef2565b611145565b34801561064157600080fd5b50610339610650366004612f35565b61120e565b34801561066157600080fd5b5061033961067036600461301b565b6112aa565b34801561068157600080fd5b5061035b6112c6565b34801561069657600080fd5b506103396106a5366004612ef2565b6112cc565b3480156106b657600080fd5b506105876106c53660046131e5565b6112f6565b3480156106d657600080fd5b506103396106e53660046130f5565b611442565b3480156106f657600080fd5b50610339610705366004612ef2565b611510565b34801561071657600080fd5b5061035b611532565b61033961072d3660046130f5565b611556565b6002546001600160a01b031681565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061077f575061077f82611725565b90505b919050565b61078f612ddd565b60008311801561079f5750600583105b6107c45760405162461bcd60e51b81526004016107bb90613603565b60405180910390fd5b6107cc612ddd565b6107d587611757565b81526107e086611757565b60408201526000836107f35760006107fd565b6107fd8487611781565b905061080d888888888686611824565b91508160200151516000141561083f576040805160208082018352600080835291855282519081018352908152908301525b61084882611ba2565b98975050505050505050565b6108616040880188613a9c565b600081811061088057634e487b7160e01b600052603260045260246000fd5b90506020020160208101906108959190612ef2565b60405163d505accf60e01b81526001600160a01b03919091169063d505accf906108d090339030908c35908a908a908a908a9060040161350c565b600060405180830381600087803b1580156108ea57600080fd5b505af11580156108fe573d6000803e3d6000fd5b5050505061090d878787611442565b50505050505050565b60009081526020819052604090206001015490565b61093482610916565b61093d81611bfa565b6109478383611c0b565b505050565b6000610956611c90565b90506109827f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610f27565b61099e5760405162461bcd60e51b81526004016107bb9061363a565b7f4bb8a6184424e4bb853a4836042f5a726e4e710873989bfc6abdab19966f5b70600154836040516109d1929190613a60565b60405180910390a150600155565b6109e7611c90565b6001600160a01b0316816001600160a01b031614610a175760405162461bcd60e51b81526004016107bb906138d4565b610a218282611c94565b5050565b6000610a2f611c90565b9050610a5b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610f27565b610a775760405162461bcd60e51b81526004016107bb9061363a565b7febf7325f48e05e5e38809c69f8b02a7c907ed31d8768e6c2d841b1296a9225fe82604051610aa69190613566565b60405180910390a18151610947906004906020850190612e05565b610ac9612ddd565b600082118015610ad95750600582105b610af55760405162461bcd60e51b81526004016107bb90613603565b610afd612ddd565b610b0686611757565b8152610b1185611757565b6040820152610b2586868686856000611824565b905080602001515160001415610b57576040805160208082018352600080835291845282519081018352908152908201525b610b6081611ba2565b9695505050505050565b6000610b74611c90565b9050610ba07f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610f27565b610bbc5760405162461bcd60e51b81526004016107bb9061363a565b60008211610bdc5760405162461bcd60e51b81526004016107bb90613931565b604051339083156108fc029084906000818181858888f19350505050158015610c09573d6000803e3d6000fd5b5060006001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2883604051610c449190613584565b60405180910390a25050565b60038181548110610c6057600080fd5b6000918252602090912001546001600160a01b0316905081565b610ca47f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab958261092b565b50565b610cb383338484611d17565b50505050565b610cc66040880188613a9c565b6000818110610ce557634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610cfa9190612ef2565b60405163d505accf60e01b81526001600160a01b03919091169063d505accf90610d3590339030908c35908a908a908a908a9060040161350c565b600060405180830381600087803b158015610d4f57600080fd5b505af1158015610d63573d6000803e3d6000fd5b5050505061090d878787610ca7565b60015481565b60035490565b60045490565b60008060048360ff1681548110610dab57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516377ccc49d60e11b81526001600160a01b039091169250829063ef99893a90610dea908a908a908a90600401613a41565b60206040518083038186803b158015610e0257600080fd5b505afa158015610e16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3a91906131cd565b979650505050505050565b6000610e4f611c90565b9050610e7b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610f27565b610e975760405162461bcd60e51b81526004016107bb9061363a565b60008211610eb75760405162461bcd60e51b81526004016107bb90613931565b610ecb6001600160a01b03841633846124d6565b826001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2883604051610f049190613584565b60405180910390a2505050565b6000610f1b611c90565b9050610a2182826109df565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b610f58612e77565b610f60612e77565b60005b60ff81168411156110c8576000600486868460ff16818110610f9557634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610faa9190613394565b60ff1681548110610fcb57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516377ccc49d60e11b81526001600160a01b039091169250829063ef99893a9061100a908d908d908d90600401613a41565b60206040518083038186803b15801561102257600080fd5b505afa158015611036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105a91906131cd565b905060ff8316158061106f5750836060015181115b156110b3576040518060800160405280836001600160a01b031681526020018a6001600160a01b03168152602001896001600160a01b031681526020018281525093505b505080806110c090613be0565b915050610f63565b509695505050505050565b60048181548110610c6057600080fd5b600081565b6040518060400160405280600981526020017f59616b526f75746572000000000000000000000000000000000000000000000081525081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600061114f611c90565b905061117b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610f27565b6111975760405162461bcd60e51b81526004016107bb9061363a565b6002546040517fb2c853ac4d80d18d058c43d8018d077a036e542a79acae1647f5ad2a8c76f4e2916111d6916001600160a01b039091169085906134ce565b60405180910390a1506002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000611218611c90565b90506112447f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610f27565b6112605760405162461bcd60e51b81526004016107bb9061363a565b7f658ff1688002926d8f426cb10c052ec29003f50042df9652d8613484c1a586478260405161128f9190613566565b60405180910390a18151610947906003906020850190612e05565b6112b382610916565b6112bc81611bfa565b6109478383611c94565b61271081565b610ca47f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826112aa565b6112fe612e77565b611306612e77565b60005b60045460ff8216101561143957600060048260ff168154811061133c57634e487b7160e01b600052603260045260246000fd5b60009182526020822001546040516377ccc49d60e11b81526001600160a01b039091169250829063ef99893a9061137b908b908b908b90600401613a41565b60206040518083038186803b15801561139357600080fd5b505afa1580156113a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cb91906131cd565b905060ff831615806113e05750836060015181115b15611424576040518060800160405280836001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b031681526020018281525093505b5050808061143190613be0565b915050611309565b50949350505050565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000166114796040850185613a9c565b60016114886040880188613a9c565b611493929150613b6b565b8181106114b057634e487b7160e01b600052603260045260246000fd5b90506020020160208101906114c59190612ef2565b6001600160a01b0316146114eb5760405162461bcd60e51b81526004016107bb90613697565b60006114f984333085611d17565b9050611504816124f5565b610cb36000828561258f565b600061151a611c90565b905061152760008361092b565b610a216000826109df565b7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001661158d6040850185613a9c565b60008181106115ac57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906115c19190612ef2565b6001600160a01b0316146115e75760405162461bcd60e51b81526004016107bb90613729565b6115f183356125fd565b610cb383308484611d17565b80158061169e57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e9061164c90309086906004016134ce565b60206040518083038186803b15801561166457600080fd5b505afa158015611678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169c91906131cd565b155b6116ba5760405162461bcd60e51b81526004016107bb90613877565b6109478363095ea7b360e01b84846040516024016116d992919061354d565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152612674565b6001600160e01b031981167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b60408051602080825281830190925260609160208201818036833750505060208101929092525090565b6000806117b9670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000856002610ac1565b905080604001515160001461181d5780518051633b9aca009186916117e090600190613b6b565b815181106117fe57634e487b7160e01b600052603260045260246000fd5b60200260200101516118109190613b4c565b61181a9190613b2c565b91505b5092915050565b61182c612ddd565b60006118378461272a565b90506000808415158161184b8c8c8c6112f6565b905080606001516000146118f85781156118d75780600001516001600160a01b03166369cff80d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561189c57600080fd5b505afa1580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d491906131cd565b92505b6118f0858260600151836000015184604001518761276a565b806060015193505b600189118015611923575061190e60028a613b6b565b60208960200151516119209190613b2c565b11155b15611b925760005b600354811015611b90576003818154811061195657634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b038d81169116141561197a57611b7e565b60006119bc8e8e600385815481106119a257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03166112f6565b90508060600151600014156119d15750611b7e565b60006119dc8b61272a565b90508415611a5c5781600001516001600160a01b03166369cff80d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a2157600080fd5b505afa158015611a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5991906131cd565b95505b611a75818360600151846000015185604001518a61276a565b611abc826060015160038581548110611a9e57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03168f8f858f611824565b90506000611ad38260400151518360400151612960565b82518051919250600091611ae691612960565b9050816001600160a01b03168f6001600160a01b0316148015611b0857508881115b15611b7957896060015183606001511115611b72576000633b9aca008b606001518560600151611b389190613b6b565b611b42908f613b4c565b611b4c9190613b2c565b90506000611b5a8b84613b6b565b905080821115611b6f57505050505050611b7e565b50505b8098508299505b505050505b80611b8881613bc5565b91505061192b565b505b50929a9950505050505050505050565b611baa612ddd565b6040518060800160405280611bc28460000151612973565b8152602001611bd48460200151612a4b565b8152602001611be68460400151612a4b565b815260200183606001518152509050919050565b610ca481611c06611c90565b612b17565b611c158282610f27565b610a21576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611c4c611c90565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b3390565b611c9e8282610f27565b15610a21576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055611cd3611c90565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600080611d276040870187613a9c565b905067ffffffffffffffff811115611d4f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d78578160200160208202803683370190505b5090506000831180611d8c57506000600154115b15611e7257611d9c863584612b7b565b81600081518110611dbd57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050611e6d85600260009054906101000a90046001600160a01b031683600081518110611e0457634e487b7160e01b600052603260045260246000fd5b60200260200101518960000135611e1b9190613b6b565b611e2860408b018b613a9c565b6000818110611e4757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611e5c9190612ef2565b6001600160a01b0316929190612bc0565b611ea5565b856000013581600081518110611e9857634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b611f2385611eb66060890189613a9c565b6000818110611ed557634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611eea9190612ef2565b83600081518110611f0b57634e487b7160e01b600052603260045260246000fd5b6020026020010151898060400190611e289190613a9c565b60005b611f336060880188613a9c565b90508110156120f457611f496060880188613a9c565b82818110611f6757634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611f7c9190612ef2565b6001600160a01b031663ef99893a838381518110611faa57634e487b7160e01b600052603260045260246000fd5b6020026020010151898060400190611fc29190613a9c565b85818110611fe057634e487b7160e01b600052603260045260246000fd5b9050602002016020810190611ff59190612ef2565b61200260408c018c613a9c565b61200d876001613b14565b81811061202a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061203f9190612ef2565b6040518463ffffffff1660e01b815260040161205d93929190613a41565b60206040518083038186803b15801561207557600080fd5b505afa158015612089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ad91906131cd565b826120b9836001613b14565b815181106120d757634e487b7160e01b600052603260045260246000fd5b6020908102919091010152806120ec81613bc5565b915050611f26565b50856020013581600183516121099190613b6b565b8151811061212757634e487b7160e01b600052603260045260246000fd5b6020026020010151101561214d5760405162461bcd60e51b81526004016107bb9061381a565b60005b61215d6060880188613a9c565b9050811015612378576000600161217760608a018a613a9c565b612182929150613b6b565b821061218e57856121d8565b61219b6060890189613a9c565b6121a6846001613b14565b8181106121c357634e487b7160e01b600052603260045260246000fd5b90506020020160208101906121d89190612ef2565b90506121e76060890189613a9c565b8381811061220557634e487b7160e01b600052603260045260246000fd5b905060200201602081019061221a9190612ef2565b6001600160a01b031663eab90da684848151811061224857634e487b7160e01b600052603260045260246000fd5b60200260200101518585600161225e9190613b14565b8151811061227c57634e487b7160e01b600052603260045260246000fd5b60200260200101518b80604001906122949190613a9c565b878181106122b257634e487b7160e01b600052603260045260246000fd5b90506020020160208101906122c79190612ef2565b6122d460408e018e613a9c565b6122df896001613b14565b8181106122fc57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906123119190612ef2565b866040518663ffffffff1660e01b8152600401612332959493929190613a6e565b600060405180830381600087803b15801561234c57600080fd5b505af1158015612360573d6000803e3d6000fd5b5050505050808061237090613bc5565b915050612150565b506123866040870187613a9c565b600161239560408a018a613a9c565b6123a0929150613b6b565b8181106123bd57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906123d29190612ef2565b6001600160a01b03166123e86040880188613a9c565b600081811061240757634e487b7160e01b600052603260045260246000fd5b905060200201602081019061241c9190612ef2565b6001600160a01b03167f9fc8352e52998db4087d5e6e1c1aafa38788e749e5d7a24f5cb230f7379544028860000135846001865161245a9190613b6b565b8151811061247857634e487b7160e01b600052603260045260246000fd5b602002602001015160405161248e929190613a60565b60405180910390a380600182516124a59190613b6b565b815181106124c357634e487b7160e01b600052603260045260246000fd5b6020026020010151915050949350505050565b6109478363a9059cbb60e01b84846040516024016116d992919061354d565b6040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632e1a7d4d9061255a908490600401613584565b600060405180830381600087803b15801561257457600080fd5b505af1158015612588573d6000803e3d6000fd5b5050505050565b306001600160a01b03821614610947576001600160a01b0383166125e9576040516001600160a01b0382169083156108fc029084906000818181858888f193505050501580156125e3573d6000803e3d6000fd5b50610947565b6109476001600160a01b03841682846124d6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561265857600080fd5b505af115801561266c573d6000803e3d6000fd5b505050505050565b600080836001600160a01b03168360405161268f919061341d565b6000604051808303816000865af19150503d80600081146126cc576040519150601f19603f3d011682016040523d82523d6000602084013e6126d1565b606091505b5091509150816126f35760405162461bcd60e51b81526004016107bb906136f4565b805115610cb3578080602001905181019061270e9190612fe3565b610cb35760405162461bcd60e51b81526004016107bb906137bd565b612732612ddd565b604051806080016040528083600001518152602001836020015181526020018360400151815260200183606001518152509050919050565b73__$a3615bccd5d4a6a2deeb8a719b13770375$__632f9680f5866040015161279285611757565b6040518363ffffffff1660e01b81526004016127af92919061358d565b60006040518083038186803b1580156127c757600080fd5b505af41580156127db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612803919081019061306e565b6040860152845173__$a3615bccd5d4a6a2deeb8a719b13770375$__90632f9680f59061282f87611757565b6040518363ffffffff1660e01b815260040161284c92919061358d565b60006040518083038186803b15801561286457600080fd5b505af4158015612878573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526128a0919081019061306e565b8552602085015173__$a3615bccd5d4a6a2deeb8a719b13770375$",
  "libraries": {
    "BytesManipulation": "0xA479b3aF0476a9e605133975C1F0C414d0654D12"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "findBestPath(uint256,address,address,uint256)": {
        "notice": "Return path with best returns between two tokens"
      },
      "findBestPathWithGas(uint256,address,address,uint256,uint256)": {
        "notice": "Return path with best returns between two tokens Takes gas-cost into account"
      },
      "queryAdapter(uint256,address,address,uint8)": {
        "notice": "Query single adapter"
      },
      "queryNoSplit(uint256,address,address)": {
        "notice": "Query all adapters"
      },
      "queryNoSplit(uint256,address,address,uint8[])": {
        "notice": "Query specified adapters"
      },
      "swapNoSplitToAVAXWithPermit((uint256,uint256,address[],address[]),address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Swap token to AVAX without the need to approve the first token"
      },
      "swapNoSplitWithPermit((uint256,uint256,address[],address[]),address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Swap token to token without the need to approve the first token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/YakRouter.sol:YakRouter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1759,
        "contract": "src/contracts/YakRouter.sol:YakRouter",
        "label": "MIN_FEE",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1761,
        "contract": "src/contracts/YakRouter.sol:YakRouter",
        "label": "FEE_CLAIMER",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1764,
        "contract": "src/contracts/YakRouter.sol:YakRouter",
        "label": "TRUSTED_TOKENS",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1767,
        "contract": "src/contracts/YakRouter.sol:YakRouter",
        "label": "ADAPTERS",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/YakRouter.sol:YakRouter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/YakRouter.sol:YakRouter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}