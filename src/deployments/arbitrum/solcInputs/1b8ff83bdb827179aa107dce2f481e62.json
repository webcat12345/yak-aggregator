{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "src/contracts/interface/IAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAdapter {\n    function name() external view returns (string memory);\n\n    function swapGasEstimate() external view returns (uint256);\n\n    function swap(\n        uint256,\n        uint256,\n        address,\n        address,\n        address\n    ) external;\n\n    function query(\n        uint256,\n        address,\n        address\n    ) external view returns (uint256);\n}\n"
    },
    "src/contracts/interface/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    event Approval(address, address, uint256);\n    event Transfer(address, address, uint256);\n\n    function name() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function allowance(address, address) external view returns (uint256);\n\n    function approve(address, uint256) external returns (bool);\n\n    function transfer(address, uint256) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\n\n    function permit(\n        address,\n        address,\n        uint256,\n        uint256,\n        uint8,\n        bytes32,\n        bytes32\n    ) external; // Only tokens that support permit\n\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\n\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\n}\n"
    },
    "src/contracts/interface/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function withdraw(uint256 amount) external;\n\n    function deposit() external payable;\n}\n"
    },
    "src/contracts/lib/BytesManipulation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./BytesToTypes.sol\";\n\nlibrary BytesManipulation {\n    function toBytes(uint256 x) internal pure returns (bytes memory b) {\n        b = new bytes(32);\n        assembly {\n            mstore(add(b, 32), x)\n        }\n    }\n\n    function toBytes(address x) internal pure returns (bytes memory b) {\n        b = new bytes(32);\n        assembly {\n            mstore(add(b, 32), x)\n        }\n    }\n\n    function mergeBytes(bytes memory a, bytes memory b) public pure returns (bytes memory c) {\n        // From https://ethereum.stackexchange.com/a/40456\n        uint256 alen = a.length;\n        uint256 totallen = alen + b.length;\n        uint256 loopsa = (a.length + 31) / 32;\n        uint256 loopsb = (b.length + 31) / 32;\n        assembly {\n            let m := mload(0x40)\n            mstore(m, totallen)\n            for {\n                let i := 0\n            } lt(i, loopsa) {\n                i := add(1, i)\n            } {\n                mstore(add(m, mul(32, add(1, i))), mload(add(a, mul(32, add(1, i)))))\n            }\n            for {\n                let i := 0\n            } lt(i, loopsb) {\n                i := add(1, i)\n            } {\n                mstore(add(m, add(mul(32, add(1, i)), alen)), mload(add(b, mul(32, add(1, i)))))\n            }\n            mstore(0x40, add(m, add(32, totallen)))\n            c := m\n        }\n    }\n\n    function bytesToAddress(uint256 _offst, bytes memory _input) internal pure returns (address) {\n        return BytesToTypes.bytesToAddress(_offst, _input);\n    }\n\n    function bytesToUint256(uint256 _offst, bytes memory _input) internal pure returns (uint256) {\n        return BytesToTypes.bytesToUint256(_offst, _input);\n    }\n}\n"
    },
    "src/contracts/lib/BytesToTypes.sol": {
      "content": "// From https://github.com/pouladzade/Seriality/blob/master/src/BytesToTypes.sol (Licensed under Apache2.0)\n\n// SPDX-License-Identifier: Apache2.0\npragma solidity ^0.8.0;\n\nlibrary BytesToTypes {\n    function bytesToAddress(uint256 _offst, bytes memory _input) internal pure returns (address _output) {\n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToUint256(uint256 _offst, bytes memory _input) internal pure returns (uint256 _output) {\n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n}\n"
    },
    "src/contracts/lib/Maintainable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * @dev Contract module which extends the basic access control mechanism of Ownable\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\n * remove.\n *\n * By default, the owner account will be the one that deploys the contract. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available this modifier:\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\n * the accounts with the role of maintainer.\n */\n\nabstract contract Maintainable is Context, AccessControl {\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\n\n    constructor() {\n        address msgSender = _msgSender();\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\n        _setupRole(MAINTAINER_ROLE, msgSender);\n    }\n\n    function addMaintainer(address addedMaintainer) public virtual {\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\n    }\n\n    function removeMaintainer(address removedMaintainer) public virtual {\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\n    }\n\n    function renounceRole(bytes32 role) public virtual {\n        address msgSender = _msgSender();\n        renounceRole(role, msgSender);\n    }\n\n    function transferOwnership(address newOwner) public virtual {\n        address msgSender = _msgSender();\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\n    }\n\n    modifier onlyMaintainer() {\n        address msgSender = _msgSender();\n        require(hasRole(MAINTAINER_ROLE, msgSender), \"Maintainable: Caller is not a maintainer\");\n        _;\n    }\n}\n"
    },
    "src/contracts/lib/SafeERC20.sol": {
      "content": "// This is a simplified version of OpenZepplin's SafeERC20 library\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../interface/IERC20.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "src/contracts/YakRouter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./lib/BytesManipulation.sol\";\nimport \"./interface/IAdapter.sol\";\nimport \"./interface/IERC20.sol\";\nimport \"./interface/IWETH.sol\";\nimport \"./lib/SafeERC20.sol\";\nimport \"./lib/Maintainable.sol\";\n\ncontract YakRouter is Maintainable {\n    using SafeERC20 for IERC20;\n\n    address public immutable WNATIVE;\n    address public constant NATIVE = address(0);\n    string public constant NAME = \"YakRouter\";\n    uint256 public constant FEE_DENOMINATOR = 1e4;\n    uint256 public MIN_FEE = 0;\n    address public FEE_CLAIMER;\n    address[] public TRUSTED_TOKENS;\n    address[] public ADAPTERS;\n\n    event Recovered(address indexed _asset, uint256 amount);\n    event UpdatedTrustedTokens(address[] _newTrustedTokens);\n    event UpdatedAdapters(address[] _newAdapters);\n    event UpdatedMinFee(uint256 _oldMinFee, uint256 _newMinFee);\n    event UpdatedFeeClaimer(address _oldFeeClaimer, address _newFeeClaimer);\n    event YakSwap(address indexed _tokenIn, address indexed _tokenOut, uint256 _amountIn, uint256 _amountOut);\n\n    struct Query {\n        address adapter;\n        address tokenIn;\n        address tokenOut;\n        uint256 amountOut;\n    }\n\n    struct Offer {\n        bytes amounts;\n        bytes adapters;\n        bytes path;\n        uint256 gasEstimate;\n    }\n\n    struct FormattedOffer {\n        uint256[] amounts;\n        address[] adapters;\n        address[] path;\n        uint256 gasEstimate;\n    }\n\n    struct Trade {\n        uint256 amountIn;\n        uint256 amountOut;\n        address[] path;\n        address[] adapters;\n    }\n\n    constructor(\n        address[] memory _adapters,\n        address[] memory _trustedTokens,\n        address _feeClaimer,\n        address _wrapped_native\n    ) {\n        setAllowanceForWrapping(_wrapped_native);\n        setTrustedTokens(_trustedTokens);\n        setFeeClaimer(_feeClaimer);\n        setAdapters(_adapters);\n        WNATIVE = _wrapped_native;\n    }\n\n    // -- SETTERS --\n\n    function setAllowanceForWrapping(address _wnative) public onlyMaintainer {\n        IERC20(_wnative).safeApprove(_wnative, type(uint256).max);\n    }\n\n    function setTrustedTokens(address[] memory _trustedTokens) public onlyMaintainer {\n        emit UpdatedTrustedTokens(_trustedTokens);\n        TRUSTED_TOKENS = _trustedTokens;\n    }\n\n    function setAdapters(address[] memory _adapters) public onlyMaintainer {\n        emit UpdatedAdapters(_adapters);\n        ADAPTERS = _adapters;\n    }\n\n    function setMinFee(uint256 _fee) external onlyMaintainer {\n        emit UpdatedMinFee(MIN_FEE, _fee);\n        MIN_FEE = _fee;\n    }\n\n    function setFeeClaimer(address _claimer) public onlyMaintainer {\n        emit UpdatedFeeClaimer(FEE_CLAIMER, _claimer);\n        FEE_CLAIMER = _claimer;\n    }\n\n    //  -- GENERAL --\n\n    function trustedTokensCount() external view returns (uint256) {\n        return TRUSTED_TOKENS.length;\n    }\n\n    function adaptersCount() external view returns (uint256) {\n        return ADAPTERS.length;\n    }\n\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\n        require(_tokenAmount > 0, \"YakRouter: Nothing to recover\");\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\n        emit Recovered(_tokenAddress, _tokenAmount);\n    }\n\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\n        require(_amount > 0, \"YakRouter: Nothing to recover\");\n        payable(msg.sender).transfer(_amount);\n        emit Recovered(address(0), _amount);\n    }\n\n    // Fallback\n    receive() external payable {}\n\n    // -- HELPERS --\n\n    function _applyFee(uint256 _amountIn, uint256 _fee) internal view returns (uint256) {\n        require(_fee >= MIN_FEE, \"YakRouter: Insufficient fee\");\n        return (_amountIn * (FEE_DENOMINATOR - _fee)) / FEE_DENOMINATOR;\n    }\n\n    function _wrap(uint256 _amount) internal {\n        IWETH(WNATIVE).deposit{ value: _amount }();\n    }\n\n    function _unwrap(uint256 _amount) internal {\n        IWETH(WNATIVE).withdraw(_amount);\n    }\n\n    /**\n     * @notice Return tokens to user\n     * @dev Pass address(0) for AVAX\n     * @param _token address\n     * @param _amount tokens to return\n     * @param _to address where funds should be sent to\n     */\n    function _returnTokensTo(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) internal {\n        if (address(this) != _to) {\n            if (_token == NATIVE) {\n                payable(_to).transfer(_amount);\n            } else {\n                IERC20(_token).safeTransfer(_to, _amount);\n            }\n        }\n    }\n\n    function _transferFrom(address token, address _from, address _to, uint _amount) internal {\n        if (_from != address(this))\n            IERC20(token).safeTransferFrom(_from, _to, _amount);\n        else\n            IERC20(token).safeTransfer(_to, _amount);\n    }\n\n    /**\n     * Makes a deep copy of Offer struct\n     */\n    function _cloneOffer(Offer memory _queries) internal pure returns (Offer memory) {\n        return Offer(_queries.amounts, _queries.adapters, _queries.path, _queries.gasEstimate);\n    }\n\n    /**\n     * Appends Query elements to Offer struct\n     */\n    function _addQuery(\n        Offer memory _queries,\n        uint256 _amount,\n        address _adapter,\n        address _tokenOut,\n        uint256 _gasEstimate\n    ) internal pure {\n        _queries.path = BytesManipulation.mergeBytes(_queries.path, BytesManipulation.toBytes(_tokenOut));\n        _queries.amounts = BytesManipulation.mergeBytes(_queries.amounts, BytesManipulation.toBytes(_amount));\n        _queries.adapters = BytesManipulation.mergeBytes(_queries.adapters, BytesManipulation.toBytes(_adapter));\n        _queries.gasEstimate += _gasEstimate;\n    }\n\n    /**\n     * Converts byte-arrays to an array of integers\n     */\n    function _formatAmounts(bytes memory _amounts) internal pure returns (uint256[] memory) {\n        // Format amounts\n        uint256 chunks = _amounts.length / 32;\n        uint256[] memory amountsFormatted = new uint256[](chunks);\n        for (uint256 i = 0; i < chunks; i++) {\n            amountsFormatted[i] = BytesManipulation.bytesToUint256(i * 32 + 32, _amounts);\n        }\n        return amountsFormatted;\n    }\n\n    /**\n     * Converts byte-array to an array of addresses\n     */\n    function _formatAddresses(bytes memory _addresses) internal pure returns (address[] memory) {\n        uint256 chunks = _addresses.length / 32;\n        address[] memory addressesFormatted = new address[](chunks);\n        for (uint256 i = 0; i < chunks; i++) {\n            addressesFormatted[i] = BytesManipulation.bytesToAddress(i * 32 + 32, _addresses);\n        }\n        return addressesFormatted;\n    }\n\n    /**\n     * Formats elements in the Offer object from byte-arrays to integers and addresses\n     */\n    function _formatOffer(Offer memory _queries) internal pure returns (FormattedOffer memory) {\n        return\n            FormattedOffer(\n                _formatAmounts(_queries.amounts),\n                _formatAddresses(_queries.adapters),\n                _formatAddresses(_queries.path),\n                _queries.gasEstimate\n            );\n    }\n\n    // -- QUERIES --\n\n    /**\n     * Query single adapter\n     */\n    function queryAdapter(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint8 _index\n    ) external view returns (uint256) {\n        IAdapter _adapter = IAdapter(ADAPTERS[_index]);\n        uint256 amountOut = _adapter.query(_amountIn, _tokenIn, _tokenOut);\n        return amountOut;\n    }\n\n    /**\n     * Query specified adapters\n     */\n    function queryNoSplit(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint8[] calldata _options\n    ) public view returns (Query memory) {\n        Query memory bestQuery;\n        for (uint8 i; i < _options.length; i++) {\n            address _adapter = ADAPTERS[_options[i]];\n            uint256 amountOut = IAdapter(_adapter).query(_amountIn, _tokenIn, _tokenOut);\n            if (i == 0 || amountOut > bestQuery.amountOut) {\n                bestQuery = Query(_adapter, _tokenIn, _tokenOut, amountOut);\n            }\n        }\n        return bestQuery;\n    }\n\n    /**\n     * Query all adapters\n     */\n    function queryNoSplit(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) public view returns (Query memory) {\n        Query memory bestQuery;\n        for (uint8 i; i < ADAPTERS.length; i++) {\n            address _adapter = ADAPTERS[i];\n            uint256 amountOut = IAdapter(_adapter).query(_amountIn, _tokenIn, _tokenOut);\n            if (i == 0 || amountOut > bestQuery.amountOut) {\n                bestQuery = Query(_adapter, _tokenIn, _tokenOut, amountOut);\n            }\n        }\n        return bestQuery;\n    }\n\n    /**\n     * Return path with best returns between two tokens\n     * Takes gas-cost into account\n     */\n    function findBestPathWithGas(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _maxSteps,\n        uint256 _gasPrice\n    ) external view returns (FormattedOffer memory) {\n        require(_maxSteps > 0 && _maxSteps < 5, \"YakRouter: Invalid max-steps\");\n        Offer memory queries;\n        queries.amounts = BytesManipulation.toBytes(_amountIn);\n        queries.path = BytesManipulation.toBytes(_tokenIn);\n        uint256 gasPriceInExitTkn = _gasPrice > 0 ? getGasPriceInExitTkn(_gasPrice, _tokenOut) : 0;\n        queries = _findBestPath(_amountIn, _tokenIn, _tokenOut, _maxSteps, queries, gasPriceInExitTkn);\n        if (queries.adapters.length == 0) {\n            queries.amounts = \"\";\n            queries.path = \"\";\n        }\n        return _formatOffer(queries);\n    }\n\n    // Find the market price between gas-asset(native) and token-out and express gas price in token-out\n    function getGasPriceInExitTkn(uint256 _gasPrice, address _tokenOut) internal view returns (uint256 price) {\n        // Avoid low-liquidity price appreciation (https://github.com/yieldyak/yak-aggregator/issues/20)\n        FormattedOffer memory gasQuery = findBestPath(1e18, WNATIVE, _tokenOut, 2);\n        if (gasQuery.path.length != 0) {\n            // Leave result in nWei to preserve precision for assets with low decimal places\n            price = (gasQuery.amounts[gasQuery.amounts.length - 1] * _gasPrice) / 1e9;\n        }\n    }\n\n    /**\n     * Return path with best returns between two tokens\n     */\n    function findBestPath(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _maxSteps\n    ) public view returns (FormattedOffer memory) {\n        require(_maxSteps > 0 && _maxSteps < 5, \"YakRouter: Invalid max-steps\");\n        Offer memory queries;\n        queries.amounts = BytesManipulation.toBytes(_amountIn);\n        queries.path = BytesManipulation.toBytes(_tokenIn);\n        queries = _findBestPath(_amountIn, _tokenIn, _tokenOut, _maxSteps, queries, 0);\n        // If no paths are found return empty struct\n        if (queries.adapters.length == 0) {\n            queries.amounts = \"\";\n            queries.path = \"\";\n        }\n        return _formatOffer(queries);\n    }\n\n    function _findBestPath(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _maxSteps,\n        Offer memory _queries,\n        uint256 _tknOutPriceNwei\n    ) internal view returns (Offer memory) {\n        Offer memory bestOption = _cloneOffer(_queries);\n        uint256 bestAmountOut;\n        uint256 gasEstimate;\n        bool withGas = _tknOutPriceNwei != 0;\n\n        // First check if there is a path directly from tokenIn to tokenOut\n        Query memory queryDirect = queryNoSplit(_amountIn, _tokenIn, _tokenOut);\n\n        if (queryDirect.amountOut != 0) {\n            if (withGas) {\n                gasEstimate = IAdapter(queryDirect.adapter).swapGasEstimate();\n            }\n            _addQuery(bestOption, queryDirect.amountOut, queryDirect.adapter, queryDirect.tokenOut, gasEstimate);\n            bestAmountOut = queryDirect.amountOut;\n        }\n        // Only check the rest if they would go beyond step limit (Need at least 2 more steps)\n        if (_maxSteps > 1 && _queries.adapters.length / 32 <= _maxSteps - 2) {\n            // Check for paths that pass through trusted tokens\n            for (uint256 i = 0; i < TRUSTED_TOKENS.length; i++) {\n                if (_tokenIn == TRUSTED_TOKENS[i]) {\n                    continue;\n                }\n                // Loop through all adapters to find the best one for swapping tokenIn for one of the trusted tokens\n                Query memory bestSwap = queryNoSplit(_amountIn, _tokenIn, TRUSTED_TOKENS[i]);\n                if (bestSwap.amountOut == 0) {\n                    continue;\n                }\n                // Explore options that connect the current path to the tokenOut\n                Offer memory newOffer = _cloneOffer(_queries);\n                if (withGas) {\n                    gasEstimate = IAdapter(bestSwap.adapter).swapGasEstimate();\n                }\n                _addQuery(newOffer, bestSwap.amountOut, bestSwap.adapter, bestSwap.tokenOut, gasEstimate);\n                newOffer = _findBestPath(\n                    bestSwap.amountOut,\n                    TRUSTED_TOKENS[i],\n                    _tokenOut,\n                    _maxSteps,\n                    newOffer,\n                    _tknOutPriceNwei\n                ); // Recursive step\n                address tokenOut = BytesManipulation.bytesToAddress(newOffer.path.length, newOffer.path);\n                uint256 amountOut = BytesManipulation.bytesToUint256(newOffer.amounts.length, newOffer.amounts);\n                // Check that the last token in the path is the tokenOut and update the new best option if neccesary\n                if (_tokenOut == tokenOut && amountOut > bestAmountOut) {\n                    if (newOffer.gasEstimate > bestOption.gasEstimate) {\n                        uint256 gasCostDiff = (_tknOutPriceNwei * (newOffer.gasEstimate - bestOption.gasEstimate)) /\n                            1e9;\n                        uint256 priceDiff = amountOut - bestAmountOut;\n                        if (gasCostDiff > priceDiff) {\n                            continue;\n                        }\n                    }\n                    bestAmountOut = amountOut;\n                    bestOption = newOffer;\n                }\n            }\n        }\n        return bestOption;\n    }\n\n    // -- SWAPPERS --\n\n    function _swapNoSplit(\n        Trade calldata _trade,\n        address _from,\n        address _to,\n        uint256 _fee\n    ) internal returns (uint256) {\n        uint256[] memory amounts = new uint256[](_trade.path.length);\n        if (_fee > 0 || MIN_FEE > 0) {\n            // Transfer fees to the claimer account and decrease initial amount\n            amounts[0] = _applyFee(_trade.amountIn, _fee);\n            _transferFrom(_trade.path[0], _from, FEE_CLAIMER, _trade.amountIn - amounts[0]);\n        } else {\n            amounts[0] = _trade.amountIn;\n        }\n        _transferFrom(_trade.path[0], _from, _trade.adapters[0], amounts[0]);\n        // Get amounts that will be swapped\n        for (uint256 i = 0; i < _trade.adapters.length; i++) {\n            amounts[i + 1] = IAdapter(_trade.adapters[i]).query(amounts[i], _trade.path[i], _trade.path[i + 1]);\n        }\n        require(amounts[amounts.length - 1] >= _trade.amountOut, \"YakRouter: Insufficient output amount\");\n        for (uint256 i = 0; i < _trade.adapters.length; i++) {\n            // All adapters should transfer output token to the following target\n            // All targets are the adapters, expect for the last swap where tokens are sent out\n            address targetAddress = i < _trade.adapters.length - 1 ? _trade.adapters[i + 1] : _to;\n            IAdapter(_trade.adapters[i]).swap(\n                amounts[i],\n                amounts[i + 1],\n                _trade.path[i],\n                _trade.path[i + 1],\n                targetAddress\n            );\n        }\n        emit YakSwap(_trade.path[0], _trade.path[_trade.path.length - 1], _trade.amountIn, amounts[amounts.length - 1]);\n        return amounts[amounts.length - 1];\n    }\n\n    function swapNoSplit(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee\n    ) public {\n        _swapNoSplit(_trade, msg.sender, _to, _fee);\n    }\n\n    function swapNoSplitFromAVAX(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee\n    ) external payable {\n        require(_trade.path[0] == WNATIVE, \"YakRouter: Path needs to begin with WAVAX\");\n        _wrap(_trade.amountIn);\n        _swapNoSplit(_trade, address(this), _to, _fee);\n    }\n\n    function swapNoSplitToAVAX(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee\n    ) public {\n        require(_trade.path[_trade.path.length - 1] == WNATIVE, \"YakRouter: Path needs to end with WAVAX\");\n        uint256 returnAmount = _swapNoSplit(_trade, msg.sender, address(this), _fee);\n        _unwrap(returnAmount);\n        _returnTokensTo(NATIVE, returnAmount, _to);\n    }\n\n    /**\n     * Swap token to token without the need to approve the first token\n     */\n    function swapNoSplitWithPermit(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        IERC20(_trade.path[0]).permit(msg.sender, address(this), _trade.amountIn, _deadline, _v, _r, _s);\n        swapNoSplit(_trade, _to, _fee);\n    }\n\n    /**\n     * Swap token to AVAX without the need to approve the first token\n     */\n    function swapNoSplitToAVAXWithPermit(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        IERC20(_trade.path[0]).permit(msg.sender, address(this), _trade.amountIn, _deadline, _v, _r, _s);\n        swapNoSplitToAVAX(_trade, _to, _fee);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}