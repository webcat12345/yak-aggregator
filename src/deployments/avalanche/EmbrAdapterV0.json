{
  "address": "0xB0b09b6838f753496e8f80fD02dbAF68073869d2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "addPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "removePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6c11e0460b6bbceaf3f649e368f19358a3b7f36b89c6dcbb40e705f3939c70b3",
  "receipt": {
    "to": null,
    "from": "0xd22044706DeA3c342f68396bEDBCf6a2536d951D",
    "contractAddress": "0xB0b09b6838f753496e8f80fD02dbAF68073869d2",
    "transactionIndex": 0,
    "gasUsed": "4989397",
    "logsBloom": "0x00000000000000000000000000000002000000000010000000800000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000002400000000000000000000001000000400000000800000000000000000000000000000000000000000000080100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020008000000000000000000000000000000000002000000000000000001000000000",
    "blockHash": "0x6769e43085805f561b716b5085eefd8a903782a0bb69b81835150910b0ea8e7c",
    "transactionHash": "0x6c11e0460b6bbceaf3f649e368f19358a3b7f36b89c6dcbb40e705f3939c70b3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9863007,
        "transactionHash": "0x6c11e0460b6bbceaf3f649e368f19358a3b7f36b89c6dcbb40e705f3939c70b3",
        "address": "0xB0b09b6838f753496e8f80fD02dbAF68073869d2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6769e43085805f561b716b5085eefd8a903782a0bb69b81835150910b0ea8e7c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9863007,
        "transactionHash": "0x6c11e0460b6bbceaf3f649e368f19358a3b7f36b89c6dcbb40e705f3939c70b3",
        "address": "0xB0b09b6838f753496e8f80fD02dbAF68073869d2",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x000000000000000000000000b0b09b6838f753496e8f80fd02dbaf68073869d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000003efd0",
        "logIndex": 1,
        "blockHash": "0x6769e43085805f561b716b5085eefd8a903782a0bb69b81835150910b0ea8e7c"
      }
    ],
    "blockNumber": 9863007,
    "cumulativeGasUsed": "4989397",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "EmbrAdapterV0",
    "0xad68ea482860cd7077a5D0684313dD3a9BC70fbB",
    [
      "0xc0eb6cfa49a0b36c44e91d6e65a69f4a82f66048",
      "0xe0D8dA1b899C6161A8960DB9FF3Ea2f1f2F7862B",
      "0x338ac2f8d92d9c943f418e576b3e30badd3ef420",
      "0xb8D86c8b188196Ff6B837A0e78f5534Be751CaA3",
      "0x4435C5b3b8B0bccF90ab841A0430a31C7128549B",
      "0x75AB49DfF2649b2c7C5d1519fBabA89Ea57a4ef6",
      "0x423e20c4142dcAA52955c257FDb775b5fbbfDa7E",
      "0x4F18F5085Dd9dA4a9A2e6e3F7b59516afD6c7d63",
      "0x5e66Ca08eb84c1d30Fd44aCb0FdF10781994c62C",
      "0x99E0007B32D7dc4213435142B300C7D70Fb61020",
      "0xE72ab2a5009792c3A819dd8857a58c15B5178f94",
      "0x12Bb93F630802a60e5A459d323b5BFD770dAc0a4",
      "0xC5355a1127140897B84c44010489034e25ee33FF",
      "0x2af262DD90bd2D124E95Fc778D9c85aA03734Ff2"
    ],
    258000
  ],
  "solcInputHash": "964383080f437204e9c99d0a484b361f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"addPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"removePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recoverAVAX(uint256)\":{\"params\":{\"_amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"_tokenAddress\":\"token address\",\"_tokenAmount\":\"amount to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"_spender\":\"address\",\"_token\":\"address\"}},\"setAllowances()\":{\"details\":\"Should use modifier `onlyOwner` to avoid griefing\"},\"swap(uint256,uint256,address,address,address)\":{\"params\":{\"_amountIn\":\"input amount in starting token\",\"_amountOut\":\"amount out in ending token\",\"_fromToken\":\"ERC20 token being sold\",\"_to\":\"address where swapped funds should be sent to\",\"_toToken\":\"ERC20 token being bought\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"swap(uint256,uint256,address,address,address)\":{\"notice\":\"Execute a swap from token to token assuming this contract already holds input tokensInteract through the router\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/adapters/BalancerlikeAdapter.sol\":\"BalancerlikeAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                              \\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IWETH.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\n\\nabstract contract YakAdapter is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(\\n        address indexed _tokenFrom, \\n        address indexed _tokenTo, \\n        uint _amountIn, \\n        uint _amountOut\\n    );\\n\\n    event UpdatedGasEstimate(\\n        address indexed _adapter,\\n        uint _newEstimate\\n    );\\n\\n    event Recovered(\\n        address indexed _asset, \\n        uint amount\\n    );\\n\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n    address internal constant AVAX = address(0);\\n    uint internal constant UINT_MAX = type(uint).max;\\n\\n    uint public swapGasEstimate;\\n    string public name;\\n\\n    function setSwapGasEstimate(uint _estimate) public onlyOwner {\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param _token address\\n     * @param _spender address\\n     */\\n    function revokeAllowance(address _token, address _spender) external onlyOwner {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param _tokenAddress token address\\n     * @param _tokenAmount amount to recover\\n     */\\n    function recoverERC20(address _tokenAddress, uint _tokenAmount) external onlyOwner {\\n        require(_tokenAmount > 0, 'YakAdapter: Nothing to recover');\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param _amount amount\\n     */\\n    function recoverAVAX(uint _amount) external onlyOwner {\\n        require(_amount > 0, 'YakAdapter: Nothing to recover');\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint _amountIn, \\n        address _tokenIn, \\n        address _tokenOut\\n    ) external view returns (uint) {\\n        return _query(\\n            _amountIn, \\n            _tokenIn, \\n            _tokenOut\\n        );\\n    }\\n\\n    /**\\n     * Execute a swap from token to token assuming this contract already holds input tokens\\n     * @notice Interact through the router\\n     * @param _amountIn input amount in starting token\\n     * @param _amountOut amount out in ending token\\n     * @param _fromToken ERC20 token being sold\\n     * @param _toToken ERC20 token being bought\\n     * @param _to address where swapped funds should be sent to\\n     */\\n    function swap(\\n        uint _amountIn, \\n        uint _amountOut,\\n        address _fromToken, \\n        address _toToken, \\n        address _to\\n    ) external {\\n        _approveIfNeeded(_fromToken, _amountIn);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        emit YakAdapterSwap(\\n            _fromToken, \\n            _toToken,\\n            _amountIn, \\n            _amountOut \\n        );\\n    } \\n\\n    /**\\n     * @notice Return expected funds to user\\n     * @dev Skip if funds should stay in the contract\\n     * @param _token address\\n     * @param _amount tokens to return\\n     * @param _to address where funds should be sent to\\n     */\\n    function _returnTo(address _token, uint _amount, address _to) internal {\\n        if (address(this)!=_to) {\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Wrap AVAX\\n     * @param _amount amount\\n     */\\n    function _wrap(uint _amount) internal {\\n        IWETH(WAVAX).deposit{value: _amount}();\\n    }\\n\\n    /**\\n     * @notice Unwrap WAVAX\\n     * @param _amount amount\\n     */\\n    function _unwrap(uint _amount) internal {\\n        IWETH(WAVAX).withdraw(_amount);\\n    }\\n\\n    /**\\n     * @notice Internal implementation of a swap\\n     * @dev Must return tokens to address(this)\\n     * @dev Wrapping is handled external to this function\\n     * @param _amountIn amount being sold\\n     * @param _amountOut amount being bought\\n     * @param _fromToken ERC20 token being sold\\n     * @param _toToken ERC20 token being bought\\n     * @param _to Where recieved tokens are sent to\\n     */\\n    function _swap(\\n        uint _amountIn, \\n        uint _amountOut, \\n        address _fromToken, \\n        address _toToken, \\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint _amountIn,\\n        address _tokenIn, \\n        address _tokenOut\\n    ) internal virtual view returns (uint);\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Should use modifier `onlyOwner` to avoid griefing\\n     */\\n    function setAllowances() public virtual;\\n\\n    function _approveIfNeeded(address _tokenIn, uint _amount) internal virtual;\\n\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x8640baef184d9eec0190581dd4e19ee3c0aea5df1a8c0084694ac194900527fd\",\"license\":\"GPL-3.0-only\"},\"contracts/adapters/BalancerlikeAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// Supports Balancerlike pools\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"../lib/SafeMath.sol\\\";\\nimport \\\"../YakAdapter.sol\\\";\\nimport \\\"../interface/IVault.sol\\\";\\nimport \\\"../interface/IBasePool.sol\\\";\\nimport \\\"../interface/IMinimalSwapInfoPool.sol\\\";\\n\\ncontract BalancerlikeAdapter is YakAdapter {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    address public vault;\\n\\n    mapping(address => mapping(address => uint128)) internal poolToTokenIndex;\\n    mapping(address => mapping(address => address[])) internal tokensToPools;\\n\\n    constructor(\\n        string memory _name,\\n        address _vault,\\n        address[] memory _pools,\\n        uint256 _swapGasEstimate\\n    ) {\\n        name = _name;\\n        vault = _vault;\\n        addPools(_pools);\\n        setSwapGasEstimate(_swapGasEstimate);\\n    }\\n\\n    function addPools(address[] memory _pools) public onlyOwner {\\n        for (uint128 i = 0; i < _pools.length; i++) {\\n            address pool = _pools[i];\\n            bytes32 poolId = IBasePool(pool).getPoolId();\\n            (IERC20[] memory tokens, , ) = IVault(vault).getPoolTokens(poolId);\\n            for (uint128 j = 0; j < tokens.length; j++) {\\n                address token = address(tokens[j]);\\n                poolToTokenIndex[pool][token] = j;\\n                for (uint128 k = 0; k < tokens.length; k++) {\\n                    if (j != k) {\\n                        tokensToPools[token][address(tokens[k])].push(pool);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function removePools(address[] memory _pools) public onlyOwner {\\n        for (uint256 i = 0; i < _pools.length; i++) {\\n            address pool = _pools[i];\\n            bytes32 poolId = IBasePool(pool).getPoolId();\\n            (IERC20[] memory tokens, , ) = IVault(vault).getPoolTokens(poolId);\\n            for (uint128 j = 0; j < tokens.length; j++) {\\n                address token = address(tokens[j]);\\n                for (uint128 k = 0; k < tokens.length; k++) {\\n                    if (j != k) {\\n                        address[] memory currentPools = tokensToPools[token][\\n                            address(tokens[k])\\n                        ];\\n                        for (uint128 l = 0; l < currentPools.length; l++) {\\n                            if (currentPools[l] == pool) {\\n                                delete currentPools[l];\\n                            }\\n                        }\\n                        tokensToPools[token][address(tokens[k])] = currentPools;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function getPools(address tokenIn, address tokenOut)\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return tokensToPools[tokenIn][tokenOut];\\n    }\\n\\n    function setAllowances() public override onlyOwner {}\\n\\n    function _approveIfNeeded(address _tokenIn, uint256 _amount)\\n        internal\\n        override\\n    {\\n        uint256 allowance = IERC20(_tokenIn).allowance(address(this), vault);\\n        if (allowance < _amount) {\\n            IERC20(_tokenIn).safeApprove(vault, _amount);\\n        }\\n    }\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view override returns (uint256) {\\n        if (_amountIn == 0 || _tokenIn == _tokenOut) {\\n            return 0;\\n        }\\n\\n        address[] memory pools = getPools(_tokenIn, _tokenOut);\\n        if (pools.length == 0) {\\n            return 0;\\n        }\\n\\n        (, uint256 amountOut) = _getBestPoolForSwap(\\n            pools,\\n            _tokenIn,\\n            _tokenOut,\\n            _amountIn\\n        );\\n        return amountOut;\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address to\\n    ) internal override {\\n        address[] memory pools = getPools(_tokenIn, _tokenOut);\\n\\n        require(pools.length > 0, \\\"No pools for swapping\\\");\\n\\n        (address pool, ) = _getBestPoolForSwap(\\n            pools,\\n            _tokenIn,\\n            _tokenOut,\\n            _amountIn\\n        );\\n\\n        require(pool != address(0), \\\"Undefined pool\\\");\\n\\n        IVault.SingleSwap memory swap;\\n        swap.poolId = IBasePool(pool).getPoolId();\\n        swap.kind = IVault.SwapKind.GIVEN_IN;\\n        swap.assetIn = IAsset(_tokenIn);\\n        swap.assetOut = IAsset(_tokenOut);\\n        swap.amount = _amountIn;\\n        swap.userData = \\\"0x\\\";\\n\\n        IVault.FundManagement memory fund;\\n        fund.sender = address(this);\\n        fund.recipient = payable(to);\\n        fund.fromInternalBalance = false;\\n        fund.toInternalBalance = false;\\n\\n        IVault(vault).swap(swap, fund, _amountOut, block.timestamp);\\n    }\\n\\n    function _getBestPoolForSwap(\\n        address[] memory pools,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal view returns (address bestPool, uint256 amountOut) {\\n        amountOut = 0;\\n        bestPool = address(0);\\n        for (uint128 i; i < pools.length; i++) {\\n            address pool = pools[i];\\n\\n            if (pool == address(0)) {\\n                continue;\\n            }\\n\\n            IPoolSwapStructs.SwapRequest memory request;\\n            request.poolId = IBasePool(pool).getPoolId();\\n            request.kind = IVault.SwapKind.GIVEN_IN;\\n            request.tokenIn = IERC20(_tokenIn);\\n            request.tokenOut = IERC20(_tokenOut);\\n            request.amount = _amountIn;\\n            request.userData = \\\"0x\\\";\\n\\n            uint256 newAmountOut = _getAmountOut(request, pool);\\n            if (newAmountOut > amountOut) {\\n                amountOut = newAmountOut;\\n                bestPool = pool;\\n            }\\n        }\\n    }\\n\\n    function _getAmountOut(\\n        IPoolSwapStructs.SwapRequest memory request,\\n        address pool\\n    ) internal view returns (uint256 amountOut) {\\n        // Based on https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/vault/contracts/Swaps.sol#L275\\n        (, uint256[] memory balances, ) = IVault(vault).getPoolTokens(\\n            request.poolId\\n        );\\n\\n        uint256 tokenInTotal = balances[\\n            poolToTokenIndex[pool][address(request.tokenIn)]\\n        ];\\n        uint256 tokenOutTotal = balances[\\n            poolToTokenIndex[pool][address(request.tokenOut)]\\n        ];\\n\\n        amountOut = IMinimalSwapInfoPool(pool).onSwap(\\n            request,\\n            tokenInTotal,\\n            tokenOutTotal\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8ef2cc73c8d97729b855605911836b6eb557c6b0ea15f2ae4cf6e61c5c278f50\",\"license\":\"GPL-3.0-only\"},\"contracts/interface/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\",\"keccak256\":\"0x9a4ea1e4af38b1cde7a4a3b36520cbe6d556a3c1fae7fc28e0a7d135b3ac8515\",\"license\":\"MIT\"},\"contracts/interface/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\ninterface IBasePool is IPoolSwapStructs {\\n    function getPoolId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x87de213539676f42ae52a067cb59f640b780589f981f641cc071cb30532cd37a\",\"license\":\"MIT\"},\"contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface IERC20 {\\n    event Approval(address,address,uint);\\n    event Transfer(address,address,uint);\\n    function name() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function transferFrom(address,address,uint) external returns (bool);\\n    function allowance(address,address) external view returns (uint);\\n    function approve(address,uint) external returns (bool);\\n    function transfer(address,uint) external returns (bool);\\n    function balanceOf(address) external view returns (uint);\\n    function nonces(address) external view returns (uint);  // Only tokens that support permit\\n    function permit(address,address,uint256,uint256,uint8,bytes32,bytes32) external;  // Only tokens that support permit\\n    function swap(address,uint256) external;  // Only Avalanche bridge tokens \\n    function swapSupply(address) external view returns (uint);  // Only Avalanche bridge tokens \\n}\",\"keccak256\":\"0xc71d31ef4f838908478ceb97d1ba0d95c4046393bd1cf26d6079d57d7c094e8d\",\"license\":\"MIT\"},\"contracts/interface/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external view returns (uint256 amount);\\n}\",\"keccak256\":\"0xf0145adbe62539909b37f05dc73c5bebcb04e652f28c7ee063f3758b1fe028f4\",\"license\":\"MIT\"},\"contracts/interface/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\",\"keccak256\":\"0x7bdd10981bfa7638888a98ce0aa8ad735d03dccc1e66df650bb10575a431f5b9\",\"license\":\"MIT\"},\"contracts/interface/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IVault {\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n}\",\"keccak256\":\"0x072dd179d6142917f55a80901d0b6106f722d15d276317c5c8f58e5739bef0c3\",\"license\":\"MIT\"},\"contracts/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 amount) external;\\n    function deposit() external payable;\\n}\",\"keccak256\":\"0xaff69efb1b24f6448740e4c71a16d86eedcd2407606ac449dd09dad5043b7923\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8b25f8514264f6d0ed4279a311d1be64012183292b1e7d6707107928dbac1142\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: Caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: New owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1331d91852367ea5319eed242ef8ebbf245a0271f2b19093f5521ae206c9a1b3\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x95e46e79b970b6e35511a773d310d63d7de30a5314e9bbfc4d8b465acec6f521\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'SafeMath: ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'SafeMath: ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'SafeMath: ds-math-mul-overflow');\\n    }\\n}\",\"keccak256\":\"0xee319854a4e682f8fab4f0404aa9604c9eea8190f6ec72c9cc67f25785b3ae01\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002b9838038062002b98833981016040819052620000349162000721565b600062000040620000db565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35083516200009f90600290602087019062000491565b50600380546001600160a01b0319166001600160a01b038516179055620000c682620000df565b620000d181620003dc565b5050505062000875565b3390565b620000e9620000db565b6001600160a01b0316620000fc62000482565b6001600160a01b03161462000147576040805162461bcd60e51b8152602060048201819052602482015260008051602062002b78833981519152604482015290519081900360640190fd5b60005b8151816001600160801b03161015620003d857600082826001600160801b0316815181106200017557fe5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b158015620001bb57600080fd5b505afa158015620001d0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f6919062000708565b600354604051631f29a8cd60e31b81529192506000916001600160a01b039091169063f94d4668906200022e90859060040162000811565b60006040518083038186803b1580156200024757600080fd5b505afa1580156200025c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200028691908101906200062f565b5050905060005b8151816001600160801b03161015620003c757600082826001600160801b031681518110620002b857fe5b6020908102919091018101516001600160a01b038781166000908152600484526040808220928416825291909352822080546001600160801b0319166001600160801b03861617905591505b8351816001600160801b03161015620003bc57806001600160801b0316836001600160801b031614620003b3576001600160a01b0382166000908152600560205260408120855190919086906001600160801b0385169081106200036457fe5b6020908102919091018101516001600160a01b039081168352828201939093526040909101600090812080546001810182559082529190200180546001600160a01b0319169188169190911790555b60010162000304565b50506001016200028d565b5050600190920191506200014a9050565b5050565b620003e6620000db565b6001600160a01b0316620003f962000482565b6001600160a01b03161462000444576040805162461bcd60e51b8152602060048201819052602482015260008051602062002b78833981519152604482015290519081900360640190fd5b600181905560408051828152905130917ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a919081900360200190a250565b6000546001600160a01b031690565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620004c9576000855562000514565b82601f10620004e457805160ff191683800117855562000514565b8280016001018555821562000514579182015b8281111562000514578251825591602001919060010190620004f7565b506200052292915062000526565b5090565b5b8082111562000522576000815560010162000527565b80516200054a816200085c565b919050565b600082601f83011262000560578081fd5b815160206200057962000573836200083e565b6200081a565b828152818101908583018385028701840188101562000596578586fd5b855b85811015620005c1578151620005ae816200085c565b8452928401929084019060010162000598565b5090979650505050505050565b600082601f830112620005df578081fd5b81516020620005f262000573836200083e565b82815281810190858301838502870184018810156200060f578586fd5b855b85811015620005c15781518452928401929084019060010162000611565b60008060006060848603121562000644578283fd5b83516001600160401b03808211156200065b578485fd5b818601915086601f8301126200066f578485fd5b815160206200068262000573836200083e565b82815281810190858301838502870184018c10156200069f57898afd5b8996505b84871015620006ce578051620006b9816200085c565b835260019690960195918301918301620006a3565b5091890151919750909350505080821115620006e8578384fd5b50620006f786828701620005ce565b925050604084015190509250925092565b6000602082840312156200071a578081fd5b5051919050565b6000806000806080858703121562000737578081fd5b84516001600160401b03808211156200074e578283fd5b818701915087601f83011262000762578283fd5b8151818111156200076f57fe5b602062000785601f8301601f191682016200081a565b8281528a8284870101111562000799578586fd5b855b83811015620007b85785810183015182820184015282016200079b565b83811115620007c957868385840101525b509750620007d98982016200053d565b965050506040870151915080821115620007f1578283fd5b5062000800878288016200054f565b606096909601519497939650505050565b90815260200190565b6040518181016001600160401b03811182821017156200083657fe5b604052919050565b60006001600160401b038211156200085257fe5b5060209081020190565b6001600160a01b03811681146200087257600080fd5b50565b6122f380620008856000396000f3fe6080604052600436106100f75760003560e01c80638980f11f1161008a578063eab90da611610059578063eab90da61461028b578063ef99893a146102ab578063f2fde38b146102cb578063fbfa77cf146102eb576100fe565b80638980f11f146102145780638da5cb5b14610234578063b36a4ab114610256578063dbd9a4d414610276576100fe565b806369cff80d116100c657806369cff80d1461019d578063715018a6146101bf5780637ae26773146101d457806384a33e63146101f4576100fe565b806306fdde03146101035780634b1641401461012e5780634ebb7916146101505780635b1dc86f14610170576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b50610118610300565b6040516101259190611f60565b60405180910390f35b34801561013a57600080fd5b5061014e610149366004611bd5565b61038b565b005b34801561015c57600080fd5b5061014e61016b366004611d72565b610751565b34801561017c57600080fd5b5061019061018b366004611b72565b610882565b6040516101259190611f0a565b3480156101a957600080fd5b506101b2610905565b6040516101259190611f57565b3480156101cb57600080fd5b5061014e61090b565b3480156101e057600080fd5b5061014e6101ef366004611b72565b6109d6565b34801561020057600080fd5b5061014e61020f366004611d72565b610a5f565b34801561022057600080fd5b5061014e61022f366004611baa565b610b11565b34801561024057600080fd5b50610249610c31565b6040516101259190611ec3565b34801561026257600080fd5b5061014e610271366004611bd5565b610c40565b34801561028257600080fd5b5061014e610f47565b34801561029757600080fd5b5061014e6102a6366004611dcb565b610fbd565b3480156102b757600080fd5b506101b26102c6366004611d8a565b61102e565b3480156102d757600080fd5b5061014e6102e6366004611b56565b611045565b3480156102f757600080fd5b50610249611166565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103835780601f1061035857610100808354040283529160200191610383565b820191906000526020600020905b81548152906001019060200180831161036657829003601f168201915b505050505081565b610393611175565b6001600160a01b03166103a4610c31565b6001600160a01b0316146103ff576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60005b815181101561074d57600082828151811061041957fe5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561045e57600080fd5b505afa158015610472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104969190611d5a565b600354604051631f29a8cd60e31b81529192506000916001600160a01b039091169063f94d4668906104cc908590600401611f57565b60006040518083038186803b1580156104e457600080fd5b505afa1580156104f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105209190810190611c6e565b5050905060005b8151816001600160801b0316101561073d57600082826001600160801b03168151811061055057fe5b6020026020010151905060005b8351816001600160801b0316101561073357806001600160801b0316836001600160801b03161461072b576001600160a01b03821660009081526005602052604081208551829087906001600160801b0386169081106105b957fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561063557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610617575b5050505050905060005b8151816001600160801b031610156106ba57876001600160a01b031682826001600160801b03168151811061067057fe5b60200260200101516001600160a01b031614156106b25781816001600160801b03168151811061069c57fe5b6020026020010160006001600160a01b03168152505b60010161063f565b506001600160a01b0383166000908152600560205260408120865183929088906001600160801b0387169081106106ed57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090805190602001906107289291906119a3565b50505b60010161055d565b5050600101610527565b5050600190920191506104029050565b5050565b610759611175565b6001600160a01b031661076a610c31565b6001600160a01b0316146107c5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000811161081a576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b604051339082156108fc029083906000818181858888f19350505050158015610847573d6000803e3d6000fd5b506040805182815290516000917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a250565b6001600160a01b0380831660009081526005602090815260408083209385168352928152908290208054835181840281018401909452808452606093928301828280156108f857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116108da575b5050505050905092915050565b60015481565b610913611175565b6001600160a01b0316610924610c31565b6001600160a01b03161461097f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6109de611175565b6001600160a01b03166109ef610c31565b6001600160a01b031614610a4a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61074d6001600160a01b038316826000611179565b610a67611175565b6001600160a01b0316610a78610c31565b6001600160a01b031614610ad3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181905560408051828152905130917ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a919081900360200190a250565b610b19611175565b6001600160a01b0316610b2a610c31565b6001600160a01b031614610b85576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111610bda576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b610bee6001600160a01b03831633836112ae565b6040805182815290516001600160a01b038416917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a25050565b6000546001600160a01b031690565b610c48611175565b6001600160a01b0316610c59610c31565b6001600160a01b031614610cb4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60005b8151816001600160801b0316101561074d57600082826001600160801b031681518110610ce057fe5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2557600080fd5b505afa158015610d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5d9190611d5a565b600354604051631f29a8cd60e31b81529192506000916001600160a01b039091169063f94d466890610d93908590600401611f57565b60006040518083038186803b158015610dab57600080fd5b505afa158015610dbf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610de79190810190611c6e565b5050905060005b8151816001600160801b03161015610f3757600082826001600160801b031681518110610e1757fe5b6020908102919091018101516001600160a01b038781166000908152600484526040808220928416825291909352822080546fffffffffffffffffffffffffffffffff19166001600160801b03861617905591505b8351816001600160801b03161015610f2d57806001600160801b0316836001600160801b031614610f25576001600160a01b0382166000908152600560205260408120855190919086906001600160801b038516908110610ec957fe5b6020908102919091018101516001600160a01b0390811683528282019390935260409091016000908120805460018101825590825291902001805473ffffffffffffffffffffffffffffffffffffffff19169188169190911790555b600101610e6c565b5050600101610dee565b505060019092019150610cb79050565b610f4f611175565b6001600160a01b0316610f60610c31565b6001600160a01b031614610fbb576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b565b610fc783866112cd565b610fd48585858585611377565b816001600160a01b0316836001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8787604051808381526020018281526020019250505060405180910390a35050505050565b600061103b848484611571565b90505b9392505050565b61104d611175565b6001600160a01b031661105e610c31565b6001600160a01b0316146110b9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166110fe5760405162461bcd60e51b81526004018080602001828103825260268152602001806122986026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b3390565b8015806112015750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906111af9030908690600401611ed7565b60206040518083038186803b1580156111c757600080fd5b505afa1580156111db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ff9190611d5a565b155b6112265760405162461bcd60e51b815260040161121d90612073565b60405180910390fd5b6112a98363095ea7b360e01b8484604051602401611245929190611ef1565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526115d9565b505050565b6112a98363a9059cbb60e01b8484604051602401611245929190611ef1565b600354604051636eb1769f60e11b81526000916001600160a01b038086169263dd62ed3e92611303923092911690600401611ed7565b60206040518083038186803b15801561131b57600080fd5b505afa15801561132f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113539190611d5a565b9050818110156112a9576003546112a9906001600160a01b03858116911684611179565b60006113838484610882565b905060008151116113a65760405162461bcd60e51b815260040161121d90611f73565b60006113b48286868a611695565b5090506001600160a01b0381166113dd5760405162461bcd60e51b815260040161121d90611faa565b6113e5611a15565b816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561141e57600080fd5b505afa158015611432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114569190611d5a565b8152600060208201819052506001600160a01b0380871660408084019190915290861660608301526080820189905280518082019091526002815261060f60f31b602082015260a08201526114a9611a5e565b3081526001600160a01b03858116604080840191909152600060208401819052606084015260035490517f52bbbe290000000000000000000000000000000000000000000000000000000081529116906352bbbe299061151390859085908d9042906004016120d0565b602060405180830381600087803b15801561152d57600080fd5b505af1158015611541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115659190611d5a565b50505050505050505050565b60008315806115915750816001600160a01b0316836001600160a01b0316145b1561159e5750600061103e565b60006115aa8484610882565b90508051600014156115c057600091505061103e565b60006115ce82868689611695565b979650505050505050565b600080836001600160a01b0316836040516115f49190611ea7565b6000604051808303816000865af19150503d8060008114611631576040519150601f19603f3d011682016040523d82523d6000602084013e611636565b606091505b5091509150816116585760405162461bcd60e51b815260040161121d90611fe1565b80511561168f57808060200190518101906116739190611d3a565b61168f5760405162461bcd60e51b815260040161121d90612016565b50505050565b600080805b8651816001600160801b031610156117de57600087826001600160801b0316815181106116c357fe5b6020026020010151905060006001600160a01b0316816001600160a01b031614156116ee57506117d6565b6116f6611a85565b816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561172f57600080fd5b505afa158015611743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117679190611d5a565b608082015260008082526001600160a01b038981166020808501919091529089166040808501919091526060840189905280518082019091526002815261060f60f31b918101919091526101008301526117c182846117e8565b9050848111156117d2578094508295505b5050505b60010161169a565b5094509492505050565b6003546080830151604051631f29a8cd60e31b815260009283926001600160a01b039091169163f94d46689161182091600401611f57565b60006040518083038186803b15801561183857600080fd5b505afa15801561184c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118749190810190611c6e565b506001600160a01b0380861660009081526004602090815260408083208a830151909416835292905290812054825192945090925083916001600160801b039091169081106118bf57fe5b6020908102919091018101516001600160a01b0380871660009081526004845260408082208a820151909316825291909352822054845191935084916001600160801b0390911690811061190f57fe5b60200260200101519050846001600160a01b0316639d2c110c8784846040518463ffffffff1660e01b81526004016119499392919061215b565b60206040518083038186803b15801561196157600080fd5b505afa158015611975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119999190611d5a565b9695505050505050565b828054828255906000526020600020908101928215611a05579160200282015b82811115611a05578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039091161782556020909201916001909101906119c3565b50611a11929150611ad5565b5090565b6040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b60408051610120810190915280600081526000602082018190526040820181905260608083018290526080830182905260a0830182905260c0830182905260e08301919091526101009091015290565b5b80821115611a115760008155600101611ad6565b600082601f830112611afa578081fd5b81516020611b0f611b0a83612235565b612211565b8281528181019085830183850287018401881015611b2b578586fd5b855b85811015611b4957815184529284019290840190600101611b2d565b5090979650505050505050565b600060208284031215611b67578081fd5b813561103e8161227f565b60008060408385031215611b84578081fd5b8235611b8f8161227f565b91506020830135611b9f8161227f565b809150509250929050565b60008060408385031215611bbc578182fd5b8235611bc78161227f565b946020939093013593505050565b60006020808385031215611be7578182fd5b823567ffffffffffffffff811115611bfd578283fd5b8301601f81018513611c0d578283fd5b8035611c1b611b0a82612235565b8181528381019083850185840285018601891015611c37578687fd5b8694505b83851015611c62578035611c4e8161227f565b835260019490940193918501918501611c3b565b50979650505050505050565b600080600060608486031215611c82578081fd5b835167ffffffffffffffff80821115611c99578283fd5b818601915086601f830112611cac578283fd5b81516020611cbc611b0a83612235565b82815281810190858301838502870184018c1015611cd8578788fd5b8796505b84871015611d03578051611cef8161227f565b835260019690960195918301918301611cdc565b5091890151919750909350505080821115611d1c578283fd5b50611d2986828701611aea565b925050604084015190509250925092565b600060208284031215611d4b578081fd5b8151801515811461103e578182fd5b600060208284031215611d6b578081fd5b5051919050565b600060208284031215611d83578081fd5b5035919050565b600080600060608486031215611d9e578283fd5b833592506020840135611db08161227f565b91506040840135611dc08161227f565b809150509250925092565b600080600080600060a08688031215611de2578081fd5b85359450602086013593506040860135611dfb8161227f565b92506060860135611e0b8161227f565b91506080860135611e1b8161227f565b809150509295509295909350565b6001600160a01b03169052565b60008151808452611e4e816020860160208601612253565b601f01601f19169290920160200192915050565b60028110611e6c57fe5b9052565b6001600160a01b03808251168352602082015115156020840152806040830151166040840152506060810151151560608301525050565b60008251611eb9818460208701612253565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015611f4b5783516001600160a01b031683529284019291840191600101611f26565b50909695505050505050565b90815260200190565b60006020825261103e6020830184611e36565b60208082526015908201527f4e6f20706f6f6c7320666f72207377617070696e670000000000000000000000604082015260600190565b6020808252600e908201527f556e646566696e656420706f6f6c000000000000000000000000000000000000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b600060e08252855160e083015260208601516120f0610100840182611e62565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c06101808401526121396101a0840182611e36565b9150506121496020830186611e70565b60a082019390935260c0015292915050565b60006060825261216f606083018651611e62565b60208501516121816080840182611e29565b50604085015161219460a0840182611e29565b50606085015160c0830152608085015160e083015260a0850151610100818185015260c087015191506101206121cc81860184611e29565b60e088015192506121e1610140860184611e29565b8188015192508061016086015250506121fe610180840182611e36565b6020840195909552505060400152919050565b60405181810167ffffffffffffffff8111828210171561222d57fe5b604052919050565b600067ffffffffffffffff82111561224957fe5b5060209081020190565b60005b8381101561226e578181015183820152602001612256565b8381111561168f5750506000910152565b6001600160a01b038116811461229457600080fd5b5056fe4f776e61626c653a204e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220380dd749cfcc84d6f77a954bfddbba04ab56a4355297887b2ff1532a0074035964736f6c634300070600334f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c80638980f11f1161008a578063eab90da611610059578063eab90da61461028b578063ef99893a146102ab578063f2fde38b146102cb578063fbfa77cf146102eb576100fe565b80638980f11f146102145780638da5cb5b14610234578063b36a4ab114610256578063dbd9a4d414610276576100fe565b806369cff80d116100c657806369cff80d1461019d578063715018a6146101bf5780637ae26773146101d457806384a33e63146101f4576100fe565b806306fdde03146101035780634b1641401461012e5780634ebb7916146101505780635b1dc86f14610170576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b50610118610300565b6040516101259190611f60565b60405180910390f35b34801561013a57600080fd5b5061014e610149366004611bd5565b61038b565b005b34801561015c57600080fd5b5061014e61016b366004611d72565b610751565b34801561017c57600080fd5b5061019061018b366004611b72565b610882565b6040516101259190611f0a565b3480156101a957600080fd5b506101b2610905565b6040516101259190611f57565b3480156101cb57600080fd5b5061014e61090b565b3480156101e057600080fd5b5061014e6101ef366004611b72565b6109d6565b34801561020057600080fd5b5061014e61020f366004611d72565b610a5f565b34801561022057600080fd5b5061014e61022f366004611baa565b610b11565b34801561024057600080fd5b50610249610c31565b6040516101259190611ec3565b34801561026257600080fd5b5061014e610271366004611bd5565b610c40565b34801561028257600080fd5b5061014e610f47565b34801561029757600080fd5b5061014e6102a6366004611dcb565b610fbd565b3480156102b757600080fd5b506101b26102c6366004611d8a565b61102e565b3480156102d757600080fd5b5061014e6102e6366004611b56565b611045565b3480156102f757600080fd5b50610249611166565b6002805460408051602060018416156101000260001901909316849004601f810184900484028201840190925281815292918301828280156103835780601f1061035857610100808354040283529160200191610383565b820191906000526020600020905b81548152906001019060200180831161036657829003601f168201915b505050505081565b610393611175565b6001600160a01b03166103a4610c31565b6001600160a01b0316146103ff576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60005b815181101561074d57600082828151811061041957fe5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561045e57600080fd5b505afa158015610472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104969190611d5a565b600354604051631f29a8cd60e31b81529192506000916001600160a01b039091169063f94d4668906104cc908590600401611f57565b60006040518083038186803b1580156104e457600080fd5b505afa1580156104f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105209190810190611c6e565b5050905060005b8151816001600160801b0316101561073d57600082826001600160801b03168151811061055057fe5b6020026020010151905060005b8351816001600160801b0316101561073357806001600160801b0316836001600160801b03161461072b576001600160a01b03821660009081526005602052604081208551829087906001600160801b0386169081106105b957fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561063557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610617575b5050505050905060005b8151816001600160801b031610156106ba57876001600160a01b031682826001600160801b03168151811061067057fe5b60200260200101516001600160a01b031614156106b25781816001600160801b03168151811061069c57fe5b6020026020010160006001600160a01b03168152505b60010161063f565b506001600160a01b0383166000908152600560205260408120865183929088906001600160801b0387169081106106ed57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090805190602001906107289291906119a3565b50505b60010161055d565b5050600101610527565b5050600190920191506104029050565b5050565b610759611175565b6001600160a01b031661076a610c31565b6001600160a01b0316146107c5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000811161081a576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b604051339082156108fc029083906000818181858888f19350505050158015610847573d6000803e3d6000fd5b506040805182815290516000917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a250565b6001600160a01b0380831660009081526005602090815260408083209385168352928152908290208054835181840281018401909452808452606093928301828280156108f857602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116108da575b5050505050905092915050565b60015481565b610913611175565b6001600160a01b0316610924610c31565b6001600160a01b03161461097f576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6109de611175565b6001600160a01b03166109ef610c31565b6001600160a01b031614610a4a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b61074d6001600160a01b038316826000611179565b610a67611175565b6001600160a01b0316610a78610c31565b6001600160a01b031614610ad3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600181905560408051828152905130917ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a919081900360200190a250565b610b19611175565b6001600160a01b0316610b2a610c31565b6001600160a01b031614610b85576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60008111610bda576040805162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f7665720000604482015290519081900360640190fd5b610bee6001600160a01b03831633836112ae565b6040805182815290516001600160a01b038416917f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28919081900360200190a25050565b6000546001600160a01b031690565b610c48611175565b6001600160a01b0316610c59610c31565b6001600160a01b031614610cb4576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60005b8151816001600160801b0316101561074d57600082826001600160801b031681518110610ce057fe5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2557600080fd5b505afa158015610d39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5d9190611d5a565b600354604051631f29a8cd60e31b81529192506000916001600160a01b039091169063f94d466890610d93908590600401611f57565b60006040518083038186803b158015610dab57600080fd5b505afa158015610dbf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610de79190810190611c6e565b5050905060005b8151816001600160801b03161015610f3757600082826001600160801b031681518110610e1757fe5b6020908102919091018101516001600160a01b038781166000908152600484526040808220928416825291909352822080546fffffffffffffffffffffffffffffffff19166001600160801b03861617905591505b8351816001600160801b03161015610f2d57806001600160801b0316836001600160801b031614610f25576001600160a01b0382166000908152600560205260408120855190919086906001600160801b038516908110610ec957fe5b6020908102919091018101516001600160a01b0390811683528282019390935260409091016000908120805460018101825590825291902001805473ffffffffffffffffffffffffffffffffffffffff19169188169190911790555b600101610e6c565b5050600101610dee565b505060019092019150610cb79050565b610f4f611175565b6001600160a01b0316610f60610c31565b6001600160a01b031614610fbb576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b565b610fc783866112cd565b610fd48585858585611377565b816001600160a01b0316836001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8787604051808381526020018281526020019250505060405180910390a35050505050565b600061103b848484611571565b90505b9392505050565b61104d611175565b6001600160a01b031661105e610c31565b6001600160a01b0316146110b9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2043616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166110fe5760405162461bcd60e51b81526004018080602001828103825260268152602001806122986026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6003546001600160a01b031681565b3390565b8015806112015750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e906111af9030908690600401611ed7565b60206040518083038186803b1580156111c757600080fd5b505afa1580156111db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ff9190611d5a565b155b6112265760405162461bcd60e51b815260040161121d90612073565b60405180910390fd5b6112a98363095ea7b360e01b8484604051602401611245929190611ef1565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526115d9565b505050565b6112a98363a9059cbb60e01b8484604051602401611245929190611ef1565b600354604051636eb1769f60e11b81526000916001600160a01b038086169263dd62ed3e92611303923092911690600401611ed7565b60206040518083038186803b15801561131b57600080fd5b505afa15801561132f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113539190611d5a565b9050818110156112a9576003546112a9906001600160a01b03858116911684611179565b60006113838484610882565b905060008151116113a65760405162461bcd60e51b815260040161121d90611f73565b60006113b48286868a611695565b5090506001600160a01b0381166113dd5760405162461bcd60e51b815260040161121d90611faa565b6113e5611a15565b816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561141e57600080fd5b505afa158015611432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114569190611d5a565b8152600060208201819052506001600160a01b0380871660408084019190915290861660608301526080820189905280518082019091526002815261060f60f31b602082015260a08201526114a9611a5e565b3081526001600160a01b03858116604080840191909152600060208401819052606084015260035490517f52bbbe290000000000000000000000000000000000000000000000000000000081529116906352bbbe299061151390859085908d9042906004016120d0565b602060405180830381600087803b15801561152d57600080fd5b505af1158015611541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115659190611d5a565b50505050505050505050565b60008315806115915750816001600160a01b0316836001600160a01b0316145b1561159e5750600061103e565b60006115aa8484610882565b90508051600014156115c057600091505061103e565b60006115ce82868689611695565b979650505050505050565b600080836001600160a01b0316836040516115f49190611ea7565b6000604051808303816000865af19150503d8060008114611631576040519150601f19603f3d011682016040523d82523d6000602084013e611636565b606091505b5091509150816116585760405162461bcd60e51b815260040161121d90611fe1565b80511561168f57808060200190518101906116739190611d3a565b61168f5760405162461bcd60e51b815260040161121d90612016565b50505050565b600080805b8651816001600160801b031610156117de57600087826001600160801b0316815181106116c357fe5b6020026020010151905060006001600160a01b0316816001600160a01b031614156116ee57506117d6565b6116f6611a85565b816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561172f57600080fd5b505afa158015611743573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117679190611d5a565b608082015260008082526001600160a01b038981166020808501919091529089166040808501919091526060840189905280518082019091526002815261060f60f31b918101919091526101008301526117c182846117e8565b9050848111156117d2578094508295505b5050505b60010161169a565b5094509492505050565b6003546080830151604051631f29a8cd60e31b815260009283926001600160a01b039091169163f94d46689161182091600401611f57565b60006040518083038186803b15801561183857600080fd5b505afa15801561184c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118749190810190611c6e565b506001600160a01b0380861660009081526004602090815260408083208a830151909416835292905290812054825192945090925083916001600160801b039091169081106118bf57fe5b6020908102919091018101516001600160a01b0380871660009081526004845260408082208a820151909316825291909352822054845191935084916001600160801b0390911690811061190f57fe5b60200260200101519050846001600160a01b0316639d2c110c8784846040518463ffffffff1660e01b81526004016119499392919061215b565b60206040518083038186803b15801561196157600080fd5b505afa158015611975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119999190611d5a565b9695505050505050565b828054828255906000526020600020908101928215611a05579160200282015b82811115611a05578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039091161782556020909201916001909101906119c3565b50611a11929150611ad5565b5090565b6040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b60408051608081018252600080825260208201819052918101829052606081019190915290565b60408051610120810190915280600081526000602082018190526040820181905260608083018290526080830182905260a0830182905260c0830182905260e08301919091526101009091015290565b5b80821115611a115760008155600101611ad6565b600082601f830112611afa578081fd5b81516020611b0f611b0a83612235565b612211565b8281528181019085830183850287018401881015611b2b578586fd5b855b85811015611b4957815184529284019290840190600101611b2d565b5090979650505050505050565b600060208284031215611b67578081fd5b813561103e8161227f565b60008060408385031215611b84578081fd5b8235611b8f8161227f565b91506020830135611b9f8161227f565b809150509250929050565b60008060408385031215611bbc578182fd5b8235611bc78161227f565b946020939093013593505050565b60006020808385031215611be7578182fd5b823567ffffffffffffffff811115611bfd578283fd5b8301601f81018513611c0d578283fd5b8035611c1b611b0a82612235565b8181528381019083850185840285018601891015611c37578687fd5b8694505b83851015611c62578035611c4e8161227f565b835260019490940193918501918501611c3b565b50979650505050505050565b600080600060608486031215611c82578081fd5b835167ffffffffffffffff80821115611c99578283fd5b818601915086601f830112611cac578283fd5b81516020611cbc611b0a83612235565b82815281810190858301838502870184018c1015611cd8578788fd5b8796505b84871015611d03578051611cef8161227f565b835260019690960195918301918301611cdc565b5091890151919750909350505080821115611d1c578283fd5b50611d2986828701611aea565b925050604084015190509250925092565b600060208284031215611d4b578081fd5b8151801515811461103e578182fd5b600060208284031215611d6b578081fd5b5051919050565b600060208284031215611d83578081fd5b5035919050565b600080600060608486031215611d9e578283fd5b833592506020840135611db08161227f565b91506040840135611dc08161227f565b809150509250925092565b600080600080600060a08688031215611de2578081fd5b85359450602086013593506040860135611dfb8161227f565b92506060860135611e0b8161227f565b91506080860135611e1b8161227f565b809150509295509295909350565b6001600160a01b03169052565b60008151808452611e4e816020860160208601612253565b601f01601f19169290920160200192915050565b60028110611e6c57fe5b9052565b6001600160a01b03808251168352602082015115156020840152806040830151166040840152506060810151151560608301525050565b60008251611eb9818460208701612253565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015611f4b5783516001600160a01b031683529284019291840191600101611f26565b50909695505050505050565b90815260200190565b60006020825261103e6020830184611e36565b60208082526015908201527f4e6f20706f6f6c7320666f72207377617070696e670000000000000000000000604082015260600190565b6020808252600e908201527f556e646566696e656420706f6f6c000000000000000000000000000000000000604082015260600190565b6020808252818101527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b600060e08252855160e083015260208601516120f0610100840182611e62565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c06101808401526121396101a0840182611e36565b9150506121496020830186611e70565b60a082019390935260c0015292915050565b60006060825261216f606083018651611e62565b60208501516121816080840182611e29565b50604085015161219460a0840182611e29565b50606085015160c0830152608085015160e083015260a0850151610100818185015260c087015191506101206121cc81860184611e29565b60e088015192506121e1610140860184611e29565b8188015192508061016086015250506121fe610180840182611e36565b6020840195909552505060400152919050565b60405181810167ffffffffffffffff8111828210171561222d57fe5b604052919050565b600067ffffffffffffffff82111561224957fe5b5060209081020190565b60005b8381101561226e578181015183820152602001612256565b8381111561168f5750506000910152565b6001600160a01b038116811461229457600080fd5b5056fe4f776e61626c653a204e6577206f776e657220697320746865207a65726f2061646472657373a2646970667358221220380dd749cfcc84d6f77a954bfddbba04ab56a4355297887b2ff1532a0074035964736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recoverAVAX(uint256)": {
        "params": {
          "_amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "_tokenAddress": "token address",
          "_tokenAmount": "amount to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "_spender": "address",
          "_token": "address"
        }
      },
      "setAllowances()": {
        "details": "Should use modifier `onlyOwner` to avoid griefing"
      },
      "swap(uint256,uint256,address,address,address)": {
        "params": {
          "_amountIn": "input amount in starting token",
          "_amountOut": "amount out in ending token",
          "_fromToken": "ERC20 token being sold",
          "_to": "address where swapped funds should be sent to",
          "_toToken": "ERC20 token being bought"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "swap(uint256,uint256,address,address,address)": {
        "notice": "Execute a swap from token to token assuming this contract already holds input tokensInteract through the router"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7669,
        "contract": "contracts/adapters/BalancerlikeAdapter.sol:BalancerlikeAdapter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 50,
        "contract": "contracts/adapters/BalancerlikeAdapter.sol:BalancerlikeAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 52,
        "contract": "contracts/adapters/BalancerlikeAdapter.sol:BalancerlikeAdapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2280,
        "contract": "contracts/adapters/BalancerlikeAdapter.sol:BalancerlikeAdapter",
        "label": "vault",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2286,
        "contract": "contracts/adapters/BalancerlikeAdapter.sol:BalancerlikeAdapter",
        "label": "poolToTokenIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint128))"
      },
      {
        "astId": 2293,
        "contract": "contracts/adapters/BalancerlikeAdapter.sol:BalancerlikeAdapter",
        "label": "tokensToPools",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint128))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint128))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint128)"
      },
      "t_mapping(t_address,t_uint128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}