{
  "address": "0x7De32C76309aeB1025CBA3384caBe36326603046",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_initPools",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "AddPoolSupport",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "tkns",
          "type": "address[]"
        }
      ],
      "name": "PartialPoolSupport",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "RmPoolSupport",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "addPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tknIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tknOut",
          "type": "address"
        }
      ],
      "name": "getPoolForTkns",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        }
      ],
      "name": "rmPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tkns",
          "type": "address[]"
        }
      ],
      "name": "setPoolForTkns",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3bbf4a5042be8a63c0a291ea61ac52c4f9b6a7016134cba2cc91097a4d26a8f7",
  "receipt": {
    "to": null,
    "from": "0xd22044706DeA3c342f68396bEDBCf6a2536d951D",
    "contractAddress": "0x7De32C76309aeB1025CBA3384caBe36326603046",
    "transactionIndex": 3,
    "gasUsed": "2691079",
    "logsBloom": "0x0010c
    "blockHash": "0x35e311a539a59223ae85427a141ea1bbbecfcdbab31d883e25745ff7eac45e98",
    "transactionHash": "0x3bbf4a5042be8a63c0a291ea61ac52c4f9b6a7016134cba2cc91097a4d26a8f7",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 38587484,
        "transactionHash": "0x3bbf4a5042be8a63c0a291ea61ac52c4f9b6a7016134cba2cc91097a4d26a8f7",
        "address": "0x7De32C76309aeB1025CBA3384caBe36326603046",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x35e311a539a59223ae85427a141ea1bbbecfcdbab31d883e25745ff7eac45e98"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 38587484,
        "transactionHash": "0x3bbf4a5042be8a63c0a291ea61ac52c4f9b6a7016134cba2cc91097a4d26a8f7",
        "address": "0x7De32C76309aeB1025CBA3384caBe36326603046",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d",
          "0x000000000000000000000000d22044706dea3c342f68396bedbcf6a2536d951d"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x35e311a539a59223ae85427a141ea1bbbecfcdbab31d883e25745ff7eac45e98"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 38587484,
        "transactionHash": "0x3bbf4a5042be8a63c0a291ea61ac52c4f9b6a7016134cba2cc91097a4d26a8f7",
        "address": "0x7De32C76309aeB1025CBA3384caBe36326603046",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x0000000000000000000000007de32c76309aeb1025cba3384cabe36326603046"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000046cd0",
        "logIndex": 13,
        "blockHash": "0x35e311a539a59223ae85427a141ea1bbbecfcdbab31d883e25745ff7eac45e98"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 38587484,
        "transactionHash": "0x3bbf4a5042be8a63c0a291ea61ac52c4f9b6a7016134cba2cc91097a4d26a8f7",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000007de32c76309aeb1025cba3384cabe36326603046",
          "0x000000000000000000000000e3abc29b035874a9f6dcdb06f8f20d9975069d87"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 14,
        "blockHash": "0x35e311a539a59223ae85427a141ea1bbbecfcdbab31d883e25745ff7eac45e98"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 38587484,
        "transactionHash": "0x3bbf4a5042be8a63c0a291ea61ac52c4f9b6a7016134cba2cc91097a4d26a8f7",
        "address": "0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000007de32c76309aeb1025cba3384cabe36326603046",
          "0x000000000000000000000000e3abc29b035874a9f6dcdb06f8f20d9975069d87"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 15,
        "blockHash": "0x35e311a539a59223ae85427a141ea1bbbecfcdbab31d883e25745ff7eac45e98"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 38587484,
        "transactionHash": "0x3bbf4a5042be8a63c0a291ea61ac52c4f9b6a7016134cba2cc91097a4d26a8f7",
        "address": "0x7De32C76309aeB1025CBA3384caBe36326603046",
        "topics": [
          "0xa44f9b37332b817b40cfd72d9ef6521d5e628f32d9048fe78f3529aa13c174b2"
        ],
        "data": "0x000000000000000000000000e3abc29b035874a9f6dcdb06f8f20d9975069d87",
        "logIndex": 16,
        "blockHash": "0x35e311a539a59223ae85427a141ea1bbbecfcdbab31d883e25745ff7eac45e98"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 38587484,
        "transactionHash": "0x3bbf4a5042be8a63c0a291ea61ac52c4f9b6a7016134cba2cc91097a4d26a8f7",
        "address": "0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000007de32c76309aeb1025cba3384cabe36326603046",
          "0x000000000000000000000000c9bfc3efefe4cf96877009f75a61f5c1937e5d1a"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 17,
        "blockHash": "0x35e311a539a59223ae85427a141ea1bbbecfcdbab31d883e25745ff7eac45e98"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 38587484,
        "transactionHash": "0x3bbf4a5042be8a63c0a291ea61ac52c4f9b6a7016134cba2cc91097a4d26a8f7",
        "address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000007de32c76309aeb1025cba3384cabe36326603046",
          "0x000000000000000000000000c9bfc3efefe4cf96877009f75a61f5c1937e5d1a"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 18,
        "blockHash": "0x35e311a539a59223ae85427a141ea1bbbecfcdbab31d883e25745ff7eac45e98"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 38587484,
        "transactionHash": "0x3bbf4a5042be8a63c0a291ea61ac52c4f9b6a7016134cba2cc91097a4d26a8f7",
        "address": "0x7De32C76309aeB1025CBA3384caBe36326603046",
        "topics": [
          "0xa44f9b37332b817b40cfd72d9ef6521d5e628f32d9048fe78f3529aa13c174b2"
        ],
        "data": "0x000000000000000000000000c9bfc3efefe4cf96877009f75a61f5c1937e5d1a",
        "logIndex": 19,
        "blockHash": "0x35e311a539a59223ae85427a141ea1bbbecfcdbab31d883e25745ff7eac45e98"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 38587484,
        "transactionHash": "0x3bbf4a5042be8a63c0a291ea61ac52c4f9b6a7016134cba2cc91097a4d26a8f7",
        "address": "0x323665443CEf804A3b5206103304BD4872EA4253",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000007de32c76309aeb1025cba3384cabe36326603046",
          "0x000000000000000000000000108c990c93fa8e3cd88ddb13594d39f09d9b3c02"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 20,
        "blockHash": "0x35e311a539a59223ae85427a141ea1bbbecfcdbab31d883e25745ff7eac45e98"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 38587484,
        "transactionHash": "0x3bbf4a5042be8a63c0a291ea61ac52c4f9b6a7016134cba2cc91097a4d26a8f7",
        "address": "0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000007de32c76309aeb1025cba3384cabe36326603046",
          "0x000000000000000000000000108c990c93fa8e3cd88ddb13594d39f09d9b3c02"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 21,
        "blockHash": "0x35e311a539a59223ae85427a141ea1bbbecfcdbab31d883e25745ff7eac45e98"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 38587484,
        "transactionHash": "0x3bbf4a5042be8a63c0a291ea61ac52c4f9b6a7016134cba2cc91097a4d26a8f7",
        "address": "0x7De32C76309aeB1025CBA3384caBe36326603046",
        "topics": [
          "0xa44f9b37332b817b40cfd72d9ef6521d5e628f32d9048fe78f3529aa13c174b2"
        ],
        "data": "0x000000000000000000000000108c990c93fa8e3cd88ddb13594d39f09d9b3c02",
        "logIndex": 22,
        "blockHash": "0x35e311a539a59223ae85427a141ea1bbbecfcdbab31d883e25745ff7eac45e98"
      }
    ],
    "blockNumber": 38587484,
    "cumulativeGasUsed": "2977042",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "WombatAdapter",
    290000,
    [
      "0xE3Abc29B035874a9f6dCDB06f8F20d9975069D87",
      "0xC9bFC3eFeFe4CF96877009F75a61F5c1937e5d1a",
      "0x108c990c93Fa8E3cD88DDb13594D39f09D9B3C02"
    ]
  ],
  "solcInputHash": "6644ea8cf03a3dbf35c12288ca07aec1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_initPools\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"AddPoolSupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"tkns\",\"type\":\"address[]\"}],\"name\":\"PartialPoolSupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"RmPoolSupport\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"addPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tknIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tknOut\",\"type\":\"address\"}],\"name\":\"getPoolForTkns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"}],\"name\":\"rmPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tkns\",\"type\":\"address[]\"}],\"name\":\"setPoolForTkns\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/adapters/WombatAdapter.sol\":\"WombatAdapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\n\\nabstract contract YakAdapter is Maintainable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\\n    event Recovered(address indexed _asset, uint256 amount);\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n    uint256 public swapGasEstimate;\\n    string public name;\\n\\n    constructor(string memory _name, uint256 _gasEstimate) {\\n        setName(_name);\\n        setSwapGasEstimate(_gasEstimate);\\n    }\\n\\n    function setName(string memory _name) internal {\\n        require(bytes(_name).length != 0, \\\"Invalid adapter name\\\");\\n        name = _name;\\n    }\\n\\n    function setSwapGasEstimate(uint256 _estimate) public onlyMaintainer {\\n        require(_estimate != 0, \\\"Invalid gas-estimate\\\");\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    function revokeAllowance(address _token, address _spender) external onlyMaintainer {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\\n        require(_tokenAmount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\\n        require(_amount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (uint256) {\\n        return _query(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) external virtual {\\n        uint256 toBal0 = IERC20(_toToken).balanceOf(_to);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBal0;\\n        require(diff >= _amountOut, \\\"Insufficient amount-out\\\");\\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\\n    }\\n\\n    function _returnTo(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual returns (uint256);\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x107a35cefab5921f72dc79a2035e4abedf6975b2569649e2029b694019601b59\",\"license\":\"GPL-3.0-only\"},\"src/contracts/adapters/WombatAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n//                            ,=.\\n//                ,=\\\"\\\"\\\"\\\"==.__.=\\\"  o\\\".___\\n//          ,=.==\\\"                  ___/\\n//    ,==.,\\\"    ,          , \\\\,===\\\"\\\"\\n//   <     ,==)  \\\\\\\"'\\\"=._.==)  \\\\\\n//    `==''    `\\\"           `\\\"\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interface/IWombat.sol\\\";\\nimport \\\"../interface/IERC20.sol\\\";\\nimport \\\"../interface/IWETH.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\nimport \\\"../YakAdapter.sol\\\";\\n\\ncontract WombatAdapter is YakAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    event PartialPoolSupport(address pool, address[] tkns);\\n    event AddPoolSupport(address pool);\\n    event RmPoolSupport(address pool);\\n\\n    mapping(address => mapping(address => address)) private tknToTknToPool;\\n\\n    constructor(\\n        string memory _name,\\n        uint256 _swapGasEstimate,\\n        address[] memory _initPools\\n    ) YakAdapter(_name, _swapGasEstimate) {\\n        addPools(_initPools);\\n    }\\n\\n    function getPoolForTkns(address tknIn, address tknOut) public view returns (address) {\\n        return tknToTknToPool[tknIn][tknOut];\\n    }\\n\\n    function _approveIfNeeded(address tkn, address spender) internal {\\n        uint256 allowance = IERC20(tkn).allowance(address(this), spender);\\n        if (allowance < UINT_MAX) {\\n            IERC20(tkn).approve(spender, UINT_MAX);\\n        }\\n    }\\n\\n    // @dev Returns false if repeated tkns\\n    function _poolSupportsTkns(address pool, address[] memory tkns) internal view returns (bool) {\\n        address[] memory supportedTkns = IWombat(pool).getTokens();\\n        uint256 supportedCount;\\n        for (uint256 i = 0; i < supportedTkns.length; i++) {\\n            for (uint256 j = 0; j < tkns.length; j++) {\\n                if (supportedTkns[i] == tkns[j]) {\\n                    supportedCount++;\\n                    break;\\n                }\\n            }\\n        }\\n        return supportedCount == tkns.length;\\n    }\\n\\n    function _setPoolForTkns(address[] memory tkns, address pool) internal {\\n        for (uint256 i = 0; i < tkns.length; i++) {\\n            for (uint256 j = 0; j < tkns.length; j++) {\\n                if (i != j) {\\n                    tknToTknToPool[tkns[i]][tkns[j]] = pool;\\n                    if (pool != address(0)) {\\n                        _approveIfNeeded(tkns[i], pool);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function addPools(address[] memory pools) public onlyMaintainer {\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address pool = pools[i];\\n            address[] memory supportedTkns = IWombat(pool).getTokens();\\n            _setPoolForTkns(supportedTkns, pool);\\n            emit AddPoolSupport(pool);\\n        }\\n    }\\n\\n    function setPoolForTkns(address pool, address[] memory tkns) external onlyMaintainer {\\n        require(tkns.length > 1, \\\"At least two tkns\\\");\\n        require(pool != address(0), \\\"Only non-zero pool\\\");\\n        require(_poolSupportsTkns(pool, tkns), \\\"Pool does not support tkns\\\");\\n        // Assume above checks there is no repeats\\n        _setPoolForTkns(tkns, pool);\\n        emit PartialPoolSupport(pool, tkns);\\n    }\\n\\n    function rmPools(address[] calldata pools) external onlyMaintainer {\\n        for (uint256 i = 0; i < pools.length; i++) {\\n            address pool = pools[i];\\n            address[] memory supportedTkns = IWombat(pool).getTokens();\\n            _setPoolForTkns(supportedTkns, address(0));\\n            emit RmPoolSupport(pool);\\n        }\\n    }\\n\\n    function _query(uint256 _amountIn, address _tokenIn, address _tokenOut) internal view override returns (uint256) {\\n        address pool = getPoolForTkns(_tokenIn, _tokenOut);\\n        if (pool == address(0) || _amountIn == 0 || IWombat(pool).paused()) {\\n            return 0;\\n        }\\n        try IWombat(pool).quotePotentialSwap(_tokenIn, _tokenOut, int256(_amountIn)) returns (uint256 amountOut) {\\n            return amountOut;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address _to\\n    ) internal override {\\n        address pool = getPoolForTkns(_tokenIn, _tokenOut);\\n        IWombat(pool).swap(_tokenIn, _tokenOut, _amountIn, _amountOut, _to, block.timestamp);\\n    }\\n}\\n\",\"keccak256\":\"0x9d5c7a16e43366969b7e82f85b8896f9f59c5c30f3c908716d2b649654aa7b4e\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(address, address, uint256);\\n    event Transfer(address, address, uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\\n\\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7b2d64b5cf6350bd5590f96eaea048fcf0182b50fc22f1075adeed1a98325932\",\"license\":\"MIT\"},\"src/contracts/interface/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function withdraw(uint256 amount) external;\\n\\n    function deposit() external payable;\\n}\\n\",\"keccak256\":\"0x7b31ca489d1bdf6631d5cf8c6f8ff9dc4a5c881d801a525f4e592a6884b9d2ad\",\"license\":\"MIT\"},\"src/contracts/interface/IWombat.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWombat {\\n    // Views\\n    function quotePotentialSwap(\\n        address fromToken,\\n        address totoken,\\n        int256 fromAmount\\n    ) external view returns (uint256 potentialOutcome); // Second arg (haircut) is not used\\n\\n    function getTokens() external view returns (address[] memory);\\n\\n    function paused() external view returns (bool);\\n\\n    // Modifiers\\n    function swap(\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 minAmountOut,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n}\\n\",\"keccak256\":\"0x87fd863ce25301f26cb88999b969a3e9b02964079ff839d151cb7240c9f97095\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is Context, AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n        _setupRole(MAINTAINER_ROLE, msgSender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        address msgSender = _msgSender();\\n        renounceRole(role, msgSender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        address msgSender = _msgSender();\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        address msgSender = _msgSender();\\n        require(hasRole(MAINTAINER_ROLE, msgSender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcf17b3f89386f661ee6230c9774bc88a119f2385111279497bbb443209ad6bb2\",\"license\":\"MIT\"},\"src/contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d77601f615804eb7471002f23f9a4593f86ac295e7353c2e7545f51d4f81728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620030613803806200306183398101604081905262000034916200086b565b828233620000446000826200009e565b620000707f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826200009e565b506200007c82620000ae565b620000878162000117565b506200009590508162000213565b50505062000a19565b620000aa82826200039e565b5050565b8051620001025760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642061646170746572206e616d6500000000000000000000000060448201526064015b60405180910390fd5b8051620000aa906002906020840190620006be565b33600081815260008051602062003021833981519152602052604090205460ff16620001865760405162461bcd60e51b815260206004820152602860248201526000805160206200304183398151915260448201526734b73a30b4b732b960c11b6064820152608401620000f9565b81620001d55760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606401620000f9565b600182905560405182815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9060200160405180910390a25050565b33600081815260008051602062003021833981519152602052604090205460ff16620002825760405162461bcd60e51b815260206004820152602860248201526000805160206200304183398151915260448201526734b73a30b4b732b960c11b6064820152608401620000f9565b60005b825181101562000399576000838281518110620002b257634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015620002f857600080fd5b505afa1580156200030d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000337919081019062000804565b90506200034581836200043e565b6040516001600160a01b03831681527fa44f9b37332b817b40cfd72d9ef6521d5e628f32d9048fe78f3529aa13c174b29060200160405180910390a1505080806200039090620009db565b91505062000285565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000aa576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003fa3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60005b8251811015620003995760005b83518110156200058757808214620005725782600360008685815181106200048657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000206000868481518110620004d157634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060006001600160a01b0316836001600160a01b0316146200057257620005728483815181106200055d57634e487b7160e01b600052603260045260246000fd5b6020026020010151846200059d60201b60201c565b806200057e81620009db565b9150506200044e565b50806200059481620009db565b91505062000441565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919084169063dd62ed3e9060440160206040518083038186803b158015620005e957600080fd5b505afa158015620005fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000624919062000952565b9050600019811015620003995760405163095ea7b360e01b81526001600160a01b038381166004830152600019602483015284169063095ea7b390604401602060405180830381600087803b1580156200067d57600080fd5b505af115801562000692573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006b8919062000842565b50505050565b828054620006cc906200099e565b90600052602060002090601f016020900481019282620006f057600085556200073b565b82601f106200070b57805160ff19168380011785556200073b565b828001600101855582156200073b579182015b828111156200073b5782518255916020019190600101906200071e565b50620007499291506200074d565b5090565b5b808211156200074957600081556001016200074e565b600082601f83011262000775578081fd5b815160206001600160401b0382111562000793576200079362000a03565b8160051b620007a48282016200096b565b838152828101908684018388018501891015620007bf578687fd5b8693505b85841015620007f85780516001600160a01b0381168114620007e3578788fd5b835260019390930192918401918401620007c3565b50979650505050505050565b60006020828403121562000816578081fd5b81516001600160401b038111156200082c578182fd5b6200083a8482850162000764565b949350505050565b60006020828403121562000854578081fd5b8151801515811462000864578182fd5b9392505050565b60008060006060848603121562000880578182fd5b83516001600160401b038082111562000897578384fd5b818601915086601f830112620008ab578384fd5b815181811115620008c057620008c062000a03565b6020620008d6601f8301601f191682016200096b565b8281528982848701011115620008ea578687fd5b865b8381101562000909578581018301518282018401528201620008ec565b838111156200091a57878385840101525b5090880151604089015191975095509250508082111562000939578283fd5b50620009488682870162000764565b9150509250925092565b60006020828403121562000964578081fd5b5051919050565b604051601f8201601f191681016001600160401b038111828210171562000996576200099662000a03565b604052919050565b600181811c90821680620009b357607f821691505b60208210811415620009d557634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415620009fc57634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b6125f88062000a296000396000f3fe60806040526004361061018f5760003560e01c806384a33e63116100d6578063d547741f1161007f578063ef99893a11610059578063ef99893a146104be578063f2fde38b146104de578063f8742254146104fe57600080fd5b8063d547741f1461045e578063d8baf7cf1461047e578063eab90da61461049e57600080fd5b806391d14854116100b057806391d14854146103e5578063a217fddf14610429578063b36a4ab11461043e57600080fd5b806384a33e63146103855780638980f11f146103a55780638bb9c5bf146103c557600080fd5b80634490af06116101385780636b453c1f116101125780636b453c1f146102e857806371e8c643146103085780637ae267731461036557600080fd5b80634490af06146102925780634ebb7916146102b257806369cff80d146102d257600080fd5b8063248a9ca311610169578063248a9ca3146102145780632f2ff15d1461025257806336568abe1461027257600080fd5b806301ffc9a71461019b57806306fdde03146101d057806321901c6f146101f257600080fd5b3661019657005b600080fd5b3480156101a757600080fd5b506101bb6101b636600461223c565b610532565b60405190151581526020015b60405180910390f35b3480156101dc57600080fd5b506101e561059b565b6040516101c79190612412565b3480156101fe57600080fd5b5061021261020d366004612020565b610629565b005b34801561022057600080fd5b5061024461022f366004612200565b60009081526020819052604090206001015490565b6040519081526020016101c7565b34801561025e57600080fd5b5061021261026d366004612218565b610802565b34801561027e57600080fd5b5061021261028d366004612218565b61082c565b34801561029e57600080fd5b506102126102ad366004612099565b6108b8565b3480156102be57600080fd5b506102126102cd366004612200565b610a66565b3480156102de57600080fd5b5061024460015481565b3480156102f457600080fd5b50610212610303366004611fcc565b610bae565b34801561031457600080fd5b5061034d610323366004611fe8565b6001600160a01b039182166000908152600360209081526040808320938516835292905220541690565b6040516001600160a01b0390911681526020016101c7565b34801561037157600080fd5b50610212610380366004611fe8565b610bdb565b34801561039157600080fd5b506102126103a0366004612200565b610c7f565b3480156103b157600080fd5b506102126103c036600461206e565b610d92565b3480156103d157600080fd5b506102126103e0366004612200565b610ecd565b3480156103f157600080fd5b506101bb610400366004612218565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561043557600080fd5b50610244600081565b34801561044a57600080fd5b50610212610459366004612109565b610ed8565b34801561046a57600080fd5b50610212610479366004612218565b611073565b34801561048a57600080fd5b50610212610499366004611fcc565b611098565b3480156104aa57600080fd5b506102126104b93660046122bd565b6110c2565b3480156104ca57600080fd5b506102446104d936600461227c565b611287565b3480156104ea57600080fd5b506102126104f9366004611fcc565b61129e565b34801561050a57600080fd5b506102447f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061059557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b600280546105a89061252b565b80601f01602080910402602001604051908101604052809291908181526020018280546105d49061252b565b80156106215780601f106105f657610100808354040283529160200191610621565b820191906000526020600020905b81548152906001019060200180831161060457829003601f168201915b505050505081565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166106bd5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084015b60405180910390fd5b600182511161070e5760405162461bcd60e51b815260206004820152601160248201527f4174206c656173742074776f20746b6e7300000000000000000000000000000060448201526064016106b4565b6001600160a01b0383166107645760405162461bcd60e51b815260206004820152601260248201527f4f6e6c79206e6f6e2d7a65726f20706f6f6c000000000000000000000000000060448201526064016106b4565b61076e83836112b5565b6107ba5760405162461bcd60e51b815260206004820152601a60248201527f506f6f6c20646f6573206e6f7420737570706f727420746b6e7300000000000060448201526064016106b4565b6107c482846113f4565b7f969168e4253b0ca28d1578d402ebf55664e363e9efc0fb3e75b9031b53860d3083836040516107f59291906123b8565b60405180910390a1505050565b60008281526020819052604090206001015461081d8161153e565b6108278383611548565b505050565b6001600160a01b03811633146108aa5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016106b4565b6108b482826115e6565b5050565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166109475760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b4565b60005b82811015610a6057600084848381811061097457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109899190611fcc565b90506000816001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b1580156109c657600080fd5b505afa1580156109da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a029190810190612144565b9050610a0f8160006113f4565b6040516001600160a01b03831681527f623a1d97e033b45c5fd210ecd2964f6a030b6ce0b4b4a4864273e71a839e9c2f9060200160405180910390a150508080610a5890612566565b91505061094a565b50505050565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610af55760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b4565b60008211610b455760405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f766572000060448201526064016106b4565b604051339083156108fc029084906000818181858888f19350505050158015610b72573d6000803e3d6000fd5b506040518281526000907f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28906020015b60405180910390a25050565b610bd87f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610802565b50565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610c6a5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b4565b6108276001600160a01b038416836000611665565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610d0e5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b4565b81610d5b5760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d61746500000000000000000000000060448201526064016106b4565b600182905560405182815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a90602001610ba2565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610e215760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b4565b60008211610e715760405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f766572000060448201526064016106b4565b610e856001600160a01b03841633846117d8565b826001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2883604051610ec091815260200190565b60405180910390a2505050565b336108b4828261082c565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610f675760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b4565b60005b8251811015610827576000838281518110610f9557634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015610fda57600080fd5b505afa158015610fee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110169190810190612144565b905061102281836113f4565b6040516001600160a01b03831681527fa44f9b37332b817b40cfd72d9ef6521d5e628f32d9048fe78f3529aa13c174b29060200160405180910390a15050808061106b90612566565b915050610f6a565b60008281526020819052604090206001015461108e8161153e565b61082783836115e6565b610bd87f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582611073565b6040516370a0823160e01b81526001600160a01b038281166004830152600091908416906370a082319060240160206040518083038186803b15801561110757600080fd5b505afa15801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f9190612264565b905061114e8686868686611821565b6040516370a0823160e01b81526001600160a01b03838116600483015260009183918616906370a082319060240160206040518083038186803b15801561119457600080fd5b505afa1580156111a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cc9190612264565b6111d691906124d1565b9050858110156112285760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420616d6f756e742d6f757400000000000000000060448201526064016106b4565b836001600160a01b0316856001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8989604051611276929190918252602082015260400190565b60405180910390a350505050505050565b60006112948484846118e3565b90505b9392505050565b336112aa600083610802565b6108b460008261082c565b600080836001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b1580156112f157600080fd5b505afa158015611305573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261132d9190810190612144565b90506000805b82518110156113e75760005b85518110156113d45785818151811061136857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031684838151811061139957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156113c257826113ba81612566565b9350506113d4565b806113cc81612566565b91505061133f565b50806113df81612566565b915050611333565b5083511491505092915050565b60005b82518110156108275760005b835181101561152b5780821461151957826003600086858151811061143857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600086848151811061148257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060006001600160a01b0316836001600160a01b0316146115195761151984838151811061150b57634e487b7160e01b600052603260045260246000fd5b602002602001015184611a61565b8061152381612566565b915050611403565b508061153681612566565b9150506113f7565b610bd88133611b73565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108b4576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556115a23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156108b4576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b8015806116ee5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156116b457600080fd5b505afa1580156116c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ec9190612264565b155b6117605760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016106b4565b6040516001600160a01b03831660248201526044810182905261082790849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611bf1565b6040516001600160a01b0383166024820152604481018290526108279084907fa9059cbb000000000000000000000000000000000000000000000000000000009060640161178c565b6001600160a01b03838116600081815260036020908152604080832087861680855292528083205481517f9908fc8b00000000000000000000000000000000000000000000000000000000815260048101959095526024850192909252604484018a90526064840189905285851660848501524260a4850152519316928392639908fc8b9260c480830193919282900301818387803b1580156118c357600080fd5b505af11580156118d7573d6000803e3d6000fd5b50505050505050505050565b60008061191584846001600160a01b039182166000908152600360209081526040808320938516835292905220541690565b90506001600160a01b038116158061192b575084155b806119a25750806001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561196a57600080fd5b505afa15801561197e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a291906121e0565b156119b1576000915050611297565b6040517f4fdd64e50000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152848116602483015260448201879052821690634fdd64e59060640160206040518083038186803b158015611a1a57600080fd5b505afa925050508015611a4a575060408051601f3d908101601f19168201909252611a4791810190612264565b60015b611a58576000915050611297565b91506112979050565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919084169063dd62ed3e9060440160206040518083038186803b158015611aac57600080fd5b505afa158015611ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae49190612264565b90506000198110156108275760405163095ea7b360e01b81526001600160a01b038381166004830152600019602483015284169063095ea7b390604401602060405180830381600087803b158015611b3b57600080fd5b505af1158015611b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6091906121e0565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108b457611baf816001600160a01b03166014611d2d565b611bba836020611d2d565b604051602001611bcb929190612337565b60408051601f198184030181529082905262461bcd60e51b82526106b491600401612412565b600080836001600160a01b031683604051611c0c919061231b565b6000604051808303816000865af19150503d8060008114611c49576040519150601f19603f3d011682016040523d82523d6000602084013e611c4e565b606091505b509150915081611ca05760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460448201526064016106b4565b805115610a605780806020019051810190611cbb91906121e0565b610a605760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106b4565b60606000611d3c8360026124b2565b611d4790600261249a565b67ffffffffffffffff811115611d6d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d97576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611ddc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611e3557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611e598460026124b2565b611e6490600161249a565b90505b6001811115611f05577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611eb357634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611ed757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611efe81612514565b9050611e67565b5083156112975760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b4565b600082601f830112611f64578081fd5b81356020611f79611f7483612476565b612445565b80838252828201915082860187848660051b8901011115611f98578586fd5b855b85811015611fbf578135611fad816125ad565b84529284019290840190600101611f9a565b5090979650505050505050565b600060208284031215611fdd578081fd5b8135611297816125ad565b60008060408385031215611ffa578081fd5b8235612005816125ad565b91506020830135612015816125ad565b809150509250929050565b60008060408385031215612032578182fd5b823561203d816125ad565b9150602083013567ffffffffffffffff811115612058578182fd5b61206485828601611f54565b9150509250929050565b60008060408385031215612080578182fd5b823561208b816125ad565b946020939093013593505050565b600080602083850312156120ab578182fd5b823567ffffffffffffffff808211156120c2578384fd5b818501915085601f8301126120d5578384fd5b8135818111156120e3578485fd5b8660208260051b85010111156120f7578485fd5b60209290920196919550909350505050565b60006020828403121561211a578081fd5b813567ffffffffffffffff811115612130578182fd5b61213c84828501611f54565b949350505050565b60006020808385031215612156578182fd5b825167ffffffffffffffff81111561216c578283fd5b8301601f8101851361217c578283fd5b805161218a611f7482612476565b80828252848201915084840188868560051b87010111156121a9578687fd5b8694505b838510156121d45780516121c0816125ad565b8352600194909401939185019185016121ad565b50979650505050505050565b6000602082840312156121f1578081fd5b81518015158114611297578182fd5b600060208284031215612211578081fd5b5035919050565b6000806040838503121561222a578182fd5b823591506020830135612015816125ad565b60006020828403121561224d578081fd5b81356001600160e01b031981168114611297578182fd5b600060208284031215612275578081fd5b5051919050565b600080600060608486031215612290578081fd5b8335925060208401356122a2816125ad565b915060408401356122b2816125ad565b809150509250925092565b600080600080600060a086880312156122d4578283fd5b853594506020860135935060408601356122ed816125ad565b925060608601356122fd816125ad565b9150608086013561230d816125ad565b809150509295509295909350565b6000825161232d8184602087016124e8565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161236f8160178501602088016124e8565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516123ac8160288401602088016124e8565b01602801949350505050565b6000604082016001600160a01b03808616845260206040818601528286518085526060870191508288019450855b818110156124045785518516835294830194918301916001016123e6565b509098975050505050505050565b60208152600082518060208401526124318160408501602087016124e8565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561246e5761246e612597565b604052919050565b600067ffffffffffffffff82111561249057612490612597565b5060051b60200190565b600082198211156124ad576124ad612581565b500190565b60008160001904831182151516156124cc576124cc612581565b500290565b6000828210156124e3576124e3612581565b500390565b60005b838110156125035781810151838201526020016124eb565b83811115610a605750506000910152565b60008161252357612523612581565b506000190190565b600181811c9082168061253f57607f821691505b6020821081141561256057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561257a5761257a612581565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610bd857600080fdfea2646970667358221220af8bc7ff2adb9ad954e033da6ce8db99c78e040cf184b97a26ef13a36c53cc1b64736f6c63430008040033a54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d394d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d61",
  "deployedBytecode": "0x60806040526004361061018f5760003560e01c806384a33e63116100d6578063d547741f1161007f578063ef99893a11610059578063ef99893a146104be578063f2fde38b146104de578063f8742254146104fe57600080fd5b8063d547741f1461045e578063d8baf7cf1461047e578063eab90da61461049e57600080fd5b806391d14854116100b057806391d14854146103e5578063a217fddf14610429578063b36a4ab11461043e57600080fd5b806384a33e63146103855780638980f11f146103a55780638bb9c5bf146103c557600080fd5b80634490af06116101385780636b453c1f116101125780636b453c1f146102e857806371e8c643146103085780637ae267731461036557600080fd5b80634490af06146102925780634ebb7916146102b257806369cff80d146102d257600080fd5b8063248a9ca311610169578063248a9ca3146102145780632f2ff15d1461025257806336568abe1461027257600080fd5b806301ffc9a71461019b57806306fdde03146101d057806321901c6f146101f257600080fd5b3661019657005b600080fd5b3480156101a757600080fd5b506101bb6101b636600461223c565b610532565b60405190151581526020015b60405180910390f35b3480156101dc57600080fd5b506101e561059b565b6040516101c79190612412565b3480156101fe57600080fd5b5061021261020d366004612020565b610629565b005b34801561022057600080fd5b5061024461022f366004612200565b60009081526020819052604090206001015490565b6040519081526020016101c7565b34801561025e57600080fd5b5061021261026d366004612218565b610802565b34801561027e57600080fd5b5061021261028d366004612218565b61082c565b34801561029e57600080fd5b506102126102ad366004612099565b6108b8565b3480156102be57600080fd5b506102126102cd366004612200565b610a66565b3480156102de57600080fd5b5061024460015481565b3480156102f457600080fd5b50610212610303366004611fcc565b610bae565b34801561031457600080fd5b5061034d610323366004611fe8565b6001600160a01b039182166000908152600360209081526040808320938516835292905220541690565b6040516001600160a01b0390911681526020016101c7565b34801561037157600080fd5b50610212610380366004611fe8565b610bdb565b34801561039157600080fd5b506102126103a0366004612200565b610c7f565b3480156103b157600080fd5b506102126103c036600461206e565b610d92565b3480156103d157600080fd5b506102126103e0366004612200565b610ecd565b3480156103f157600080fd5b506101bb610400366004612218565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561043557600080fd5b50610244600081565b34801561044a57600080fd5b50610212610459366004612109565b610ed8565b34801561046a57600080fd5b50610212610479366004612218565b611073565b34801561048a57600080fd5b50610212610499366004611fcc565b611098565b3480156104aa57600080fd5b506102126104b93660046122bd565b6110c2565b3480156104ca57600080fd5b506102446104d936600461227c565b611287565b3480156104ea57600080fd5b506102126104f9366004611fcc565b61129e565b34801561050a57600080fd5b506102447f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061059557507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b600280546105a89061252b565b80601f01602080910402602001604051908101604052809291908181526020018280546105d49061252b565b80156106215780601f106105f657610100808354040283529160200191610621565b820191906000526020600020905b81548152906001019060200180831161060457829003601f168201915b505050505081565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166106bd5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084015b60405180910390fd5b600182511161070e5760405162461bcd60e51b815260206004820152601160248201527f4174206c656173742074776f20746b6e7300000000000000000000000000000060448201526064016106b4565b6001600160a01b0383166107645760405162461bcd60e51b815260206004820152601260248201527f4f6e6c79206e6f6e2d7a65726f20706f6f6c000000000000000000000000000060448201526064016106b4565b61076e83836112b5565b6107ba5760405162461bcd60e51b815260206004820152601a60248201527f506f6f6c20646f6573206e6f7420737570706f727420746b6e7300000000000060448201526064016106b4565b6107c482846113f4565b7f969168e4253b0ca28d1578d402ebf55664e363e9efc0fb3e75b9031b53860d3083836040516107f59291906123b8565b60405180910390a1505050565b60008281526020819052604090206001015461081d8161153e565b6108278383611548565b505050565b6001600160a01b03811633146108aa5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016106b4565b6108b482826115e6565b5050565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166109475760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b4565b60005b82811015610a6057600084848381811061097457634e487b7160e01b600052603260045260246000fd5b90506020020160208101906109899190611fcc565b90506000816001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b1580156109c657600080fd5b505afa1580156109da573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a029190810190612144565b9050610a0f8160006113f4565b6040516001600160a01b03831681527f623a1d97e033b45c5fd210ecd2964f6a030b6ce0b4b4a4864273e71a839e9c2f9060200160405180910390a150508080610a5890612566565b91505061094a565b50505050565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610af55760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b4565b60008211610b455760405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f766572000060448201526064016106b4565b604051339083156108fc029084906000818181858888f19350505050158015610b72573d6000803e3d6000fd5b506040518281526000907f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28906020015b60405180910390a25050565b610bd87f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610802565b50565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610c6a5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b4565b6108276001600160a01b038416836000611665565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610d0e5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b4565b81610d5b5760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d61746500000000000000000000000060448201526064016106b4565b600182905560405182815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a90602001610ba2565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610e215760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b4565b60008211610e715760405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f766572000060448201526064016106b4565b610e856001600160a01b03841633846117d8565b826001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2883604051610ec091815260200190565b60405180910390a2505050565b336108b4828261082c565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610f675760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b4565b60005b8251811015610827576000838281518110610f9557634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b158015610fda57600080fd5b505afa158015610fee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110169190810190612144565b905061102281836113f4565b6040516001600160a01b03831681527fa44f9b37332b817b40cfd72d9ef6521d5e628f32d9048fe78f3529aa13c174b29060200160405180910390a15050808061106b90612566565b915050610f6a565b60008281526020819052604090206001015461108e8161153e565b61082783836115e6565b610bd87f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582611073565b6040516370a0823160e01b81526001600160a01b038281166004830152600091908416906370a082319060240160206040518083038186803b15801561110757600080fd5b505afa15801561111b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113f9190612264565b905061114e8686868686611821565b6040516370a0823160e01b81526001600160a01b03838116600483015260009183918616906370a082319060240160206040518083038186803b15801561119457600080fd5b505afa1580156111a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cc9190612264565b6111d691906124d1565b9050858110156112285760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420616d6f756e742d6f757400000000000000000060448201526064016106b4565b836001600160a01b0316856001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa8989604051611276929190918252602082015260400190565b60405180910390a350505050505050565b60006112948484846118e3565b90505b9392505050565b336112aa600083610802565b6108b460008261082c565b600080836001600160a01b031663aa6ca8086040518163ffffffff1660e01b815260040160006040518083038186803b1580156112f157600080fd5b505afa158015611305573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261132d9190810190612144565b90506000805b82518110156113e75760005b85518110156113d45785818151811061136857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031684838151811061139957634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614156113c257826113ba81612566565b9350506113d4565b806113cc81612566565b91505061133f565b50806113df81612566565b915050611333565b5083511491505092915050565b60005b82518110156108275760005b835181101561152b5780821461151957826003600086858151811061143857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600086848151811061148257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060006001600160a01b0316836001600160a01b0316146115195761151984838151811061150b57634e487b7160e01b600052603260045260246000fd5b602002602001015184611a61565b8061152381612566565b915050611403565b508061153681612566565b9150506113f7565b610bd88133611b73565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108b4576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556115a23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156108b4576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b8015806116ee5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156116b457600080fd5b505afa1580156116c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ec9190612264565b155b6117605760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016106b4565b6040516001600160a01b03831660248201526044810182905261082790849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611bf1565b6040516001600160a01b0383166024820152604481018290526108279084907fa9059cbb000000000000000000000000000000000000000000000000000000009060640161178c565b6001600160a01b03838116600081815260036020908152604080832087861680855292528083205481517f9908fc8b00000000000000000000000000000000000000000000000000000000815260048101959095526024850192909252604484018a90526064840189905285851660848501524260a4850152519316928392639908fc8b9260c480830193919282900301818387803b1580156118c357600080fd5b505af11580156118d7573d6000803e3d6000fd5b50505050505050505050565b60008061191584846001600160a01b039182166000908152600360209081526040808320938516835292905220541690565b90506001600160a01b038116158061192b575084155b806119a25750806001600160a01b0316635c975abb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561196a57600080fd5b505afa15801561197e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a291906121e0565b156119b1576000915050611297565b6040517f4fdd64e50000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152848116602483015260448201879052821690634fdd64e59060640160206040518083038186803b158015611a1a57600080fd5b505afa925050508015611a4a575060408051601f3d908101601f19168201909252611a4791810190612264565b60015b611a58576000915050611297565b91506112979050565b604051636eb1769f60e11b81523060048201526001600160a01b0382811660248301526000919084169063dd62ed3e9060440160206040518083038186803b158015611aac57600080fd5b505afa158015611ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae49190612264565b90506000198110156108275760405163095ea7b360e01b81526001600160a01b038381166004830152600019602483015284169063095ea7b390604401602060405180830381600087803b158015611b3b57600080fd5b505af1158015611b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6091906121e0565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108b457611baf816001600160a01b03166014611d2d565b611bba836020611d2d565b604051602001611bcb929190612337565b60408051601f198184030181529082905262461bcd60e51b82526106b491600401612412565b600080836001600160a01b031683604051611c0c919061231b565b6000604051808303816000865af19150503d8060008114611c49576040519150601f19603f3d011682016040523d82523d6000602084013e611c4e565b606091505b509150915081611ca05760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460448201526064016106b4565b805115610a605780806020019051810190611cbb91906121e0565b610a605760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106b4565b60606000611d3c8360026124b2565b611d4790600261249a565b67ffffffffffffffff811115611d6d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611d97576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611ddc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611e3557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611e598460026124b2565b611e6490600161249a565b90505b6001811115611f05577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611eb357634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110611ed757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c93611efe81612514565b9050611e67565b5083156112975760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b4565b600082601f830112611f64578081fd5b81356020611f79611f7483612476565b612445565b80838252828201915082860187848660051b8901011115611f98578586fd5b855b85811015611fbf578135611fad816125ad565b84529284019290840190600101611f9a565b5090979650505050505050565b600060208284031215611fdd578081fd5b8135611297816125ad565b60008060408385031215611ffa578081fd5b8235612005816125ad565b91506020830135612015816125ad565b809150509250929050565b60008060408385031215612032578182fd5b823561203d816125ad565b9150602083013567ffffffffffffffff811115612058578182fd5b61206485828601611f54565b9150509250929050565b60008060408385031215612080578182fd5b823561208b816125ad565b946020939093013593505050565b600080602083850312156120ab578182fd5b823567ffffffffffffffff808211156120c2578384fd5b818501915085601f8301126120d5578384fd5b8135818111156120e3578485fd5b8660208260051b85010111156120f7578485fd5b60209290920196919550909350505050565b60006020828403121561211a578081fd5b813567ffffffffffffffff811115612130578182fd5b61213c84828501611f54565b949350505050565b60006020808385031215612156578182fd5b825167ffffffffffffffff81111561216c578283fd5b8301601f8101851361217c578283fd5b805161218a611f7482612476565b80828252848201915084840188868560051b87010111156121a9578687fd5b8694505b838510156121d45780516121c0816125ad565b8352600194909401939185019185016121ad565b50979650505050505050565b6000602082840312156121f1578081fd5b81518015158114611297578182fd5b600060208284031215612211578081fd5b5035919050565b6000806040838503121561222a578182fd5b823591506020830135612015816125ad565b60006020828403121561224d578081fd5b81356001600160e01b031981168114611297578182fd5b600060208284031215612275578081fd5b5051919050565b600080600060608486031215612290578081fd5b8335925060208401356122a2816125ad565b915060408401356122b2816125ad565b809150509250925092565b600080600080600060a086880312156122d4578283fd5b853594506020860135935060408601356122ed816125ad565b925060608601356122fd816125ad565b9150608086013561230d816125ad565b809150509295509295909350565b6000825161232d8184602087016124e8565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161236f8160178501602088016124e8565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516123ac8160288401602088016124e8565b01602801949350505050565b6000604082016001600160a01b03808616845260206040818601528286518085526060870191508288019450855b818110156124045785518516835294830194918301916001016123e6565b509098975050505050505050565b60208152600082518060208401526124318160408501602087016124e8565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561246e5761246e612597565b604052919050565b600067ffffffffffffffff82111561249057612490612597565b5060051b60200190565b600082198211156124ad576124ad612581565b500190565b60008160001904831182151516156124cc576124cc612581565b500290565b6000828210156124e3576124e3612581565b500390565b60005b838110156125035781810151838201526020016124eb565b83811115610a605750506000910152565b60008161252357612523612581565b506000190190565b600181811c9082168061253f57607f821691505b6020821081141561256057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561257a5761257a612581565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610bd857600080fdfea2646970667358221220af8bc7ff2adb9ad954e033da6ce8db99c78e040cf184b97a26ef13a36c53cc1b64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/adapters/WombatAdapter.sol:WombatAdapter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 718,
        "contract": "src/contracts/adapters/WombatAdapter.sol:WombatAdapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 720,
        "contract": "src/contracts/adapters/WombatAdapter.sol:WombatAdapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 1922,
        "contract": "src/contracts/adapters/WombatAdapter.sol:WombatAdapter",
        "label": "tknToTknToPool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/adapters/WombatAdapter.sol:WombatAdapter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/adapters/WombatAdapter.sol:WombatAdapter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}