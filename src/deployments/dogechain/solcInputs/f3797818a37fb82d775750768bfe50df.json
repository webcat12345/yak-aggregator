{
  "language": "Solidity",
  "sources": {
    "src/contracts/adapters/aAvaxAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ISAVAX.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ninterface IwAVAX {\n    function withdraw(uint256) external;\n}\n\n/**\n * @notice wAVAX -> sAVAX\n **/\ncontract SAvaxAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public constant SAVAX = 0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE;\n    address public constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n\n    constructor(uint256 _swapGasEstimate) YakAdapter(\"SAvaxAdapter\", _swapGasEstimate) {\n        _setAllowances();\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn == WAVAX && _tokenOut == SAVAX && !ISAVAX(SAVAX).mintingPaused() && !_exceedsCap(_amountIn)) {\n            amountOut = ISAVAX(SAVAX).getSharesByPooledAvax(_amountIn);\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        IwAVAX(WAVAX).withdraw(_amountIn);\n        uint256 shares = ISAVAX(SAVAX).submit{ value: _amountIn }();\n        require(shares >= _amountOut, \"YakAdapter: Amount-out too low\");\n        _returnTo(_tokenOut, shares, _to);\n    }\n\n    function _exceedsCap(uint256 _amountIn) internal view returns (bool) {\n        uint256 newBal = ISAVAX(SAVAX).totalPooledAvax() + _amountIn; // Assume U256::max won't be reached\n        return newBal > ISAVAX(SAVAX).totalPooledAvaxCap();\n    }\n\n    function _setAllowances() internal {\n        IERC20(WAVAX).safeApprove(WAVAX, UINT_MAX);\n    }\n}\n"
    },
    "src/contracts/interface/ISAVAX.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface ISAVAX is IERC20 {\n    function getSharesByPooledAvax(uint256) external view returns (uint256);\n\n    function submit() external payable returns (uint256);\n\n    function mintingPaused() external view returns (bool);\n\n    function totalPooledAvax() external view returns (uint256);\n\n    function totalPooledAvaxCap() external view returns (uint256);\n}\n"
    },
    "src/contracts/lib/SafeERC20.sol": {
      "content": "// This is a simplified version of OpenZepplin's SafeERC20 library\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../interface/IERC20.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "src/contracts/YakAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"./interface/IERC20.sol\";\nimport \"./interface/IWETH.sol\";\nimport \"./lib/SafeERC20.sol\";\nimport \"./lib/Ownable.sol\";\n\nabstract contract YakAdapter is Ownable {\n    using SafeERC20 for IERC20;\n\n    event YakAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\n    event Recovered(address indexed _asset, uint256 amount);\n\n    uint256 internal constant UINT_MAX = type(uint256).max;\n    uint256 public swapGasEstimate;\n    string public name;\n\n    constructor(string memory _name, uint256 _gasEstimate) {\n        setName(_name);\n        setSwapGasEstimate(_gasEstimate);\n    }\n\n    function setName(string memory _name) internal {\n        require(bytes(_name).length != 0, \"Invalid adapter name\");\n        name = _name;\n    }\n\n    function setSwapGasEstimate(uint256 _estimate) public onlyOwner {\n        require(_estimate != 0, \"Invalid gas-estimate\");\n        swapGasEstimate = _estimate;\n        emit UpdatedGasEstimate(address(this), _estimate);\n    }\n\n    function revokeAllowance(address _token, address _spender) external onlyOwner {\n        IERC20(_token).safeApprove(_spender, 0);\n    }\n\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\n        require(_tokenAmount > 0, \"YakAdapter: Nothing to recover\");\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\n        emit Recovered(_tokenAddress, _tokenAmount);\n    }\n\n    function recoverAVAX(uint256 _amount) external onlyOwner {\n        require(_amount > 0, \"YakAdapter: Nothing to recover\");\n        payable(msg.sender).transfer(_amount);\n        emit Recovered(address(0), _amount);\n    }\n\n    function query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) external view returns (uint256) {\n        return _query(_amountIn, _tokenIn, _tokenOut);\n    }\n\n    function swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _fromToken,\n        address _toToken,\n        address _to\n    ) external {\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\n    }\n\n    function _returnTo(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) internal {\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _fromToken,\n        address _toToken,\n        address _to\n    ) internal virtual;\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view virtual returns (uint256);\n\n    receive() external payable {}\n}\n"
    },
    "src/contracts/interface/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    event Approval(address, address, uint256);\n    event Transfer(address, address, uint256);\n\n    function name() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function allowance(address, address) external view returns (uint256);\n\n    function approve(address, uint256) external returns (bool);\n\n    function transfer(address, uint256) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\n\n    function permit(\n        address,\n        address,\n        uint256,\n        uint256,\n        uint8,\n        bytes32,\n        bytes32\n    ) external; // Only tokens that support permit\n\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\n\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\n}\n"
    },
    "src/contracts/interface/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function withdraw(uint256 amount) external;\n\n    function deposit() external payable;\n}\n"
    },
    "src/contracts/lib/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: Caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: New owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "src/contracts/lib/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        // silence state mutability warning without generating bytecode\n        // (see https://github.com/ethereum/solidity/issues/2691)\n        this;\n        return msg.data;\n    }\n}\n"
    },
    "src/contracts/adapters/XJoeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IxJOE.sol\";\nimport \"../lib/SafeERC20.sol\";\n\nimport \"../YakAdapter.sol\";\n\ncontract XJoeAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public constant JOE = 0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd;\n    address public constant XJOE = 0x57319d41F71E81F3c65F2a47CA4e001EbAFd4F33;\n\n    constructor(uint256 _swapGasEstimate) YakAdapter(\"XJoeAdapter\", _swapGasEstimate) {\n        setAllowances();\n    }\n\n    function setAllowances() internal {\n        IERC20(XJOE).safeApprove(XJOE, UINT_MAX);\n        IERC20(JOE).safeApprove(XJOE, UINT_MAX);\n    }\n\n    function queryEnter(uint256 _amountIn) internal view returns (uint256) {\n        uint256 totalJoe = IERC20(JOE).balanceOf(XJOE);\n        uint256 totalShares = IxJOE(XJOE).totalSupply();\n        if (totalShares == 0 || totalJoe == 0) {\n            return _amountIn;\n        }\n        return (_amountIn * totalShares) / totalJoe;\n    }\n\n    function queryLeave(uint256 _amountIn) internal view returns (uint256) {\n        uint256 totalShares = IxJOE(XJOE).totalSupply();\n        return (_amountIn * IERC20(JOE).balanceOf(XJOE)) / totalShares;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn == JOE && _tokenOut == XJOE) {\n            return queryEnter(_amountIn);\n        } else if (_tokenIn == XJOE && _tokenOut == JOE) {\n            return queryLeave(_amountIn);\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        if (_tokenIn == JOE && _tokenOut == XJOE) {\n            IxJOE(XJOE).enter(_amountIn);\n        } else if (_tokenIn == XJOE && _tokenOut == JOE) {\n            IxJOE(XJOE).leave(_amountIn);\n        } else {\n            revert(\"XJoeAdapter: Unsupported token\");\n        }\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/interface/IxJOE.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IxJOE {\n    function leave(uint256) external;\n\n    function enter(uint256) external;\n\n    function totalSupply() external view returns (uint256);\n}\n"
    },
    "src/contracts/YakRouter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./lib/BytesManipulation.sol\";\nimport \"./interface/IAdapter.sol\";\nimport \"./interface/IERC20.sol\";\nimport \"./interface/IWETH.sol\";\nimport \"./lib/SafeERC20.sol\";\nimport \"./lib/Ownable.sol\";\n\ncontract YakRouter is Ownable {\n    using SafeERC20 for IERC20;\n\n    address public immutable WNATIVE;\n    address public constant NATIVE = address(0);\n    string public constant NAME = \"YakRouter\";\n    uint256 public constant FEE_DENOMINATOR = 1e4;\n    uint256 public MIN_FEE = 0;\n    address public FEE_CLAIMER;\n    address[] public TRUSTED_TOKENS;\n    address[] public ADAPTERS;\n\n    event Recovered(address indexed _asset, uint256 amount);\n    event UpdatedTrustedTokens(address[] _newTrustedTokens);\n    event UpdatedAdapters(address[] _newAdapters);\n    event UpdatedMinFee(uint256 _oldMinFee, uint256 _newMinFee);\n    event UpdatedFeeClaimer(address _oldFeeClaimer, address _newFeeClaimer);\n    event YakSwap(address indexed _tokenIn, address indexed _tokenOut, uint256 _amountIn, uint256 _amountOut);\n\n    struct Query {\n        address adapter;\n        address tokenIn;\n        address tokenOut;\n        uint256 amountOut;\n    }\n\n    struct Offer {\n        bytes amounts;\n        bytes adapters;\n        bytes path;\n        uint256 gasEstimate;\n    }\n\n    struct FormattedOffer {\n        uint256[] amounts;\n        address[] adapters;\n        address[] path;\n        uint256 gasEstimate;\n    }\n\n    struct Trade {\n        uint256 amountIn;\n        uint256 amountOut;\n        address[] path;\n        address[] adapters;\n    }\n\n    constructor(\n        address[] memory _adapters,\n        address[] memory _trustedTokens,\n        address _feeClaimer,\n        address _wrapped_native\n    ) {\n        _setAllowanceForWrapping(_wrapped_native);\n        setTrustedTokens(_trustedTokens);\n        setFeeClaimer(_feeClaimer);\n        setAdapters(_adapters);\n        WNATIVE = _wrapped_native;\n    }\n\n    // -- SETTERS --\n\n    function _setAllowanceForWrapping(address _wnative) internal {\n        IERC20(_wnative).safeApprove(_wnative, type(uint256).max);\n    }\n\n    function setTrustedTokens(address[] memory _trustedTokens) public onlyOwner {\n        emit UpdatedTrustedTokens(_trustedTokens);\n        TRUSTED_TOKENS = _trustedTokens;\n    }\n\n    function setAdapters(address[] memory _adapters) public onlyOwner {\n        emit UpdatedAdapters(_adapters);\n        ADAPTERS = _adapters;\n    }\n\n    function setMinFee(uint256 _fee) external onlyOwner {\n        emit UpdatedMinFee(MIN_FEE, _fee);\n        MIN_FEE = _fee;\n    }\n\n    function setFeeClaimer(address _claimer) public onlyOwner {\n        emit UpdatedFeeClaimer(FEE_CLAIMER, _claimer);\n        FEE_CLAIMER = _claimer;\n    }\n\n    //  -- GENERAL --\n\n    function trustedTokensCount() external view returns (uint256) {\n        return TRUSTED_TOKENS.length;\n    }\n\n    function adaptersCount() external view returns (uint256) {\n        return ADAPTERS.length;\n    }\n\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\n        require(_tokenAmount > 0, \"YakRouter: Nothing to recover\");\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\n        emit Recovered(_tokenAddress, _tokenAmount);\n    }\n\n    function recoverAVAX(uint256 _amount) external onlyOwner {\n        require(_amount > 0, \"YakRouter: Nothing to recover\");\n        payable(msg.sender).transfer(_amount);\n        emit Recovered(address(0), _amount);\n    }\n\n    // Fallback\n    receive() external payable {}\n\n    // -- HELPERS --\n\n    function _applyFee(uint256 _amountIn, uint256 _fee) internal view returns (uint256) {\n        require(_fee >= MIN_FEE, \"YakRouter: Insufficient fee\");\n        return (_amountIn * (FEE_DENOMINATOR - _fee)) / FEE_DENOMINATOR;\n    }\n\n    function _wrap(uint256 _amount) internal {\n        IWETH(WNATIVE).deposit{ value: _amount }();\n    }\n\n    function _unwrap(uint256 _amount) internal {\n        IWETH(WNATIVE).withdraw(_amount);\n    }\n\n    /**\n     * @notice Return tokens to user\n     * @dev Pass address(0) for AVAX\n     * @param _token address\n     * @param _amount tokens to return\n     * @param _to address where funds should be sent to\n     */\n    function _returnTokensTo(\n        address _token,\n        uint256 _amount,\n        address _to\n    ) internal {\n        if (address(this) != _to) {\n            if (_token == NATIVE) {\n                payable(_to).transfer(_amount);\n            } else {\n                IERC20(_token).safeTransfer(_to, _amount);\n            }\n        }\n    }\n\n    /**\n     * Makes a deep copy of Offer struct\n     */\n    function _cloneOffer(Offer memory _queries) internal pure returns (Offer memory) {\n        return Offer(_queries.amounts, _queries.adapters, _queries.path, _queries.gasEstimate);\n    }\n\n    /**\n     * Appends Query elements to Offer struct\n     */\n    function _addQuery(\n        Offer memory _queries,\n        uint256 _amount,\n        address _adapter,\n        address _tokenOut,\n        uint256 _gasEstimate\n    ) internal pure {\n        _queries.path = BytesManipulation.mergeBytes(_queries.path, BytesManipulation.toBytes(_tokenOut));\n        _queries.amounts = BytesManipulation.mergeBytes(_queries.amounts, BytesManipulation.toBytes(_amount));\n        _queries.adapters = BytesManipulation.mergeBytes(_queries.adapters, BytesManipulation.toBytes(_adapter));\n        _queries.gasEstimate += _gasEstimate;\n    }\n\n    /**\n     * Converts byte-arrays to an array of integers\n     */\n    function _formatAmounts(bytes memory _amounts) internal pure returns (uint256[] memory) {\n        // Format amounts\n        uint256 chunks = _amounts.length / 32;\n        uint256[] memory amountsFormatted = new uint256[](chunks);\n        for (uint256 i = 0; i < chunks; i++) {\n            amountsFormatted[i] = BytesManipulation.bytesToUint256(i * 32 + 32, _amounts);\n        }\n        return amountsFormatted;\n    }\n\n    /**\n     * Converts byte-array to an array of addresses\n     */\n    function _formatAddresses(bytes memory _addresses) internal pure returns (address[] memory) {\n        uint256 chunks = _addresses.length / 32;\n        address[] memory addressesFormatted = new address[](chunks);\n        for (uint256 i = 0; i < chunks; i++) {\n            addressesFormatted[i] = BytesManipulation.bytesToAddress(i * 32 + 32, _addresses);\n        }\n        return addressesFormatted;\n    }\n\n    /**\n     * Formats elements in the Offer object from byte-arrays to integers and addresses\n     */\n    function _formatOffer(Offer memory _queries) internal pure returns (FormattedOffer memory) {\n        return\n            FormattedOffer(\n                _formatAmounts(_queries.amounts),\n                _formatAddresses(_queries.adapters),\n                _formatAddresses(_queries.path),\n                _queries.gasEstimate\n            );\n    }\n\n    // -- QUERIES --\n\n    /**\n     * Query single adapter\n     */\n    function queryAdapter(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint8 _index\n    ) external view returns (uint256) {\n        IAdapter _adapter = IAdapter(ADAPTERS[_index]);\n        uint256 amountOut = _adapter.query(_amountIn, _tokenIn, _tokenOut);\n        return amountOut;\n    }\n\n    /**\n     * Query specified adapters\n     */\n    function queryNoSplit(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint8[] calldata _options\n    ) public view returns (Query memory) {\n        Query memory bestQuery;\n        for (uint8 i; i < _options.length; i++) {\n            address _adapter = ADAPTERS[_options[i]];\n            uint256 amountOut = IAdapter(_adapter).query(_amountIn, _tokenIn, _tokenOut);\n            if (i == 0 || amountOut > bestQuery.amountOut) {\n                bestQuery = Query(_adapter, _tokenIn, _tokenOut, amountOut);\n            }\n        }\n        return bestQuery;\n    }\n\n    /**\n     * Query all adapters\n     */\n    function queryNoSplit(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) public view returns (Query memory) {\n        Query memory bestQuery;\n        for (uint8 i; i < ADAPTERS.length; i++) {\n            address _adapter = ADAPTERS[i];\n            uint256 amountOut = IAdapter(_adapter).query(_amountIn, _tokenIn, _tokenOut);\n            if (i == 0 || amountOut > bestQuery.amountOut) {\n                bestQuery = Query(_adapter, _tokenIn, _tokenOut, amountOut);\n            }\n        }\n        return bestQuery;\n    }\n\n    /**\n     * Return path with best returns between two tokens\n     * Takes gas-cost into account\n     */\n    function findBestPathWithGas(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _maxSteps,\n        uint256 _gasPrice\n    ) external view returns (FormattedOffer memory) {\n        require(_maxSteps > 0 && _maxSteps < 5, \"YakRouter: Invalid max-steps\");\n        Offer memory queries;\n        queries.amounts = BytesManipulation.toBytes(_amountIn);\n        queries.path = BytesManipulation.toBytes(_tokenIn);\n        uint256 gasPriceInExitTkn = _gasPrice > 0 ? getGasPriceInExitTkn(_gasPrice, _tokenOut) : 0;\n        queries = _findBestPath(_amountIn, _tokenIn, _tokenOut, _maxSteps, queries, gasPriceInExitTkn);\n        if (queries.adapters.length == 0) {\n            queries.amounts = \"\";\n            queries.path = \"\";\n        }\n        return _formatOffer(queries);\n    }\n\n    // Find the market price between gas-asset(native) and token-out and express gas price in token-out\n    function getGasPriceInExitTkn(uint256 _gasPrice, address _tokenOut) internal view returns (uint256 price) {\n        // Avoid low-liquidity price appreciation (https://github.com/yieldyak/yak-aggregator/issues/20)\n        FormattedOffer memory gasQuery = findBestPath(1e18, WNATIVE, _tokenOut, 2);\n        if (gasQuery.path.length != 0) {\n            // Leave result in nWei to preserve precision for assets with low decimal places\n            price = (gasQuery.amounts[gasQuery.amounts.length - 1] * _gasPrice) / 1e9;\n        }\n    }\n\n    /**\n     * Return path with best returns between two tokens\n     */\n    function findBestPath(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _maxSteps\n    ) public view returns (FormattedOffer memory) {\n        require(_maxSteps > 0 && _maxSteps < 5, \"YakRouter: Invalid max-steps\");\n        Offer memory queries;\n        queries.amounts = BytesManipulation.toBytes(_amountIn);\n        queries.path = BytesManipulation.toBytes(_tokenIn);\n        queries = _findBestPath(_amountIn, _tokenIn, _tokenOut, _maxSteps, queries, 0);\n        // If no paths are found return empty struct\n        if (queries.adapters.length == 0) {\n            queries.amounts = \"\";\n            queries.path = \"\";\n        }\n        return _formatOffer(queries);\n    }\n\n    function _findBestPath(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _maxSteps,\n        Offer memory _queries,\n        uint256 _tknOutPriceNwei\n    ) internal view returns (Offer memory) {\n        Offer memory bestOption = _cloneOffer(_queries);\n        uint256 bestAmountOut;\n        uint256 gasEstimate;\n        bool withGas = _tknOutPriceNwei != 0;\n\n        // First check if there is a path directly from tokenIn to tokenOut\n        Query memory queryDirect = queryNoSplit(_amountIn, _tokenIn, _tokenOut);\n\n        if (queryDirect.amountOut != 0) {\n            if (withGas) {\n                gasEstimate = IAdapter(queryDirect.adapter).swapGasEstimate();\n            }\n            _addQuery(bestOption, queryDirect.amountOut, queryDirect.adapter, queryDirect.tokenOut, gasEstimate);\n            bestAmountOut = queryDirect.amountOut;\n        }\n        // Only check the rest if they would go beyond step limit (Need at least 2 more steps)\n        if (_maxSteps > 1 && _queries.adapters.length / 32 <= _maxSteps - 2) {\n            // Check for paths that pass through trusted tokens\n            for (uint256 i = 0; i < TRUSTED_TOKENS.length; i++) {\n                if (_tokenIn == TRUSTED_TOKENS[i]) {\n                    continue;\n                }\n                // Loop through all adapters to find the best one for swapping tokenIn for one of the trusted tokens\n                Query memory bestSwap = queryNoSplit(_amountIn, _tokenIn, TRUSTED_TOKENS[i]);\n                if (bestSwap.amountOut == 0) {\n                    continue;\n                }\n                // Explore options that connect the current path to the tokenOut\n                Offer memory newOffer = _cloneOffer(_queries);\n                if (withGas) {\n                    gasEstimate = IAdapter(bestSwap.adapter).swapGasEstimate();\n                }\n                _addQuery(newOffer, bestSwap.amountOut, bestSwap.adapter, bestSwap.tokenOut, gasEstimate);\n                newOffer = _findBestPath(\n                    bestSwap.amountOut,\n                    TRUSTED_TOKENS[i],\n                    _tokenOut,\n                    _maxSteps,\n                    newOffer,\n                    _tknOutPriceNwei\n                ); // Recursive step\n                address tokenOut = BytesManipulation.bytesToAddress(newOffer.path.length, newOffer.path);\n                uint256 amountOut = BytesManipulation.bytesToUint256(newOffer.amounts.length, newOffer.amounts);\n                // Check that the last token in the path is the tokenOut and update the new best option if neccesary\n                if (_tokenOut == tokenOut && amountOut > bestAmountOut) {\n                    if (newOffer.gasEstimate > bestOption.gasEstimate) {\n                        uint256 gasCostDiff = (_tknOutPriceNwei * (newOffer.gasEstimate - bestOption.gasEstimate)) /\n                            1e9;\n                        uint256 priceDiff = amountOut - bestAmountOut;\n                        if (gasCostDiff > priceDiff) {\n                            continue;\n                        }\n                    }\n                    bestAmountOut = amountOut;\n                    bestOption = newOffer;\n                }\n            }\n        }\n        return bestOption;\n    }\n\n    // -- SWAPPERS --\n\n    function _swapNoSplit(\n        Trade calldata _trade,\n        address _from,\n        address _to,\n        uint256 _fee\n    ) internal returns (uint256) {\n        uint256[] memory amounts = new uint256[](_trade.path.length);\n        if (_fee > 0 || MIN_FEE > 0) {\n            // Transfer fees to the claimer account and decrease initial amount\n            amounts[0] = _applyFee(_trade.amountIn, _fee);\n            IERC20(_trade.path[0]).safeTransferFrom(_from, FEE_CLAIMER, _trade.amountIn - amounts[0]);\n        } else {\n            amounts[0] = _trade.amountIn;\n        }\n        IERC20(_trade.path[0]).safeTransferFrom(_from, _trade.adapters[0], amounts[0]);\n        // Get amounts that will be swapped\n        for (uint256 i = 0; i < _trade.adapters.length; i++) {\n            amounts[i + 1] = IAdapter(_trade.adapters[i]).query(amounts[i], _trade.path[i], _trade.path[i + 1]);\n        }\n        require(amounts[amounts.length - 1] >= _trade.amountOut, \"YakRouter: Insufficient output amount\");\n        for (uint256 i = 0; i < _trade.adapters.length; i++) {\n            // All adapters should transfer output token to the following target\n            // All targets are the adapters, expect for the last swap where tokens are sent out\n            address targetAddress = i < _trade.adapters.length - 1 ? _trade.adapters[i + 1] : _to;\n            IAdapter(_trade.adapters[i]).swap(\n                amounts[i],\n                amounts[i + 1],\n                _trade.path[i],\n                _trade.path[i + 1],\n                targetAddress\n            );\n        }\n        emit YakSwap(_trade.path[0], _trade.path[_trade.path.length - 1], _trade.amountIn, amounts[amounts.length - 1]);\n        return amounts[amounts.length - 1];\n    }\n\n    function swapNoSplit(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee\n    ) public {\n        _swapNoSplit(_trade, msg.sender, _to, _fee);\n    }\n\n    function swapNoSplitFromAVAX(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee\n    ) external payable {\n        require(_trade.path[0] == WNATIVE, \"YakRouter: Path needs to begin with WAVAX\");\n        _wrap(_trade.amountIn);\n        _swapNoSplit(_trade, address(this), _to, _fee);\n    }\n\n    function swapNoSplitToAVAX(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee\n    ) public {\n        require(_trade.path[_trade.path.length - 1] == WNATIVE, \"YakRouter: Path needs to end with WAVAX\");\n        uint256 returnAmount = _swapNoSplit(_trade, msg.sender, address(this), _fee);\n        _unwrap(returnAmount);\n        _returnTokensTo(NATIVE, returnAmount, _to);\n    }\n\n    /**\n     * Swap token to token without the need to approve the first token\n     */\n    function swapNoSplitWithPermit(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        IERC20(_trade.path[0]).permit(msg.sender, address(this), _trade.amountIn, _deadline, _v, _r, _s);\n        swapNoSplit(_trade, _to, _fee);\n    }\n\n    /**\n     * Swap token to AVAX without the need to approve the first token\n     */\n    function swapNoSplitToAVAXWithPermit(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        IERC20(_trade.path[0]).permit(msg.sender, address(this), _trade.amountIn, _deadline, _v, _r, _s);\n        swapNoSplitToAVAX(_trade, _to, _fee);\n    }\n}\n"
    },
    "src/contracts/lib/BytesManipulation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./BytesToTypes.sol\";\n\nlibrary BytesManipulation {\n    function toBytes(uint256 x) internal pure returns (bytes memory b) {\n        b = new bytes(32);\n        assembly {\n            mstore(add(b, 32), x)\n        }\n    }\n\n    function toBytes(address x) internal pure returns (bytes memory b) {\n        b = new bytes(32);\n        assembly {\n            mstore(add(b, 32), x)\n        }\n    }\n\n    function mergeBytes(bytes memory a, bytes memory b) public pure returns (bytes memory c) {\n        // From https://ethereum.stackexchange.com/a/40456\n        uint256 alen = a.length;\n        uint256 totallen = alen + b.length;\n        uint256 loopsa = (a.length + 31) / 32;\n        uint256 loopsb = (b.length + 31) / 32;\n        assembly {\n            let m := mload(0x40)\n            mstore(m, totallen)\n            for {\n                let i := 0\n            } lt(i, loopsa) {\n                i := add(1, i)\n            } {\n                mstore(add(m, mul(32, add(1, i))), mload(add(a, mul(32, add(1, i)))))\n            }\n            for {\n                let i := 0\n            } lt(i, loopsb) {\n                i := add(1, i)\n            } {\n                mstore(add(m, add(mul(32, add(1, i)), alen)), mload(add(b, mul(32, add(1, i)))))\n            }\n            mstore(0x40, add(m, add(32, totallen)))\n            c := m\n        }\n    }\n\n    function bytesToAddress(uint256 _offst, bytes memory _input) internal pure returns (address) {\n        return BytesToTypes.bytesToAddress(_offst, _input);\n    }\n\n    function bytesToUint256(uint256 _offst, bytes memory _input) internal pure returns (uint256) {\n        return BytesToTypes.bytesToUint256(_offst, _input);\n    }\n}\n"
    },
    "src/contracts/interface/IAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAdapter {\n    function name() external view returns (string memory);\n\n    function swapGasEstimate() external view returns (uint256);\n\n    function swap(\n        uint256,\n        uint256,\n        address,\n        address,\n        address\n    ) external;\n\n    function query(\n        uint256,\n        address,\n        address\n    ) external view returns (uint256);\n}\n"
    },
    "src/contracts/lib/BytesToTypes.sol": {
      "content": "// From https://github.com/pouladzade/Seriality/blob/master/src/BytesToTypes.sol (Licensed under Apache2.0)\n\n// SPDX-License-Identifier: Apache2.0\npragma solidity ^0.8.0;\n\nlibrary BytesToTypes {\n    function bytesToAddress(uint256 _offst, bytes memory _input) internal pure returns (address _output) {\n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n\n    function bytesToUint256(uint256 _offst, bytes memory _input) internal pure returns (uint256 _output) {\n        assembly {\n            _output := mload(add(_input, _offst))\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/SaddleAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ISaddle.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../interface/IWETH.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract SaddleAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    mapping(address => bool) public isPoolToken;\n    mapping(address => uint8) public tokenIndex;\n    address public pool;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        pool = _pool;\n        _setPoolTokens();\n    }\n\n    function _setPoolTokens() internal {\n        for (uint8 i = 0; true; i++) {\n            try ISaddle(pool).getToken(i) returns (address token) {\n                approveToPool(token, UINT_MAX);\n                isPoolToken[token] = true;\n                tokenIndex[token] = i;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function approveToPool(address _tokenIn, uint256 _amount) internal {\n        uint256 allowance = IERC20(_tokenIn).allowance(address(this), pool);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\n        }\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (\n            !isPoolToken[_tokenIn] ||\n            !isPoolToken[_tokenOut] ||\n            _tokenIn == _tokenOut ||\n            _amountIn == 0 ||\n            ISaddle(pool).paused()\n        ) {\n            return 0;\n        }\n        try ISaddle(pool).calculateSwap(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        // Note that unsupported token will return index 0 which is valid\n        ISaddle(pool).swap(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn, _amountOut, block.timestamp);\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/interface/ISaddle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface ISaddle {\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\n\n    function getTokenBalance(uint8 index) external view returns (uint256);\n\n    function getToken(uint8 index) external view returns (address);\n\n    function getVirtualPrice() external view returns (uint256);\n\n    function owner() external view returns (address);\n\n    function paused() external view returns (bool);\n\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function unpause() external;\n\n    function pause() external;\n\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n}\n"
    },
    "src/contracts/interface/IKyberRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IKyberRouter {\n    function getAmountsOut(\n        uint256 amountIn,\n        address[] calldata poolsPath,\n        IERC20[] calldata path\n    ) external view returns (uint256[] memory amounts);\n}\n"
    },
    "src/contracts/adapters/WoofiAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IWooPP.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract WoofiAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable quoteToken;\n    address public immutable pool;\n    address public rebateCollector;\n\n    constructor(\n        string memory _name,\n        uint256 _swapGasEstimate,\n        address _pool\n    ) YakAdapter(_name, _swapGasEstimate) {\n        quoteToken = IWooPP(_pool).quoteToken();\n        pool = _pool;\n    }\n\n    function setRebateCollector(address _rebateCollector) external onlyOwner {\n        rebateCollector = _rebateCollector;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_amountIn == 0) {\n            return 0;\n        }\n        if (_tokenIn == quoteToken) {\n            amountOut = _safeQuery(IWooPP(pool).querySellQuote, _tokenOut, _amountIn);\n        } else if (_tokenOut == quoteToken) {\n            amountOut = _safeQuery(IWooPP(pool).querySellBase, _tokenIn, _amountIn);\n        } else {\n            uint256 quoteAmount = _safeQuery(IWooPP(pool).querySellBase, _tokenIn, _amountIn);\n            amountOut = _safeQuery(IWooPP(pool).querySellQuote, _tokenOut, quoteAmount);\n        }\n    }\n\n    function _safeQuery(\n        function(address, uint256) external view returns (uint256) qFn,\n        address _baseToken,\n        uint256 _baseAmount\n    ) internal view returns (uint256) {\n        try qFn(_baseToken, _baseAmount) returns (uint256 amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        _approveIfNeeded(_tokenIn, _amountIn);\n        uint256 realToAmount;\n        if (_tokenIn == quoteToken) {\n            realToAmount = IWooPP(pool).sellQuote(_tokenOut, _amountIn, _amountOut, _to, rebateCollector);\n        } else if (_tokenOut == quoteToken) {\n            realToAmount = IWooPP(pool).sellBase(_tokenIn, _amountIn, _amountOut, _to, rebateCollector);\n        } else {\n            uint256 quoteAmount = IWooPP(pool).sellBase(_tokenIn, _amountIn, 0, address(this), rebateCollector);\n            _approveIfNeeded(quoteToken, quoteAmount);\n            realToAmount = IWooPP(pool).sellQuote(_tokenOut, quoteAmount, _amountOut, _to, rebateCollector);\n        }\n    }\n\n    function _approveIfNeeded(address _tokenIn, uint256 _amount) internal {\n        uint256 allowance = IERC20(_tokenIn).allowance(address(this), pool);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).approve(pool, UINT_MAX);\n        }\n    }\n}\n"
    },
    "src/contracts/interface/IWooPP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IWooPP {\n    function quoteToken() external view returns (address);\n\n    function querySellQuote(address, uint256) external view returns (uint256);\n\n    function querySellBase(address, uint256) external view returns (uint256);\n\n    function sellBase(\n        address baseToken,\n        uint256 baseAmount,\n        uint256 minQuoteAmount,\n        address to,\n        address rebateTo\n    ) external returns (uint256 quoteAmount);\n\n    function sellQuote(\n        address baseToken,\n        uint256 quoteAmount,\n        uint256 minBaseAmount,\n        address to,\n        address rebateTo\n    ) external returns (uint256 baseAmount);\n}\n"
    },
    "src/contracts/adapters/VelodromeAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ninterface IPairFactory {\n    function isPair(address) external view returns (bool);\n\n    function pairCodeHash() external view returns (bytes32);\n}\n\ninterface IPair {\n    function getAmountOut(uint256, address) external view returns (uint256);\n\n    function swap(\n        uint256,\n        uint256,\n        address,\n        bytes calldata\n    ) external;\n}\n\ncontract VelodromeAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    bytes32 immutable PAIR_CODE_HASH;\n    address immutable FACTORY;\n\n    constructor(\n        string memory _name,\n        address _factory,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        FACTORY = _factory;\n        PAIR_CODE_HASH = getPairCodeHash(_factory);\n    }\n\n    function getPairCodeHash(address _factory) internal view returns (bytes32) {\n        return IPairFactory(_factory).pairCodeHash();\n    }\n\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) internal view returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(\n            uint160(\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            hex\"ff\",\n                            FACTORY,\n                            keccak256(abi.encodePacked(token0, token1, stable)),\n                            PAIR_CODE_HASH\n                        )\n                    )\n                )\n            )\n        );\n    }\n\n    function getQuoteAndPair(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256 amountOut, address pair) {\n        address pairStable = pairFor(_tokenIn, _tokenOut, true);\n        uint256 amountStable;\n        uint256 amountVolatile;\n        if (IPairFactory(FACTORY).isPair(pairStable)) {\n            amountStable = IPair(pairStable).getAmountOut(_amountIn, _tokenIn);\n        }\n        address pairVolatile = pairFor(_tokenIn, _tokenOut, false);\n        if (IPairFactory(FACTORY).isPair(pairVolatile)) {\n            amountVolatile = IPair(pairVolatile).getAmountOut(_amountIn, _tokenIn);\n        }\n        (amountOut, pair) = amountStable > amountVolatile ? (amountStable, pairStable) : (amountVolatile, pairVolatile);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn != _tokenOut && _amountIn != 0) (amountOut, ) = getQuoteAndPair(_amountIn, _tokenIn, _tokenOut);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        (uint256 amountOut, address pair) = getQuoteAndPair(_amountIn, _tokenIn, _tokenOut);\n        require(amountOut >= _amountOut, \"Insufficent amount out\");\n        (uint256 amount0Out, uint256 amount1Out) = (_tokenIn < _tokenOut)\n            ? (uint256(0), amountOut)\n            : (amountOut, uint256(0));\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\n        IPair(pair).swap(amount0Out, amount1Out, to, new bytes(0));\n    }\n}\n"
    },
    "src/contracts/adapters/UniswapV3Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\nstruct QParams {\n    address tokenIn;\n    address tokenOut;\n    int256 amountIn;\n    uint24 fee;\n}\n\ninterface IUniV3Factory {\n    function feeAmountTickSpacing(uint24) external view returns (int24);\n\n    function getPool(\n        address,\n        address,\n        uint24\n    ) external view returns (address);\n}\n\ninterface IUniV3Pool {\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n}\n\ninterface IUniV3Quoter {\n    function quoteExactInputSingle(QParams memory params) external view returns (uint256);\n\n    function quote(\n        address,\n        bool,\n        int256,\n        uint160\n    ) external view returns (int256, int256);\n}\n\ncontract UniswapV3Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    address immutable FACTORY;\n    address immutable QUOTER;\n    mapping(address => mapping(address => uint256[])) paths;\n    mapping(uint24 => bool) public isFeeAmountEnabled;\n    uint24[] public feeAmounts;\n\n    constructor(\n        string memory _name,\n        address _factory,\n        address _quoter,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        addDefaultFeeAmounts();\n        FACTORY = _factory;\n        QUOTER = _quoter;\n    }\n\n    function addDefaultFeeAmounts() internal {\n        addFeeAmount(500);\n        addFeeAmount(3000);\n        addFeeAmount(10000);\n    }\n\n    function enableFeeAmounts(uint24[] calldata _amounts) external onlyOwner {\n        for (uint256 i; i < _amounts.length; ++i) enableFeeAmount(_amounts[i]);\n    }\n\n    function enableFeeAmount(uint24 _fee) internal {\n        require(!isFeeAmountEnabled[_fee], \"Fee already enabled\");\n        if (IUniV3Factory(FACTORY).feeAmountTickSpacing(_fee) == 0) revert(\"Factory doesn't support fee\");\n        addFeeAmount(_fee);\n    }\n\n    function addFeeAmount(uint24 _fee) internal {\n        isFeeAmountEnabled[_fee] = true;\n        feeAmounts.push(_fee);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 quote) {\n        QParams memory params = getQParams(_amountIn, _tokenIn, _tokenOut);\n        (quote, ) = getBestQuoteAndPool(params);\n    }\n\n    function getQParams(\n        uint256 amountIn,\n        address tokenIn,\n        address tokenOut\n    ) internal pure returns (QParams memory params) {\n        params = QParams({ tokenIn: tokenIn, tokenOut: tokenOut, amountIn: int256(amountIn), fee: 0 });\n    }\n\n    function getBestQuoteAndPool(QParams memory params) internal view returns (uint256 bestQuote, address bestPool) {\n        for (uint256 i; i < feeAmounts.length; ++i) {\n            (uint256 quote, address pool) = getQuoteAndPoolForFee(feeAmounts[i], params);\n            if (quote > bestQuote) {\n                bestQuote = quote;\n                bestPool = pool;\n            }\n        }\n    }\n\n    function getQuoteAndPoolForFee(uint24 fee, QParams memory params)\n        internal\n        view\n        returns (uint256 amountOut, address pool)\n    {\n        pool = IUniV3Factory(FACTORY).getPool(params.tokenIn, params.tokenOut, fee);\n        if (pool != address(0)) {\n            params.fee = fee;\n            amountOut = getQuoteForPool(pool, params);\n        }\n    }\n\n    function getQuoteForPool(address pool, QParams memory params) internal view returns (uint256) {\n        (bool zeroForOne, uint160 sqrtPriceLimitX96) = getZeroOneAndSqrtPriceLimitX96(params.tokenIn, params.tokenOut);\n        (int256 amount0, int256 amount1) = IUniV3Quoter(QUOTER).quote(\n            pool,\n            zeroForOne,\n            params.amountIn,\n            sqrtPriceLimitX96\n        );\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\n    }\n\n    function getZeroOneAndSqrtPriceLimitX96(address tokenIn, address tokenOut)\n        internal\n        pure\n        returns (bool zeroForOne, uint160 sqrtPriceLimitX96)\n    {\n        zeroForOne = tokenIn < tokenOut;\n        sqrtPriceLimitX96 = zeroForOne ? MIN_SQRT_RATIO + 1 : MAX_SQRT_RATIO - 1;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        QParams memory params = getQParams(_amountIn, _tokenIn, _tokenOut);\n        uint256 amountOut = _underlyingSwap(params, new bytes(0));\n        require(amountOut >= _amountOut, \"Insufficient amountOut\");\n        _returnTo(_tokenOut, amountOut, _to);\n    }\n\n    function _underlyingSwap(QParams memory params, bytes memory callbackData) internal returns (uint256) {\n        (, address pool) = getBestQuoteAndPool(params);\n        (bool zeroForOne, uint160 sqrtPriceLimitX96) = getZeroOneAndSqrtPriceLimitX96(params.tokenIn, params.tokenOut);\n        (int256 amount0, int256 amount1) = IUniV3Pool(pool).swap(\n            address(this),\n            zeroForOne,\n            int256(params.amountIn),\n            sqrtPriceLimitX96,\n            callbackData\n        );\n        return zeroForOne ? uint256(-amount1) : uint256(-amount0);\n    }\n\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata\n    ) external {\n        if (amount0Delta > 0) {\n            IERC20(IUniV3Pool(msg.sender).token0()).transfer(msg.sender, uint256(amount0Delta));\n        } else {\n            IERC20(IUniV3Pool(msg.sender).token1()).transfer(msg.sender, uint256(amount1Delta));\n        }\n    }\n\n    function decodeCallbackData(bytes memory data) internal pure returns (address trader, uint256 minAmountOut) {\n        assembly {\n            trader := mload(add(data, 0x14))\n            minAmountOut := mload(add(data, 0x34))\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/UniswapV2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IUniswapFactory.sol\";\nimport \"../interface/IUniswapPair.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract UniswapV2Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    uint256 internal constant FEE_DENOMINATOR = 1e3;\n    uint256 public immutable feeCompliment;\n    address public immutable factory;\n\n    constructor(\n        string memory _name,\n        address _factory,\n        uint256 _fee,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        feeCompliment = FEE_DENOMINATOR - _fee;\n        factory = _factory;\n    }\n\n    function _getAmountOut(\n        uint256 _amountIn,\n        uint256 _reserveIn,\n        uint256 _reserveOut\n    ) internal view returns (uint256 amountOut) {\n        // Based on https://github.com/Uniswap/uniswap-v2-periphery/blob/master/contracts/UniswapV2Router02.sol\n        uint256 amountInWithFee = _amountIn * feeCompliment;\n        uint256 numerator = amountInWithFee * _reserveOut;\n        uint256 denominator = _reserveIn * FEE_DENOMINATOR + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn == _tokenOut || _amountIn == 0) {\n            return 0;\n        }\n        address pair = IUniswapFactory(factory).getPair(_tokenIn, _tokenOut);\n        if (pair == address(0)) {\n            return 0;\n        }\n        (uint256 r0, uint256 r1, ) = IUniswapPair(pair).getReserves();\n        (uint256 reserveIn, uint256 reserveOut) = _tokenIn < _tokenOut ? (r0, r1) : (r1, r0);\n        if (reserveIn > 0 && reserveOut > 0) {\n            amountOut = _getAmountOut(_amountIn, reserveIn, reserveOut);\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        address pair = IUniswapFactory(factory).getPair(_tokenIn, _tokenOut);\n        (uint256 amount0Out, uint256 amount1Out) = (_tokenIn < _tokenOut)\n            ? (uint256(0), _amountOut)\n            : (_amountOut, uint256(0));\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\n        IUniswapPair(pair).swap(amount0Out, amount1Out, to, new bytes(0));\n    }\n}\n"
    },
    "src/contracts/interface/IUniswapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUniswapFactory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n"
    },
    "src/contracts/interface/IUniswapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUniswapPair {\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "src/contracts/adapters/DxSwapAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IUniswapFactory.sol\";\nimport \"../interface/IUniswapPair.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ninterface IDxSwapPair is IUniswapPair {\n    function swapFee() external view returns (uint256);\n}\n\ncontract DxSwapAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    uint256 internal constant FEE_DENOMINATOR = 1e4;\n    address public immutable FACTORY;\n\n    constructor(\n        string memory _name,\n        address _factory,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        FACTORY = _factory;\n    }\n\n    function _getAmountOut(\n        uint256 _amountIn,\n        uint256 _reserveIn,\n        uint256 _reserveOut,\n        uint256 _fee\n    ) internal pure returns (uint256 amountOut) {\n        uint256 feeCompliment = FEE_DENOMINATOR - _fee;\n        uint256 amountInWithFee = _amountIn * feeCompliment;\n        uint256 numerator = amountInWithFee * _reserveOut;\n        uint256 denominator = _reserveIn * FEE_DENOMINATOR + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_tokenIn == _tokenOut || _amountIn == 0) {\n            return 0;\n        }\n        address pair = IUniswapFactory(FACTORY).getPair(_tokenIn, _tokenOut);\n        if (pair == address(0)) {\n            return 0;\n        }\n        (uint256 r0, uint256 r1, ) = IUniswapPair(pair).getReserves();\n        (uint256 reserveIn, uint256 reserveOut) = _tokenIn < _tokenOut ? (r0, r1) : (r1, r0);\n        if (reserveIn > 0 && reserveOut > 0) {\n            uint256 fee = IDxSwapPair(pair).swapFee();\n            return _getAmountOut(_amountIn, reserveIn, reserveOut, fee);\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        address pair = IUniswapFactory(FACTORY).getPair(_tokenIn, _tokenOut);\n        (uint256 amount0Out, uint256 amount1Out) = (_tokenIn < _tokenOut)\n            ? (uint256(0), _amountOut)\n            : (_amountOut, uint256(0));\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\n        IUniswapPair(pair).swap(amount0Out, amount1Out, to, new bytes(0));\n    }\n}\n"
    },
    "src/contracts/interface/ISaddleMeta.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\nstruct SwapStorage {\n    uint256 initialA;\n    uint256 futureA;\n    uint256 initialATime;\n    uint256 futureATime;\n    uint256 swapFee;\n    uint256 adminFee;\n    address lpToken;\n}\n\ninterface ISaddleMeta {\n    function getToken(uint8 index) external view returns (address);\n\n    function getVirtualPrice() external view returns (uint256);\n\n    function owner() external view returns (address);\n\n    function paused() external view returns (bool);\n\n    function calculateSwapUnderlying(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function unpause() external;\n\n    function pause() external;\n\n    function swapUnderlying(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external returns (uint256);\n\n    function metaSwapStorage() external returns (address);\n\n    function swapStorage() external returns (SwapStorage memory);\n}\n"
    },
    "src/contracts/adapters/SaddleMetaAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ISaddleMeta.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract SaddleMetaAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant feeDenominator = 1e10;\n    mapping(address => bool) public isPoolToken;\n    mapping(address => uint8) public tokenIndex;\n    uint256 public poolFeeCompliment;\n    address public metaPool;\n    address public metaTkn;\n    address public pool;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        pool = _pool;\n        metaPool = ISaddleMeta(pool).metaSwapStorage(); // Pool that holds USDCe, USDTe, DAIe\n        _setPoolTokens();\n    }\n\n    // Mapping indicator which tokens are included in the pool\n    function _setPoolTokens() internal {\n        metaTkn = ISaddleMeta(pool).getToken(0);\n        approveToPool(metaTkn, UINT_MAX);\n        tokenIndex[metaTkn] = 0;\n        for (uint8 i = 0; true; i++) {\n            try ISaddleMeta(metaPool).getToken(i) returns (address token) {\n                approveToPool(token, UINT_MAX);\n                isPoolToken[token] = true;\n                tokenIndex[token] = i + 1;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function approveToPool(address _tokenIn, uint256 _amount) internal {\n        uint256 allowance = IERC20(_tokenIn).allowance(address(this), pool);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(pool, UINT_MAX);\n        }\n    }\n\n    function _isPaused() internal view returns (bool) {\n        return ISaddleMeta(pool).paused() || ISaddleMeta(metaPool).paused();\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (validInput(_amountIn, _tokenIn, _tokenOut) && !_isPaused())\n            amountOut = _getAmountOutSafe(_amountIn, _tokenIn, _tokenOut);\n    }\n\n    function validInput(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (bool) {\n        return validPath(_tokenIn, _tokenOut) && _amountIn != 0;\n    }\n\n    function validPath(address tokenIn, address tokenOut) internal view returns (bool) {\n        return (tokenIn == metaTkn && isPoolToken[tokenOut]) || (tokenOut == metaTkn && isPoolToken[tokenIn]);\n    }\n\n    function _getAmountOutSafe(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256 amountOut) {\n        try ISaddleMeta(pool).calculateSwapUnderlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 _amountOut\n        ) {\n            amountOut = _applyError(_amountOut);\n        } catch {}\n    }\n\n    function _applyError(uint256 _amount) internal pure returns (uint256) {\n        return (_amount * 9998) / 10000;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ISaddleMeta(pool).swapUnderlying(\n            tokenIndex[_tokenIn],\n            tokenIndex[_tokenOut],\n            _amountIn,\n            _amountOut,\n            block.timestamp\n        );\n        uint256 balThis = IERC20(_tokenOut).balanceOf(address(this));\n        _returnTo(_tokenOut, balThis, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/PlatypusAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n//                            ,=.\n//                ,=\"\"\"\"==.__.=\"  o\".___\n//          ,=.==\"                  ___/\n//    ,==.,\"    ,          , \\,===\"\"\n//   <     ,==)  \\\"'\"=._.==)  \\\n//    `==''    `\"           `\"\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IPlatypus.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../interface/IWETH.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract PlatypusAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    event PartialPoolSupport(address pool, address[] tkns);\n    event AddPoolSupport(address pool);\n    event RmPoolSupport(address pool);\n\n    mapping(address => mapping(address => address)) private tknToTknToPool;\n\n    constructor(string memory _name, uint256 _swapGasEstimate) YakAdapter(_name, _swapGasEstimate) {}\n\n    function getPoolForTkns(address tknIn, address tknOut) public view returns (address) {\n        return tknToTknToPool[tknIn][tknOut];\n    }\n\n    function _approveIfNeeded(address tkn, address spender) internal {\n        uint256 allowance = IERC20(tkn).allowance(address(this), spender);\n        if (allowance < UINT_MAX) {\n            IERC20(tkn).approve(spender, UINT_MAX);\n        }\n    }\n\n    // @dev Returns false if repeated tkns\n    function _poolSupportsTkns(address pool, address[] memory tkns) internal view returns (bool) {\n        address[] memory supportedTkns = IPlatypus(pool).getTokenAddresses();\n        uint256 supportedCount;\n        for (uint256 i = 0; i < supportedTkns.length; i++) {\n            for (uint256 j = 0; j < tkns.length; j++) {\n                if (supportedTkns[i] == tkns[j]) {\n                    supportedCount++;\n                    break;\n                }\n            }\n        }\n        return supportedCount == tkns.length;\n    }\n\n    function _setPoolForTkns(address[] memory tkns, address pool) internal {\n        for (uint256 i = 0; i < tkns.length; i++) {\n            for (uint256 j = 0; j < tkns.length; j++) {\n                if (i != j) {\n                    tknToTknToPool[tkns[i]][tkns[j]] = pool;\n                    if (pool != address(0)) {\n                        _approveIfNeeded(tkns[i], pool);\n                    }\n                }\n            }\n        }\n    }\n\n    // Add pools for all tkns it supports\n    function addPools(address[] calldata pools) external onlyOwner {\n        for (uint256 i = 0; i < pools.length; i++) {\n            address pool = pools[i];\n            address[] memory supportedTkns = IPlatypus(pool).getTokenAddresses();\n            _setPoolForTkns(supportedTkns, pool);\n            emit AddPoolSupport(pool);\n        }\n    }\n\n    // Manually set the pool support for tkns\n    function setPoolForTkns(address pool, address[] memory tkns) external onlyOwner {\n        require(tkns.length > 1, \"At least two tkns\");\n        require(pool != address(0), \"Only non-zero pool\");\n        require(_poolSupportsTkns(pool, tkns), \"Pool does not support tkns\");\n        // Assume above checks there is no repeats\n        _setPoolForTkns(tkns, pool);\n        emit PartialPoolSupport(pool, tkns);\n    }\n\n    function rmPools(address[] calldata pools) external onlyOwner {\n        for (uint256 i = 0; i < pools.length; i++) {\n            address pool = pools[i];\n            address[] memory supportedTkns = IPlatypus(pool).getTokenAddresses();\n            _setPoolForTkns(supportedTkns, address(0));\n            emit RmPoolSupport(pool);\n        }\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        address pool = getPoolForTkns(_tokenIn, _tokenOut);\n        if (pool == address(0) || _amountIn == 0 || IPlatypus(pool).paused()) {\n            return 0;\n        }\n        try IPlatypus(pool).quotePotentialSwap(_tokenIn, _tokenOut, _amountIn) returns (uint256 amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        address pool = getPoolForTkns(_tokenIn, _tokenOut);\n        IPlatypus(pool).swap(_tokenIn, _tokenOut, _amountIn, _amountOut, _to, block.timestamp);\n    }\n}\n"
    },
    "src/contracts/interface/IPlatypus.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IPlatypus {\n    // Views\n    function quotePotentialSwap(\n        address fromToken,\n        address totoken,\n        uint256 fromAmount\n    ) external view returns (uint256 potentialOutcome); // Second arg (haircut) is not used\n\n    function getTokenAddresses() external view returns (address[] memory);\n\n    function paused() external view returns (bool);\n\n    // Modifiers\n    function swap(\n        address fromToken,\n        address toToken,\n        uint256 fromAmount,\n        uint256 minAmountOut,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function pause() external;\n\n    function unpause() external;\n}\n"
    },
    "src/contracts/interface/ImYAK.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface ImYAK is IERC20 {\n    function unmoon(uint256, address) external;\n\n    function moon(uint256, address) external;\n}\n"
    },
    "src/contracts/adapters/MiniYakAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ImYAK.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract MiniYakAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public constant YAK = 0x59414b3089ce2AF0010e7523Dea7E2b35d776ec7;\n    address public constant mYAK = 0xdDAaAD7366B455AfF8E7c82940C43CEB5829B604;\n\n    constructor(uint256 _swapGasEstimate) YakAdapter(\"MiniYakAdapter\", _swapGasEstimate) {\n        setAllowances();\n    }\n\n    function setAllowances() internal {\n        IERC20(mYAK).safeApprove(mYAK, UINT_MAX);\n        IERC20(YAK).safeApprove(mYAK, UINT_MAX);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal pure override returns (uint256 amountOut) {\n        if ((_tokenIn == mYAK && _tokenOut == YAK) || (_tokenIn == YAK && _tokenOut == mYAK)) {\n            amountOut = _amountIn;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        if (_tokenIn == mYAK && _tokenOut == YAK) {\n            ImYAK(mYAK).unmoon(_amountIn, _to);\n        } else if (_tokenIn == YAK && _tokenOut == mYAK) {\n            ImYAK(mYAK).moon(_amountIn, _to);\n        } else {\n            revert(\"Unsupported token\");\n        }\n    }\n}\n"
    },
    "src/contracts/adapters/KyberAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IKyberPool.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract KyberAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant PRECISION = 1e18;\n    mapping(address => mapping(address => address)) internal TKNS_TO_POOL;\n\n    constructor(\n        string memory _name,\n        address[] memory _pools,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        addPools(_pools);\n    }\n\n    function addPools(address[] memory _pools) public onlyOwner {\n        // Note: Overrides existing if pool has same tkns but different APR\n        for (uint256 i = 0; i < _pools.length; i++) {\n            address tkn0 = IKyberPool(_pools[i]).token0();\n            address tkn1 = IKyberPool(_pools[i]).token1();\n            TKNS_TO_POOL[tkn0][tkn1] = _pools[i];\n            TKNS_TO_POOL[tkn1][tkn0] = _pools[i];\n        }\n    }\n\n    function removePools(address[] memory _pools) public onlyOwner {\n        // Note: Overrides existing if pool has same tkns but different APR\n        for (uint256 i = 0; i < _pools.length; i++) {\n            address tkn0 = IKyberPool(_pools[i]).token0();\n            address tkn1 = IKyberPool(_pools[i]).token1();\n            TKNS_TO_POOL[tkn0][tkn1] = address(0);\n            TKNS_TO_POOL[tkn1][tkn0] = address(0);\n        }\n    }\n\n    function getPool(address tkn0, address tkn1) public view returns (address) {\n        return TKNS_TO_POOL[tkn0][tkn1];\n    }\n\n    function _getAmountOut(\n        uint256 amountIn,\n        uint256 vReserveIn,\n        uint256 vReserveOut,\n        uint256 feeInPrecision\n    ) internal pure returns (uint256 amountOut) {\n        // Based on https://github.com/dynamic-amm/smart-contracts/blob/master/contracts/libraries/DMMLibrary.sol\n        uint256 amountInWithFee = (amountIn * (PRECISION - feeInPrecision)) / PRECISION;\n        uint256 numerator = amountInWithFee * vReserveOut;\n        uint256 denominator = vReserveIn + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_tokenIn == _tokenOut || _amountIn == 0) {\n            return 0;\n        }\n        address pool = getPool(_tokenIn, _tokenOut);\n        if (pool == address(0)) {\n            return 0;\n        }\n        (uint112 r0, uint112 r1, uint112 vr0, uint112 vr1, uint256 feeInPrecision) = IKyberPool(pool).getTradeInfo();\n        (uint112 reserveIn, uint112 reserveOut) = _tokenIn < _tokenOut ? (r0, r1) : (r1, r0);\n        (uint112 vReserveIn, uint112 vReserveOut) = _tokenIn < _tokenOut ? (vr0, vr1) : (vr1, vr0);\n        if (reserveIn > 0 && reserveOut > 0) {\n            uint256 _amountOut = _getAmountOut(_amountIn, vReserveIn, vReserveOut, feeInPrecision);\n            if (reserveOut > amountOut) amountOut = _amountOut;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        address pair = getPool(_tokenIn, _tokenOut);\n        (uint256 amount0Out, uint256 amount1Out) = (_tokenIn < _tokenOut)\n            ? (uint256(0), _amountOut)\n            : (_amountOut, uint256(0));\n        IERC20(_tokenIn).safeTransfer(pair, _amountIn);\n        IKyberPool(pair).swap(amount0Out, amount1Out, to, new bytes(0));\n    }\n}\n"
    },
    "src/contracts/interface/IKyberPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IKyberPool {\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function getTradeInfo()\n        external\n        view\n        returns (\n            uint112 _vReserve0,\n            uint112 _vReserve1,\n            uint112 reserve0,\n            uint112 reserve1,\n            uint256 feeInPrecision\n        );\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n}\n"
    },
    "src/contracts/adapters/GmxAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IGmxVault.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract GmxAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    uint256 public constant BASIS_POINTS_DIVISOR = 1e4;\n    uint256 public constant PRICE_PRECISION = 1e30;\n    uint256 public constant USDG_DECIMALS = 18;\n    address public immutable VAULT;\n    bool immutable USE_VAULT_UTILS;\n    address immutable USDG;\n    mapping(address => bool) public isPoolTkn; // unwanted tkns can be ignored by adapter\n    mapping(address => uint256) tokenDecimals;\n\n    constructor(\n        string memory _name,\n        address _vault,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        _setVaultTkns(_vault);\n        USE_VAULT_UTILS = _vaultHasUtils(_vault);\n        USDG = IGmxVault(_vault).usdg();\n        VAULT = _vault;\n    }\n\n    //                                 UTILS                                  \\\\\n\n    function addPoolTkns(address[] calldata _tokens) external onlyOwner {\n        for (uint256 i; i < _tokens.length; ++i) _setToken(_tokens[i]);\n    }\n\n    function rmPoolTkns(address[] calldata _tokens) external onlyOwner {\n        for (uint256 i; i < _tokens.length; ++i) isPoolTkn[_tokens[i]] = false;\n    }\n\n    function _setVaultTkns(address _vault) internal {\n        uint256 whitelistedTknsLen = IGmxVault(_vault).allWhitelistedTokensLength();\n        for (uint256 i = 0; i < whitelistedTknsLen; i++) {\n            address token = IGmxVault(_vault).allWhitelistedTokens(i);\n            _setToken(token);\n        }\n    }\n\n    function _setToken(address _token) internal {\n        tokenDecimals[_token] = IERC20(_token).decimals();\n        isPoolTkn[_token] = true;\n    }\n\n    function _vaultHasUtils(address _vault) internal view returns (bool) {\n        try IGmxVault(_vault).vaultUtils() {\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    //                                 QUERY                                  \\\\\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_validArgs(_amountIn, _tokenIn, _tokenOut)) return _getAmountOut(_amountIn, _tokenIn, _tokenOut);\n    }\n\n    function _validArgs(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (bool) {\n        return\n            _amountIn != 0 &&\n            _tokenIn != _tokenOut &&\n            isPoolTkn[_tokenIn] &&\n            IGmxVault(VAULT).whitelistedTokens(_tokenIn) &&\n            IGmxVault(VAULT).whitelistedTokens(_tokenOut) &&\n            IGmxVault(VAULT).isSwapEnabled() &&\n            _hasVaultEnoughBal(_tokenIn, 1); // Prevents calc problems\n    }\n\n    function _getAmountOut(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256) {\n        (uint256 amountOut, uint256 usdgAmount) = _getGrossAmountOutAndUsdg(_amountIn, _tokenIn, _tokenOut);\n        return _calcNetAmountOut(_tokenIn, _tokenOut, amountOut, usdgAmount);\n    }\n\n    function _calcNetAmountOut(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountOut,\n        uint256 _usdgAmount\n    ) internal view returns (uint256) {\n        uint256 feeBps = _getFeeBasisPoint(_tokenIn, _tokenOut, _usdgAmount);\n        uint256 netAmountOut = _amountOutAfterFees(_amountOut, feeBps);\n        bool withinVaultLimits = _isWithinVaultLimits(_tokenIn, _tokenOut, _usdgAmount, netAmountOut);\n        if (withinVaultLimits) return netAmountOut;\n    }\n\n    function _getGrossAmountOutAndUsdg(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256 amountOut, uint256 usdgAmount) {\n        (uint256 priceIn, uint256 priceOut) = _getPrices(_tokenIn, _tokenOut);\n        amountOut = (_amountIn * priceIn) / priceOut;\n        amountOut = _adjustForDecimals(amountOut, _tokenIn, _tokenOut);\n        usdgAmount = _getUsdgAmount(_amountIn, priceIn, _tokenIn);\n    }\n\n    function _getUsdgAmount(\n        uint256 _amountIn,\n        uint256 _priceIn,\n        address _tokenIn\n    ) internal view returns (uint256 usdgAmount) {\n        usdgAmount = (_amountIn * _priceIn) / PRICE_PRECISION;\n        usdgAmount = _adjustForDecimals(usdgAmount, _tokenIn, USDG);\n    }\n\n    function _amountOutAfterFees(uint256 _amountOut, uint256 _feeBasisPoints) internal pure returns (uint256) {\n        return (_amountOut * (BASIS_POINTS_DIVISOR - _feeBasisPoints)) / BASIS_POINTS_DIVISOR;\n    }\n\n    function _adjustForDecimals(\n        uint256 _amount,\n        address _tokenDiv,\n        address _tokenMul\n    ) internal view returns (uint256) {\n        uint256 decimalsDiv = _tokenDiv == USDG ? USDG_DECIMALS : tokenDecimals[_tokenDiv];\n        uint256 decimalsMul = _tokenMul == USDG ? USDG_DECIMALS : tokenDecimals[_tokenMul];\n        return (_amount * 10**decimalsMul) / 10**decimalsDiv;\n    }\n\n    function _getPrices(address _tokenIn, address _tokenOut) internal view returns (uint256 priceIn, uint256 priceOut) {\n        IGmxVaultPriceFeed priceFeed = IGmxVault(VAULT).priceFeed();\n        priceIn = priceFeed.getPrice(_tokenIn, false, true, true);\n        priceOut = priceFeed.getPrice(_tokenOut, true, true, true);\n    }\n\n    function _hasVaultEnoughBal(address _token, uint256 _amount) private view returns (bool) {\n        return IERC20(_token).balanceOf(VAULT) >= _amount;\n    }\n\n    function _isWithinVaultLimits(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountInUsdg,\n        uint256 _amountOut\n    ) private view returns (bool) {\n        uint256 poolBalTknOut = IGmxVault(VAULT).poolAmounts(_tokenOut);\n        if (poolBalTknOut < _amountOut) return false;\n        uint256 newPoolBalTknOut = poolBalTknOut - _amountOut;\n        return\n            !reservedAmountExceeded(newPoolBalTknOut, _tokenOut) &&\n            !bufferAmountExceeded(newPoolBalTknOut, _tokenOut) &&\n            !maxDebtExceeded(_amountInUsdg, _tokenIn);\n    }\n\n    function reservedAmountExceeded(uint256 _newPoolBalTknOut, address _tokenOut) internal view returns (bool) {\n        uint256 reservedAmount = IGmxVault(VAULT).reservedAmounts(_tokenOut);\n        return _newPoolBalTknOut < reservedAmount;\n    }\n\n    function bufferAmountExceeded(uint256 _newPoolBalTknOut, address _tokenOut) internal view returns (bool) {\n        uint256 bufferAmount = IGmxVault(VAULT).bufferAmounts(_tokenOut);\n        return _newPoolBalTknOut < bufferAmount;\n    }\n\n    function maxDebtExceeded(uint256 _amountInUsdg, address _tokenIn) internal view returns (bool) {\n        uint256 maxUsdgAmount = IGmxVault(VAULT).maxUsdgAmounts(_tokenIn);\n        if (maxUsdgAmount == 0) return false;\n        uint256 newUsdgAmount = IGmxVault(VAULT).usdgAmounts(_tokenIn) + _amountInUsdg;\n        return newUsdgAmount > maxUsdgAmount;\n    }\n\n    function _getFeeBasisPoint(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 usdgAmount\n    ) internal view returns (uint256) {\n        if (USE_VAULT_UTILS)\n            return IGmxVault(VAULT).vaultUtils().getSwapFeeBasisPoints(_tokenIn, _tokenOut, usdgAmount);\n        return _calcFeeBasisPoints(_tokenIn, _tokenOut, usdgAmount);\n    }\n\n    function _calcFeeBasisPoints(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 usdgAmount\n    ) internal view returns (uint256 feeBasisPoints) {\n        bool isStableSwap = IGmxVault(VAULT).stableTokens(_tokenIn) && IGmxVault(VAULT).stableTokens(_tokenOut);\n        uint256 baseBps = isStableSwap\n            ? IGmxVault(VAULT).stableSwapFeeBasisPoints()\n            : IGmxVault(VAULT).swapFeeBasisPoints();\n        uint256 taxBps = isStableSwap ? IGmxVault(VAULT).stableTaxBasisPoints() : IGmxVault(VAULT).taxBasisPoints();\n        uint256 feesBasisPoints0 = IGmxVault(VAULT).getFeeBasisPoints(_tokenIn, usdgAmount, baseBps, taxBps, true);\n        uint256 feesBasisPoints1 = IGmxVault(VAULT).getFeeBasisPoints(_tokenOut, usdgAmount, baseBps, taxBps, false);\n        // use the higher of the two fee basis points\n        feeBasisPoints = feesBasisPoints0 > feesBasisPoints1 ? feesBasisPoints0 : feesBasisPoints1;\n    }\n\n    //                                  SWAP                                  \\\\\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        IERC20(_tokenIn).safeTransfer(VAULT, _amountIn);\n        IGmxVault(VAULT).swap(\n            _tokenIn,\n            _tokenOut,\n            address(this) // No check for amount-out within swap function\n        );\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/interface/IGmxVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IGmxVaultPriceFeed {\n    function getPrice(\n        address,\n        bool,\n        bool,\n        bool\n    ) external view returns (uint256);\n}\n\ninterface IGmxVaultUtils {\n    function getSwapFeeBasisPoints(\n        address,\n        address,\n        uint256\n    ) external view returns (uint256);\n}\n\ninterface IGmxVault {\n    function swap(\n        address,\n        address,\n        address\n    ) external;\n\n    function whitelistedTokens(address) external view returns (bool);\n\n    function isSwapEnabled() external view returns (bool);\n\n    function vaultUtils() external view returns (IGmxVaultUtils);\n\n    function priceFeed() external view returns (IGmxVaultPriceFeed);\n\n    function allWhitelistedTokensLength() external view returns (uint256);\n\n    function allWhitelistedTokens(uint256) external view returns (address);\n\n    function maxUsdgAmounts(address) external view returns (uint256);\n\n    function usdgAmounts(address) external view returns (uint256);\n\n    function reservedAmounts(address) external view returns (uint256);\n\n    function bufferAmounts(address) external view returns (uint256);\n\n    function poolAmounts(address) external view returns (uint256);\n\n    function usdg() external view returns (address);\n\n    function hasDynamicFees() external view returns (bool);\n\n    function stableTokens(address) external view returns (bool);\n\n    function getFeeBasisPoints(\n        address,\n        uint256,\n        uint256,\n        uint256,\n        bool\n    ) external view returns (uint256);\n\n    function stableSwapFeeBasisPoints() external view returns (uint256);\n\n    function swapFeeBasisPoints() external view returns (uint256);\n\n    function stableTaxBasisPoints() external view returns (uint256);\n\n    function taxBasisPoints() external view returns (uint256);\n\n    function setBufferAmount(address, uint256) external;\n\n    function gov() external view returns (address);\n}\n"
    },
    "src/contracts/adapters/GeodeWPAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IGeodePortal.sol\";\nimport \"../interface/IGeodeWP.sol\";\nimport \"../interface/IgAVAX.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../interface/IWETH.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract GeodeWPAdapter is YakAdapter {\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n    uint256 internal constant gAVAX_DENOMINATOR = 1e18;\n    uint256 internal constant IGNORABLE_DEBT = 1e18;\n    uint256 public immutable pooledTknId;\n    address public immutable portal;\n    address public immutable gavax;\n    address public immutable pool;\n    address public pooledTknInterface;\n\n    constructor(\n        string memory _name,\n        address _portal,\n        uint256 _pooledTknId,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        pooledTknInterface = IGeodePortal(_portal).planetCurrentInterface(_pooledTknId);\n        address _pool = IGeodePortal(_portal).planetWithdrawalPool(_pooledTknId);\n        address _gavax = IGeodePortal(_portal).gAVAX();\n        IgAVAX(_gavax).setApprovalForAll(_pool, true);\n        pooledTknId = _pooledTknId;\n        portal = _portal;\n        gavax = _gavax;\n        pool = _pool;\n    }\n\n    function setInterfaceForPooledTkn(address interfaceAddress) public onlyOwner {\n        require(IgAVAX(gavax).isInterface(interfaceAddress, pooledTknId), \"Not valid interface\");\n        pooledTknInterface = interfaceAddress;\n    }\n\n    function setGAvaxAllowance() public onlyOwner {\n        IgAVAX(gavax).setApprovalForAll(pool, true);\n    }\n\n    function revokeGAvaxAllowance() public onlyOwner {\n        IgAVAX(gavax).setApprovalForAll(pool, false);\n    }\n\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (_amountIn == 0 || IGeodeWP(pool).paused()) {\n            amountOut = 0;\n        } else if (_tokenIn == WAVAX && _tokenOut == pooledTknInterface) {\n            amountOut = _calcSwapAndMint(_amountIn);\n        } else if (_tokenOut == WAVAX && _tokenIn == pooledTknInterface) {\n            amountOut = _calcSwap(1, 0, _amountIn);\n        }\n    }\n\n    function _calcSwapAndMint(uint256 amountIn) internal view returns (uint256) {\n        uint256 debt = IGeodeWP(pool).getDebt();\n        if (debt >= amountIn || _stakingPaused()) {\n            // If pool is unbalanced and missing avax it's cheaper to swap\n            return _calcSwap(0, 1, amountIn);\n        } else {\n            // Swap debt and mint the rest\n            uint256 amountOutBought;\n            if (debt > IGNORABLE_DEBT) {\n                amountOutBought = _calcSwap(0, 1, debt);\n                amountIn -= debt;\n            }\n            uint256 amountOutMinted = _calcMint(amountIn);\n            return amountOutBought + amountOutMinted;\n        }\n    }\n\n    function _stakingPaused() internal view returns (bool) {\n        return IGeodePortal(portal).isStakingPausedForPool(pooledTknId);\n    }\n\n    function _calcSwap(\n        uint8 tknInIndex,\n        uint8 tknOutIndex,\n        uint256 amountIn\n    ) internal view returns (uint256) {\n        try IGeodeWP(pool).calculateSwap(tknInIndex, tknOutIndex, amountIn) returns (uint256 amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _calcMint(uint256 amountIn) internal view returns (uint256) {\n        uint256 price = IgAVAX(gavax).pricePerShare(pooledTknId);\n        return (amountIn * gAVAX_DENOMINATOR) / price;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        if (_tokenIn == WAVAX) {\n            IWETH(WAVAX).withdraw(_amountIn);\n            if (_stakingPaused()) {\n                _swapUnderlying(0, 1, _amountIn, _amountOut, _amountIn);\n            } else {\n                _geodeStake(_amountIn, _amountOut);\n            }\n        } else {\n            _swapUnderlying(1, 0, _amountIn, _amountOut, 0);\n            IWETH(WAVAX).deposit{ value: address(this).balance }();\n        }\n        uint256 balThis = IERC20(_tokenOut).balanceOf(address(this));\n        require(balThis >= _amountOut, \"Insufficient amount out\");\n        _returnTo(_tokenOut, balThis, _to);\n    }\n\n    function _swapUnderlying(\n        uint8 _tokenInIndex,\n        uint8 _tokenOutIndex,\n        uint256 _amountIn,\n        uint256 _amountOut,\n        uint256 _val\n    ) internal {\n        IGeodeWP(pool).swap{ value: _val }(_tokenInIndex, _tokenOutIndex, _amountIn, _amountOut, block.timestamp);\n    }\n\n    function _geodeStake(uint256 _amountIn, uint256 _amountOut) internal {\n        IGeodePortal(portal).stake{ value: _amountIn }(pooledTknId, _amountOut, block.timestamp);\n    }\n}\n"
    },
    "src/contracts/interface/IGeodePortal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IGeodePortal {\n    function gAVAX() external view returns (address);\n\n    function getNameFromId(uint256 _id) external view returns (bytes memory);\n\n    function planetCurrentInterface(uint256 _id) external view returns (address);\n\n    function planetWithdrawalPool(uint256 _id) external view returns (address);\n\n    function getMaintainerFromId(uint256) external view returns (address);\n\n    function isStakingPausedForPool(uint256) external view returns (bool);\n\n    function unpauseStakingForPool(uint256) external;\n\n    function pauseStakingForPool(uint256) external;\n\n    function stake(\n        uint256 planetId,\n        uint256 minGavax,\n        uint256 deadline\n    ) external payable returns (uint256 totalgAvax);\n}\n"
    },
    "src/contracts/interface/IGeodeWP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IGeodeWP {\n    function paused() external view returns (bool);\n\n    function getDebt() external view returns (uint256);\n\n    function getToken() external view returns (uint256);\n\n    function getERC1155() external view returns (address);\n\n    function getTokenBalance(uint8) external view returns (uint256);\n\n    function calculateSwap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function swap(\n        uint8 tokenIndexFrom,\n        uint8 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    function addLiquidity(\n        uint256[] calldata amounts,\n        uint256 minToMint,\n        uint256 deadline\n    ) external payable;\n}\n"
    },
    "src/contracts/interface/IgAVAX.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// @note: operator stands for interface address\ninterface IgAVAX {\n    function setApprovalForAll(address operator, bool approved) external;\n\n    function pricePerShare(uint256 _id) external view returns (uint256);\n\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    function isInterface(address operator, uint256 id) external view returns (bool);\n\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n}\n"
    },
    "src/contracts/adapters/DodoV2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IDodoV2.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract DodoV2Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    mapping(address => mapping(address => address)) public tknsToPool; // base > quote > pool\n\n    constructor(\n        string memory _name,\n        address[] memory _pools,\n        uint256 _gasEstimate\n    ) YakAdapter(_name, _gasEstimate) {\n        _setPools(_pools, true);\n    }\n\n    function setPools(address[] memory _pools, bool overwrite) external onlyOwner {\n        _setPools(_pools, overwrite);\n    }\n\n    function _rmPools(address[] memory _pools) external onlyOwner {\n        for (uint256 i; i < _pools.length; ++i) {\n            (address baseTkn, address quoteTkn) = _getTknsForPool(_pools[i]);\n            tknsToPool[baseTkn][quoteTkn] = address(0);\n        }\n    }\n\n    function _setPools(address[] memory _pools, bool overwrite) internal {\n        for (uint256 i; i < _pools.length; ++i) _setPool(_pools[i], overwrite);\n    }\n\n    function _setPool(address _pool, bool overwrite) internal {\n        (address baseTkn, address quoteTkn) = _getTknsForPool(_pool);\n        if (!overwrite) _overwriteCheck(baseTkn, quoteTkn, _pool);\n        tknsToPool[baseTkn][quoteTkn] = _pool;\n    }\n\n    function _getTknsForPool(address _pool) internal view returns (address baseToken, address quoteToken) {\n        baseToken = IDodoV2(_pool)._BASE_TOKEN_();\n        quoteToken = IDodoV2(_pool)._QUOTE_TOKEN_();\n    }\n\n    function _overwriteCheck(\n        address baseTkn,\n        address quoteTkn,\n        address pool\n    ) internal view {\n        address existingPool = tknsToPool[baseTkn][quoteTkn];\n        require(existingPool == address(0) || existingPool == pool, \"Not allowed to overwrite\");\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 returnAmount) {\n        if (_amountIn == 0) return 0;\n        address pool = tknsToPool[_tokenIn][_tokenOut];\n        if (pool != address(0)) return IDodoV2(pool).querySellBase(address(this), _amountIn);\n        pool = tknsToPool[_tokenOut][_tokenIn];\n        if (pool != address(0)) return IDodoV2(pool).querySellQuote(address(this), _amountIn);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        uint256 returned = _dodoSwap(_amountIn, _tokenIn, _tokenOut);\n        require(returned >= _amountOut, \"Insufficient amount-out\");\n        _returnTo(_tokenOut, returned, _to);\n    }\n\n    function _dodoSwap(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal returns (uint256) {\n        (function(address) external returns (uint256) fn, address pool) = _getPoolAndSwapFn(_tokenIn, _tokenOut);\n        IERC20(_tokenIn).safeTransfer(pool, _amountIn);\n        return fn(address(this));\n    }\n\n    function _getPoolAndSwapFn(address _tokenIn, address _tokenOut)\n        internal\n        view\n        returns (function(address) external returns (uint256), address)\n    {\n        address pool = tknsToPool[_tokenIn][_tokenOut];\n        if (pool != address(0)) return (IDodoV2(pool).sellBase, pool);\n        pool = tknsToPool[_tokenOut][_tokenIn];\n        if (pool != address(0)) return (IDodoV2(pool).sellQuote, pool);\n        revert(\"Token pair not supported\");\n    }\n}\n"
    },
    "src/contracts/interface/IDodoV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IDodoV2 {\n    function _QUOTE_TOKEN_() external view returns (address);\n\n    function _BASE_TOKEN_() external view returns (address);\n\n    function querySellBase(address trader, uint256 payBaseAmount) external view returns (uint256 receiveQuoteAmount);\n\n    function querySellQuote(address trader, uint256 payQuoteAmount) external view returns (uint256 receiveBaseAmount);\n\n    function sellBase(address to) external returns (uint256 receiveQuoteAmount);\n\n    function sellQuote(address to) external returns (uint256 receiveBaseAmount);\n}\n"
    },
    "src/contracts/adapters/DodoV1Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IDodoV1.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract DodoV1Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable HELPER;\n    mapping(address => mapping(address => address)) tknsToPool; // base > quote > pool\n\n    constructor(\n        string memory _name,\n        address[] memory _pools,\n        address _helper,\n        uint256 _gasEstimate\n    ) YakAdapter(_name, _gasEstimate) {\n        _setPools(_pools, true);\n        HELPER = _helper;\n    }\n\n    function setPools(address[] memory _pools, bool overwrite) external onlyOwner {\n        _setPools(_pools, overwrite);\n    }\n\n    function _rmPools(address[] memory _pools) external onlyOwner {\n        for (uint256 i; i < _pools.length; ++i) {\n            (address baseTkn, address quoteTkn) = _getTknsForPool(_pools[i]);\n            tknsToPool[baseTkn][quoteTkn] = address(0);\n        }\n    }\n\n    function _setPools(address[] memory _pools, bool overwrite) internal {\n        for (uint256 i; i < _pools.length; ++i) _setPool(_pools[i], overwrite);\n    }\n\n    function _setPool(address _pool, bool overwrite) internal {\n        (address baseTkn, address quoteTkn) = _getTknsForPool(_pool);\n        if (!overwrite) _overwriteCheck(baseTkn, quoteTkn, _pool);\n        _approveTknsForPool(baseTkn, quoteTkn, _pool);\n        tknsToPool[baseTkn][quoteTkn] = _pool;\n    }\n\n    function _getTknsForPool(address _pool) internal view returns (address baseToken, address quoteToken) {\n        baseToken = IDodoV1(_pool)._BASE_TOKEN_();\n        quoteToken = IDodoV1(_pool)._QUOTE_TOKEN_();\n    }\n\n    function _overwriteCheck(\n        address baseTkn,\n        address quoteTkn,\n        address pool\n    ) internal view {\n        address existingPool = tknsToPool[baseTkn][quoteTkn];\n        require(existingPool == address(0) || existingPool == pool, \"Not allowed to overwrite\");\n    }\n\n    function _approveTknsForPool(\n        address _baseTkn,\n        address _quoteTkn,\n        address _pool\n    ) internal {\n        IERC20(_baseTkn).safeApprove(_pool, UINT_MAX);\n        IERC20(_quoteTkn).safeApprove(_pool, UINT_MAX);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_amountIn == 0) return 0;\n        address pool = tknsToPool[_tokenIn][_tokenOut];\n        if (pool != address(0)) return IDodoV1(pool).querySellBaseToken(_amountIn);\n        pool = tknsToPool[_tokenOut][_tokenIn];\n        if (pool != address(0)) return IDodoHelper(HELPER).querySellQuoteToken(pool, _amountIn);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        address pool = tknsToPool[_tokenIn][_tokenOut];\n        if (pool != address(0)) IDodoV1(pool).sellBaseToken(_amountIn, _amountOut, \"\");\n        pool = tknsToPool[_tokenOut][_tokenIn];\n        if (pool != address(0)) IDodoV1(pool).buyBaseToken(_amountOut, _amountIn, \"\");\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/interface/IDodoV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IDodoHelper {\n    function querySellQuoteToken(address dodo, uint256 amount) external view returns (uint256);\n}\n\ninterface IDodoV1 {\n    function _QUOTE_TOKEN_() external view returns (address);\n\n    function _BASE_TOKEN_() external view returns (address);\n\n    function querySellBaseToken(uint256 amount) external view returns (uint256);\n\n    function queryBuyBaseToken(uint256 amount) external view returns (uint256);\n\n    function sellBaseToken(\n        uint256 amount,\n        uint256 minReceiveQuote,\n        bytes calldata data\n    ) external returns (uint256);\n\n    function buyBaseToken(\n        uint256 amount,\n        uint256 maxPayQuote,\n        bytes calldata data\n    ) external returns (uint256);\n}\n"
    },
    "src/contracts/adapters/CurvePlain256Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurvePlain256.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurvePlainV2Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable POOL;\n    mapping(address => uint256) public tokenIndex;\n    mapping(address => bool) public isPoolToken;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        name = _name;\n        POOL = _pool;\n        _setPoolTokens(_pool);\n        setSwapGasEstimate(_swapGasEstimate);\n    }\n\n    function _setPoolTokens(address _pool) internal {\n        for (uint256 i = 0; true; i++) {\n            address token = _getCoinByIndexSafe(_pool, i);\n            if (token == address(0)) break;\n            _addToken(_pool, token, i);\n        }\n    }\n\n    function _getCoinByIndexSafe(address _pool, uint256 _index) internal view returns (address token) {\n        try ICurvePlain256(_pool).coins(_index) returns (address _token) {\n            token = _token;\n        } catch {}\n    }\n\n    function _addToken(\n        address _pool,\n        address _token,\n        uint256 _index\n    ) internal {\n        IERC20(_token).safeApprove(_pool, UINT_MAX);\n        tokenIndex[_token] = _index;\n        isPoolToken[_token] = true;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (!_validArgs(_amountIn, _tokenIn, _tokenOut)) return 0;\n        uint256 amountOut = _getDySafe(_amountIn, _tokenIn, _tokenOut);\n        // Account for possible rounding error\n        return amountOut > 0 ? amountOut - 1 : 0;\n    }\n\n    function _validArgs(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (bool) {\n        return _amountIn != 0 && _tokenIn != _tokenOut && isPoolToken[_tokenIn] && isPoolToken[_tokenOut];\n    }\n\n    function _getDySafe(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256) {\n        try ICurvePlain256(POOL).get_dy(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ICurvePlain256(POOL).exchange(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn, _amountOut);\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/interface/ICurvePlain256.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICurvePlain256 {\n    function coins(uint256 index) external view returns (address);\n\n    function exchange(\n        uint256 tokenIndexFrom,\n        uint256 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n\n    function get_dy(\n        uint256 tokenIndexFrom,\n        uint256 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n}\n"
    },
    "src/contracts/adapters/CurvePlain128Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurvePlain128.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurvePlain128Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable POOL;\n    mapping(address => int128) public tokenIndex;\n    mapping(address => bool) public isPoolToken;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        POOL = _pool;\n        _setPoolTokens(_pool);\n    }\n\n    // Mapping indicator which tokens are included in the pool\n    function _setPoolTokens(address _pool) internal {\n        for (uint256 i = 0; true; i++) {\n            try CurvePlain128(_pool).coins(i) returns (address token) {\n                _approveToken(_pool, token, int128(int256(i)));\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function _approveToken(\n        address _pool,\n        address _token,\n        int128 _index\n    ) internal {\n        IERC20(_token).safeApprove(_pool, UINT_MAX);\n        tokenIndex[_token] = _index;\n        isPoolToken[_token] = true;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (!_validArgs(_amountIn, _tokenIn, _tokenOut)) return 0;\n        uint256 amountOut = _getDySafe(_amountIn, _tokenIn, _tokenOut);\n        // Account for possible rounding error\n        return amountOut > 0 ? amountOut - 1 : 0;\n    }\n\n    function _validArgs(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (bool) {\n        return _amountIn != 0 && _tokenIn != _tokenOut && isPoolToken[_tokenIn] && isPoolToken[_tokenOut];\n    }\n\n    function _getDySafe(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256) {\n        try CurvePlain128(POOL).get_dy(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        CurvePlain128(POOL).exchange(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn, _amountOut);\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/interface/ICurvePlain128.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface CurvePlain128 {\n    function coins(uint256 index) external view returns (address);\n\n    function exchange(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external returns (uint256);\n\n    function get_dy(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n}\n"
    },
    "src/contracts/adapters/CurveMoreAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// Supports Curve MIM pool (manually enter base tokens)\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurveMim.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurveMoreAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public constant MONEY_USD = 0x0f577433Bf59560Ef2a79c124E9Ff99fCa258948;\n    address public constant BASE_POOL = 0x7f90122BF0700F9E7e1F688fe926940E8839F353;\n    address public constant SWAPPER = 0x001E3BA199B4FF4B5B6e97aCD96daFC0E2e4156e;\n    address public constant POOL = 0xb3F21Fc59Bc06209D5fb82c474F21582AEf09a20;\n    mapping(address => int128) public tokenIndex;\n    mapping(address => bool) public isUnderlyingToken;\n\n    constructor(string memory _name, uint256 _swapGasEstimate) YakAdapter(_name, _swapGasEstimate) {\n        _setPoolTokens();\n    }\n\n    function _setPoolTokens() internal {\n        _setPoolTokenAllowance(MONEY_USD);\n        // MONEY_USD index is set to 0 by default\n        for (uint256 i = 0; true; i++) {\n            try ICurveMim(BASE_POOL).underlying_coins(i) returns (address token) {\n                _setPoolTokenAllowance(token);\n                isUnderlyingToken[token] = true;\n                tokenIndex[token] = int128(int256(i)) + 1;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function _setPoolTokenAllowance(address _token) internal {\n        IERC20(_token).approve(SWAPPER, UINT_MAX);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (\n            _amountIn == 0 ||\n            _tokenIn == _tokenOut ||\n            !((_tokenOut == MONEY_USD && isUnderlyingToken[_tokenIn]) ||\n                (_tokenIn == MONEY_USD && isUnderlyingToken[_tokenOut]))\n        ) {\n            return 0;\n        }\n        try ICurveMim(POOL).get_dy_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            // `calc_token_amount` in base_pool is used in part of the query\n            // this method does account for deposit fee which causes discrepancy\n            // between the query result and the actual swap amount by few bps(0-3.2)\n            // Additionally there is a rounding error (swap and query may calc different amounts)\n            // Account for that with 4 bps discount\n            return amountOut == 0 ? 0 : (amountOut * (1e4 - 4)) / 1e4;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ICurveMim(SWAPPER).exchange_underlying(\n            POOL,\n            tokenIndex[_tokenIn],\n            tokenIndex[_tokenOut],\n            _amountIn,\n            _amountOut\n        );\n        // Curve-pool reverts if dy is not met\n        // Dont leave funds in the adapter that are there due to query imprecision\n        _returnTo(_tokenOut, IERC20(_tokenOut).balanceOf(address(this)), _to);\n    }\n}\n"
    },
    "src/contracts/interface/ICurveMim.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICurveMim {\n    function underlying_coins(uint256 index) external view returns (address);\n\n    function coins(uint256 index) external view returns (address);\n\n    function get_dy_underlying(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function exchange_underlying(\n        address pool,\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n}\n"
    },
    "src/contracts/adapters/CurveMimAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// Supports Curve MIM pool (manually enter base tokens)\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurveMim.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurveMimAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public constant basePool = 0x7f90122BF0700F9E7e1F688fe926940E8839F353;\n    address public constant swapper = 0x001E3BA199B4FF4B5B6e97aCD96daFC0E2e4156e;\n    address public constant pool = 0x30dF229cefa463e991e29D42DB0bae2e122B2AC7;\n    mapping(address => int128) public tokenIndex;\n    mapping(address => bool) public isPoolToken;\n\n    constructor(string memory _name, uint256 _swapGasEstimate) YakAdapter(_name, _swapGasEstimate) {\n        _setPoolTokens();\n    }\n\n    // Mapping indicator which tokens are included in the pool\n    function _setPoolTokens() internal {\n        address metaTkn = ICurveMim(pool).coins(0);\n        _setPoolTokenAllowance(metaTkn);\n        isPoolToken[metaTkn] = true;\n        tokenIndex[metaTkn] = 0;\n        for (uint256 i = 0; true; i++) {\n            try ICurveMim(basePool).underlying_coins(i) returns (address token) {\n                _setPoolTokenAllowance(token);\n                isPoolToken[token] = true;\n                tokenIndex[token] = int128(int256(i)) + 1;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function _setPoolTokenAllowance(address _token) internal {\n        IERC20(_token).approve(swapper, UINT_MAX);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_amountIn == 0 || _tokenIn == _tokenOut || !isPoolToken[_tokenIn] || !isPoolToken[_tokenOut]) {\n            return 0;\n        }\n        try ICurveMim(pool).get_dy_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            // `calc_token_amount` in base_pool is used in part of the query\n            // this method does account for deposit fee which causes discrepancy\n            // between the query result and the actual swap amount by few bps(0-3.2)\n            // Additionally there is a rounding error (swap and query may calc different amounts)\n            // Account for that with 4 bps discount\n            return amountOut == 0 ? 0 : (amountOut * (1e4 - 4)) / 1e4;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ICurveMim(swapper).exchange_underlying(\n            pool,\n            tokenIndex[_tokenIn],\n            tokenIndex[_tokenOut],\n            _amountIn,\n            _amountOut\n        );\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/CurveDeUSDCAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// Supports Curve deUSDC(DeBridge) pool (manually enter base tokens)\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurveMim.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurveDeUSDCAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public constant deUSDC = 0x28690ec942671aC8d9Bc442B667EC338eDE6dFd3;\n    address public constant BASE_POOL = 0x7f90122BF0700F9E7e1F688fe926940E8839F353;\n    address public constant SWAPPER = 0x001E3BA199B4FF4B5B6e97aCD96daFC0E2e4156e;\n    address public constant POOL = 0xd39016475200ab8957e9C772C949Ef54bDA69111;\n    mapping(address => bool) public isUnderlyingToken;\n    mapping(address => int128) public tokenIndex;\n\n    constructor(string memory _name, uint256 _swapGasEstimate) YakAdapter(_name, _swapGasEstimate) {\n        _setPoolTokens();\n    }\n\n    function _setPoolTokens() internal {\n        // deUSDC index is set to 0 by default\n        _setPoolTokenAllowance(deUSDC);\n        isUnderlyingToken[deUSDC] = true;\n        for (uint256 i = 0; true; i++) {\n            try ICurveMim(BASE_POOL).underlying_coins(i) returns (address token) {\n                _setPoolTokenAllowance(token);\n                isUnderlyingToken[token] = true;\n                tokenIndex[token] = int128(int256(i)) + 1;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function _setPoolTokenAllowance(address _token) internal {\n        IERC20(_token).approve(SWAPPER, UINT_MAX);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (\n            _amountIn == 0 ||\n            _tokenIn == _tokenOut ||\n            !((_tokenOut == deUSDC && isUnderlyingToken[_tokenIn]) ||\n                (_tokenIn == deUSDC && isUnderlyingToken[_tokenOut]))\n        ) {\n            return 0;\n        }\n        try ICurveMim(POOL).get_dy_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            // `calc_token_amount` in base_pool is used in part of the query\n            // this method does account for deposit fee which causes discrepancy\n            // between the query result and the actual swap amount by few bps(0-3.2)\n            // Additionally there is a rounding error (swap and query may calc different amounts)\n            // Account for that with 4 bps discount\n            return amountOut == 0 ? 0 : (amountOut * (1e4 - 4)) / 1e4;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ICurveMim(SWAPPER).exchange_underlying(\n            POOL,\n            tokenIndex[_tokenIn],\n            tokenIndex[_tokenOut],\n            _amountIn,\n            _amountOut\n        );\n        // Curve-pool reverts if dy is not met\n        // Dont leave funds in the adapter that are there due to query imprecision\n        _returnTo(_tokenOut, IERC20(_tokenOut).balanceOf(address(this)), _to);\n    }\n}\n"
    },
    "src/contracts/adapters/CurveMetaV3Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ninterface IMetaPool {\n    function get_dy_underlying(\n        int128,\n        int128,\n        uint256\n    ) external view returns (uint256);\n\n    function exchange_underlying(\n        int128,\n        int128,\n        uint256,\n        uint256\n    ) external;\n\n    function coins(uint256) external view returns (address);\n}\n\ninterface IBasePool {\n    function coins(uint256) external view returns (address);\n}\n\ncontract CurveMetaV3Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    mapping(address => mapping(address => int128)) public tokenIndexForPool;\n    mapping(address => mapping(address => address)) public poolForTokens;\n\n    constructor(\n        string memory _name,\n        address[] memory _pools,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        setPools(_pools);\n    }\n\n    function getPool(address tkn0, address tkn1) public view returns (address) {\n        return poolForTokens[tkn0][tkn1];\n    }\n\n    function rmPools(address[] memory _pools) external onlyOwner {\n        for (uint256 i; i < _pools.length; ++i) _rmPool(_pools[i]);\n    }\n\n    function setPools(address[] memory _pools) public onlyOwner {\n        for (uint256 i; i < _pools.length; ++i) _setPool(_pools[i]);\n    }\n\n    function _setPool(address _pool) internal {\n        (address mToken, address basePool) = getCoins(_pool);\n        IERC20(mToken).safeApprove(_pool, UINT_MAX);\n        for (uint256 i; true; ++i) {\n            address uToken = getUnderlyingToken(basePool, i);\n            if (uToken == address(0)) break;\n            _setTokenPair(_pool, mToken, uToken, int128(int256(i)));\n        }\n    }\n\n    function _rmPool(address _pool) internal {\n        (address mToken, address basePool) = getCoins(_pool);\n        for (uint256 i; true; ++i) {\n            address uToken = getUnderlyingToken(basePool, i);\n            if (uToken == address(0)) break;\n            poolForTokens[uToken][mToken] = address(0);\n            poolForTokens[mToken][uToken] = address(0);\n        }\n    }\n\n    function getCoins(address _pool) internal view returns (address meta, address base) {\n        meta = IMetaPool(_pool).coins(0);\n        base = IMetaPool(_pool).coins(1);\n    }\n\n    function _setTokenPair(\n        address _pool,\n        address _metaTkn,\n        address _uToken,\n        int128 _index\n    ) internal {\n        IERC20(_uToken).safeApprove(_pool, UINT_MAX);\n        tokenIndexForPool[_pool][_uToken] = _index + 1;\n        poolForTokens[_uToken][_metaTkn] = _pool;\n        poolForTokens[_metaTkn][_uToken] = _pool;\n    }\n\n    function getUnderlyingToken(address basePool, uint256 i) internal view returns (address) {\n        try IBasePool(basePool).coins(i) returns (address token) {\n            return token;\n        } catch {}\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        address pool = getPool(_tokenIn, _tokenOut);\n        if (pool == address(0) || _amountIn == 0) return 0;\n        // `calc_token_amount` in base_pool is used in part of the query\n        // this method does account for deposit fee which causes discrepancy\n        // between the query result and the actual swap amount by few bps(0-3.2)\n        // Additionally there is a rounding error (swap and query may calc different amounts)\n        // Account for that with 1 bps discount\n        uint256 amountOut = safeQuery(pool, _amountIn, _tokenIn, _tokenOut);\n        return (amountOut * (1e4 - 1)) / 1e4;\n    }\n\n    function safeQuery(\n        address _pool,\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256) {\n        try\n            IMetaPool(_pool).get_dy_underlying(\n                tokenIndexForPool[_pool][_tokenIn],\n                tokenIndexForPool[_pool][_tokenOut],\n                _amountIn\n            )\n        returns (uint256 amountOut) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        address pool = getPool(_tokenIn, _tokenOut);\n        IMetaPool(pool).exchange_underlying(\n            tokenIndexForPool[pool][_tokenIn],\n            tokenIndexForPool[pool][_tokenOut],\n            _amountIn,\n            _amountOut\n        );\n        uint256 balThis = IERC20(_tokenOut).balanceOf(address(this));\n        _returnTo(_tokenOut, balThis, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/CurveMetaV2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ninterface IMetaPool {\n    function get_dy_underlying(\n        int128,\n        int128,\n        uint256\n    ) external view returns (uint256);\n\n    function exchange_underlying(\n        int128,\n        int128,\n        uint256,\n        uint256\n    ) external;\n\n    function coins(uint256) external view returns (address);\n}\n\ninterface IBasePool {\n    function coins(uint256) external view returns (address);\n}\n\ncontract CurveMetaV2Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable META_COIN;\n    address public immutable POOL;\n    mapping(address => int128) public tokenIndex;\n    mapping(address => bool) public isPoolToken;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        address metaCoin = getMetaCoin(_pool);\n        approveAndAddTokenToAdapter(_pool, metaCoin, 0);\n        addUnderlyingTkns(_pool);\n        META_COIN = metaCoin;\n        POOL = _pool;\n    }\n\n    function getMetaCoin(address _pool) internal view returns (address) {\n        return IMetaPool(_pool).coins(0);\n    }\n\n    function initPoolAndReturnMetaTkn(address _pool) internal returns (address coin0) {\n        coin0 = IMetaPool(_pool).coins(0);\n        approveAndAddTokenToAdapter(_pool, coin0, 0);\n    }\n\n    function addUnderlyingTkns(address metaPool) internal {\n        address basePool = IMetaPool(metaPool).coins(1);\n        for (uint256 i; true; ++i) {\n            address token = getUnderlyingToken(basePool, i);\n            if (token == address(0)) break;\n            approveAndAddTokenToAdapter(metaPool, token, int128(int256(i)) + 1);\n        }\n    }\n\n    function getUnderlyingToken(address basePool, uint256 i) internal view returns (address) {\n        try IBasePool(basePool).coins(i) returns (address token) {\n            return token;\n        } catch {}\n    }\n\n    function approveAndAddTokenToAdapter(\n        address _pool,\n        address _token,\n        int128 _index\n    ) internal {\n        IERC20(_token).safeApprove(_pool, UINT_MAX);\n        tokenIndex[_token] = _index;\n        isPoolToken[_token] = true;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (!validInputParams(_amountIn, _tokenIn, _tokenOut)) return 0;\n        // `calc_token_amount` in base_pool is used in part of the query\n        // this method does account for deposit fee which causes discrepancy\n        // between the query result and the actual swap amount by few bps(0-3.2)\n        // Additionally there is a rounding error (swap and query may calc different amounts)\n        // Account for that with 1 bps discount\n        uint256 amountOut = safeQuery(_amountIn, _tokenIn, _tokenOut);\n        return (amountOut * (1e4 - 1)) / 1e4;\n    }\n\n    function safeQuery(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (uint256) {\n        try IMetaPool(POOL).get_dy_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            return amountOut;\n        } catch {\n            return 0;\n        }\n    }\n\n    function validInputParams(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view returns (bool) {\n        return _amountIn != 0 && _tokenIn != _tokenOut && validPath(_tokenIn, _tokenOut);\n    }\n\n    function validPath(address tkn0, address tkn1) internal view returns (bool) {\n        return (tkn0 == META_COIN && isPoolToken[tkn1]) || (tkn1 == META_COIN && isPoolToken[tkn0]);\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        IMetaPool(POOL).exchange_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn, _amountOut);\n        uint256 balThis = IERC20(_tokenOut).balanceOf(address(this));\n        _returnTo(_tokenOut, balThis, _to);\n    }\n}\n"
    },
    "src/contracts/adapters/CurveMetaAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurveMeta.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract CurveMetaAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public immutable POOL;\n    address public immutable COIN;\n    mapping(address => int128) public tokenIndex;\n    mapping(address => bool) public isPoolToken;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        POOL = _pool;\n        COIN = _setPoolTokens(_pool);\n    }\n\n    function _setPoolTokens(address _pool) internal returns (address coin0) {\n        coin0 = ICurveMeta(_pool).coins(0);\n        _approveToken(_pool, coin0, 0);\n        for (uint256 i = 0; true; i++) {\n            try ICurveMeta(_pool).base_coins(i) returns (address token) {\n                _approveToken(_pool, token, int128(int256(i)) + 1);\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function _approveToken(\n        address _pool,\n        address _token,\n        int128 _index\n    ) internal {\n        IERC20(_token).safeApprove(_pool, UINT_MAX);\n        tokenIndex[_token] = _index;\n        isPoolToken[_token] = true;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (\n            _amountIn == 0 ||\n            _tokenIn == _tokenOut ||\n            !((_tokenIn == COIN && isPoolToken[_tokenOut]) || (_tokenOut == COIN && isPoolToken[_tokenIn]))\n        ) {\n            return 0;\n        }\n        try ICurveMeta(POOL).get_dy_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            // `calc_token_amount` in base_pool is used in part of the query\n            // this method does account for deposit fee which causes discrepancy\n            // between the query result and the actual swap amount by few bps(0-3.2)\n            // Additionally there is a rounding error (swap and query may calc different amounts)\n            // Account for that with 1 bps discount\n            return amountOut == 0 ? 0 : (amountOut * (1e4 - 1)) / 1e4;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ICurveMeta(POOL).exchange_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn, _amountOut);\n        _returnTo(_tokenOut, IERC20(_tokenOut).balanceOf(address(this)), _to);\n    }\n}\n"
    },
    "src/contracts/interface/ICurveMeta.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICurveMeta {\n    function base_coins(uint256) external view returns (address);\n\n    function coins(uint256 index) external view returns (address);\n\n    function get_dy_underlying(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function exchange_underlying(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n}\n"
    },
    "src/contracts/adapters/Curve2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// Supports Curve AAVE and Ren pool and alike\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurve2.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract Curve2Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    mapping(address => bool) public isPoolToken;\n    mapping(address => int128) public tokenIndex;\n    address public pool;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        pool = _pool;\n        _setPoolTokens();\n    }\n\n    // Mapping indicator which tokens are included in the pool\n    function _setPoolTokens() internal {\n        for (uint256 i = 0; true; i++) {\n            try ICurve2(pool).underlying_coins(i) returns (address token) {\n                _setPoolTokenAllowance(token);\n                isPoolToken[token] = true;\n                tokenIndex[token] = int128(int256(i));\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function _setPoolTokenAllowance(address _token) internal {\n        IERC20(_token).approve(pool, UINT_MAX);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_amountIn == 0 || _tokenIn == _tokenOut || !isPoolToken[_tokenIn] || !isPoolToken[_tokenOut]) {\n            return 0;\n        }\n        try ICurve2(pool).get_dy_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            // Account for rounding error (swap and query may calc different amounts) by substracting 1 gwei\n            return amountOut == 0 ? 0 : amountOut - 1;\n        } catch {\n            return 0;\n        }\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ICurve2(pool).exchange_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn, _amountOut);\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/interface/ICurve2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICurve2 {\n    function underlying_coins(uint256 index) external view returns (address);\n\n    function get_dy_underlying(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function exchange_underlying(\n        int128 tokenIndexFrom,\n        int128 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n}\n"
    },
    "src/contracts/adapters/Curve1Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// Supports Curve Atricrypto pools and alike\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/ICurve1.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract Curve1Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    mapping(address => uint256) public tokenIndex;\n    mapping(address => bool) public isPoolToken;\n    address public pool;\n\n    constructor(\n        string memory _name,\n        address _pool,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        pool = _pool;\n        _setPoolTokens();\n    }\n\n    // Mapping indicator which tokens are included in the pool\n    function _setPoolTokens() internal {\n        for (uint256 i = 0; true; ++i) {\n            try ICurve1(pool).underlying_coins(i) returns (address token) {\n                _setPoolTokenAllowance(token);\n                isPoolToken[token] = true;\n                tokenIndex[token] = i;\n            } catch {\n                break;\n            }\n        }\n    }\n\n    function _setPoolTokenAllowance(address _token) internal {\n        IERC20(_token).approve(pool, UINT_MAX);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_amountIn == 0 || _tokenIn == _tokenOut || !isPoolToken[_tokenIn] || !isPoolToken[_tokenOut]) {\n            return 0;\n        }\n        try ICurve1(pool).get_dy_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn) returns (\n            uint256 amountOut\n        ) {\n            return _applyError(amountOut);\n        } catch {\n            return 0;\n        }\n    }\n\n    function _applyError(uint256 _amount) internal pure returns (uint256) {\n        // `calc_token_amount` in base_pool is used in part of the query\n        // this method does account for deposit fee which causes discrepancy\n        // between the query result and the actual swap amount by few bps(0-3.2)\n        // Additionally there is a rounding error (swap and query may calc different amounts)\n        // Account for above with 4 bps discount\n        return _amount == 0 ? 0 : (_amount * (1e4 - 4)) / 1e4;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        ICurve1(pool).exchange_underlying(tokenIndex[_tokenIn], tokenIndex[_tokenOut], _amountIn, _amountOut);\n        uint256 balThis = IERC20(_tokenOut).balanceOf(address(this));\n        _returnTo(_tokenOut, balThis, _to);\n    }\n}\n"
    },
    "src/contracts/interface/ICurve1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICurve1 {\n    function underlying_coins(uint256 index) external view returns (address);\n\n    function exchange_underlying(\n        uint256 tokenIndexFrom,\n        uint256 tokenIndexTo,\n        uint256 dx,\n        uint256 minDy\n    ) external;\n\n    function get_dy_underlying(\n        uint256 tokenIndexFrom,\n        uint256 tokenIndexTo,\n        uint256 dx\n    ) external view returns (uint256);\n}\n"
    },
    "src/contracts/adapters/BridgeMigrationAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract BridgeMigrationAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    mapping(address => bool) public isNewBridgeToken;\n\n    constructor(\n        address[] memory _newTokens,\n        address[] memory _oldTokens,\n        uint256 _swapGasEstimate\n    ) YakAdapter(\"BridgeMigrationAdapter\", _swapGasEstimate) {\n        setNewBridgeTokens(_newTokens, _oldTokens);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256 amountOut) {\n        if (isNewBridgeToken[_tokenOut] && IERC20(_tokenOut).swapSupply(_tokenIn) >= _amountIn) amountOut = _amountIn;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        IERC20(_tokenOut).swap(_tokenIn, _amountIn);\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n\n    function setNewBridgeTokens(address[] memory _newTokens, address[] memory _oldTokens) public onlyOwner {\n        require(_newTokens.length == _oldTokens.length, \"Needs to be surjective\");\n        for (uint256 i; i < _newTokens.length; i++) {\n            require(IERC20(_newTokens[i]).swapSupply(_oldTokens[i]) > 0, \"Invalid combination\");\n            _approveIfNeeded(_newTokens[i], _oldTokens[i]);\n            isNewBridgeToken[_newTokens[i]] = true;\n        }\n    }\n\n    function _approveIfNeeded(address _newToken, address _oldToken) internal {\n        uint256 allowance = IERC20(_oldToken).allowance(address(this), _newToken);\n        if (allowance < UINT_MAX) IERC20(_oldToken).safeApprove(_newToken, UINT_MAX);\n    }\n}\n"
    },
    "src/contracts/interface/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IVault {\n    enum SwapKind {\n        GIVEN_IN,\n        GIVEN_OUT\n    }\n\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        address assetIn;\n        address assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        address[] memory assets,\n        FundManagement memory funds\n    ) external returns (int256[] memory assetDeltas);\n}\n"
    },
    "src/contracts/interface/IPoolSwapStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IVault.sol\";\n\ninterface IPoolSwapStructs {\n    struct SwapRequest {\n        IVault.SwapKind kind;\n        IERC20 tokenIn;\n        IERC20 tokenOut;\n        uint256 amount;\n        bytes32 poolId;\n        uint256 lastChangeBlock;\n        address from;\n        address to;\n        bytes userData;\n    }\n}\n"
    },
    "src/contracts/interface/IBasePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IPoolSwapStructs.sol\";\n\ninterface IBasePool is IPoolSwapStructs {\n    function getPoolId() external view returns (bytes32);\n}\n"
    },
    "src/contracts/interface/IMinimalSwapInfoPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IBasePool.sol\";\n\ninterface IMinimalSwapInfoPool is IBasePool {\n    function onSwap(\n        SwapRequest memory swapRequest,\n        uint256 currentBalanceTokenIn,\n        uint256 currentBalanceTokenOut\n    ) external view returns (uint256 amount);\n}\n"
    },
    "src/contracts/adapters/BalancerV2Adapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// Supports Balancerlike pools\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\nimport \"../YakAdapter.sol\";\nimport \"../interface/IVault.sol\";\nimport \"../interface/IBasePool.sol\";\nimport \"../interface/IMinimalSwapInfoPool.sol\";\n\ncontract BalancerV2Adapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public vault;\n\n    mapping(address => mapping(address => uint128)) internal poolToTokenIndex;\n    mapping(address => mapping(address => address[])) internal tokensToPools;\n\n    constructor(\n        string memory _name,\n        address _vault,\n        address[] memory _pools,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        vault = _vault;\n        addPools(_pools);\n    }\n\n    function addPools(address[] memory _pools) public onlyOwner {\n        for (uint128 i = 0; i < _pools.length; i++) {\n            address pool = _pools[i];\n            bytes32 poolId = IBasePool(pool).getPoolId();\n            (IERC20[] memory tokens, , ) = IVault(vault).getPoolTokens(poolId);\n            for (uint128 j = 0; j < tokens.length; j++) {\n                address token = address(tokens[j]);\n                poolToTokenIndex[pool][token] = j;\n                for (uint128 k = 0; k < tokens.length; k++) {\n                    if (j != k) {\n                        tokensToPools[token][address(tokens[k])].push(pool);\n                        _approveIfNeeded(token, UINT_MAX);\n                    }\n                }\n            }\n        }\n    }\n\n    function removePools(address[] memory _pools) public onlyOwner {\n        for (uint256 i = 0; i < _pools.length; i++) {\n            address pool = _pools[i];\n            bytes32 poolId = IBasePool(pool).getPoolId();\n            (IERC20[] memory tokens, , ) = IVault(vault).getPoolTokens(poolId);\n            for (uint128 j = 0; j < tokens.length; j++) {\n                address token = address(tokens[j]);\n                for (uint128 k = 0; k < tokens.length; k++) {\n                    if (j != k) {\n                        address[] memory currentPools = tokensToPools[token][address(tokens[k])];\n                        for (uint128 l = 0; l < currentPools.length; l++) {\n                            if (currentPools[l] == pool) {\n                                delete currentPools[l];\n                            }\n                        }\n                        tokensToPools[token][address(tokens[k])] = currentPools;\n                    }\n                }\n            }\n        }\n    }\n\n    function getPools(address tokenIn, address tokenOut) public view returns (address[] memory) {\n        return tokensToPools[tokenIn][tokenOut];\n    }\n\n    function _approveIfNeeded(address _tokenIn, uint256 _amount) internal {\n        uint256 allowance = IERC20(_tokenIn).allowance(address(this), vault);\n        if (allowance < _amount) {\n            IERC20(_tokenIn).safeApprove(vault, _amount);\n        }\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (_amountIn == 0 || _tokenIn == _tokenOut) {\n            return 0;\n        }\n\n        address[] memory pools = getPools(_tokenIn, _tokenOut);\n        if (pools.length == 0) {\n            return 0;\n        }\n\n        (, uint256 amountOut) = _getBestPoolForSwap(pools, _tokenIn, _tokenOut, _amountIn);\n        return amountOut;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address to\n    ) internal override {\n        address[] memory pools = getPools(_tokenIn, _tokenOut);\n\n        require(pools.length > 0, \"No pools for swapping\");\n\n        (address pool, ) = _getBestPoolForSwap(pools, _tokenIn, _tokenOut, _amountIn);\n\n        require(pool != address(0), \"Undefined pool\");\n\n        IVault.SingleSwap memory swap;\n        swap.poolId = IBasePool(pool).getPoolId();\n        swap.kind = IVault.SwapKind.GIVEN_IN;\n        swap.assetIn = _tokenIn;\n        swap.assetOut = _tokenOut;\n        swap.amount = _amountIn;\n        swap.userData = \"0x\";\n\n        IVault.FundManagement memory fund;\n        fund.sender = address(this);\n        fund.recipient = payable(to);\n        fund.fromInternalBalance = false;\n        fund.toInternalBalance = false;\n\n        IVault(vault).swap(swap, fund, _amountOut, block.timestamp);\n    }\n\n    function _getBestPoolForSwap(\n        address[] memory pools,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _amountIn\n    ) internal view returns (address bestPool, uint256 amountOut) {\n        amountOut = 0;\n        bestPool = address(0);\n        for (uint128 i; i < pools.length; i++) {\n            address pool = pools[i];\n            if (pool == address(0)) {\n                continue;\n            }\n            IPoolSwapStructs.SwapRequest memory request;\n            request.poolId = IBasePool(pool).getPoolId();\n            request.kind = IVault.SwapKind.GIVEN_IN;\n            request.tokenIn = IERC20(_tokenIn);\n            request.tokenOut = IERC20(_tokenOut);\n            request.amount = _amountIn;\n            request.userData = \"0x\";\n            uint256 newAmountOut = _getAmountOut(request, pool);\n            if (newAmountOut > amountOut) {\n                amountOut = newAmountOut;\n                bestPool = pool;\n            }\n        }\n    }\n\n    function _getAmountOut(IPoolSwapStructs.SwapRequest memory request, address pool)\n        internal\n        view\n        returns (uint256 amountOut)\n    {\n        // Based on https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/vault/contracts/Swaps.sol#L275\n        (, uint256[] memory balances, ) = IVault(vault).getPoolTokens(request.poolId);\n        uint256 tokenInTotal = balances[poolToTokenIndex[pool][address(request.tokenIn)]];\n        uint256 tokenOutTotal = balances[poolToTokenIndex[pool][address(request.tokenOut)]];\n        amountOut = _getAmountOutSafe(request, tokenInTotal, tokenOutTotal, pool);\n    }\n\n    function _getAmountOutSafe(\n        IPoolSwapStructs.SwapRequest memory request,\n        uint256 tokenInTotal,\n        uint256 tokenOutTotal,\n        address pool\n    ) internal view returns (uint256) {\n        try IMinimalSwapInfoPool(pool).onSwap(request, tokenInTotal, tokenOutTotal) returns (uint256 amountOut) {\n            return amountOut;\n        } catch {}\n    }\n}\n"
    },
    "src/contracts/adapters/ArableSFAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\nimport \"../interface/IStabilityFund.sol\";\nimport \"../interface/IERC20.sol\";\nimport \"../lib/SafeERC20.sol\";\nimport \"../YakAdapter.sol\";\n\ncontract ArableSFAdapter is YakAdapter {\n    using SafeERC20 for IERC20;\n\n    address public vault;\n    mapping(address => uint256) public tokenDecimals;\n\n    constructor(\n        string memory _name,\n        address _vault,\n        uint256 _swapGasEstimate\n    ) YakAdapter(_name, _swapGasEstimate) {\n        vault = _vault;\n        setPoolTokens();\n    }\n\n    function setPoolTokens() public {\n        uint256 whitelistedTknsLen = IStabilityFund(vault).getStableTokensCount();\n        for (uint256 i = 0; i < whitelistedTknsLen; i++) {\n            address token = IStabilityFund(vault).getStableTokens()[i];\n            tokenDecimals[token] = IERC20(token).decimals();\n            uint256 allowance = IERC20(token).allowance(address(this), vault);\n            if (allowance < UINT_MAX) {\n                IERC20(token).safeApprove(vault, UINT_MAX);\n            }\n        }\n    }\n\n    function adjustForDecimals(\n        uint256 _amount,\n        address _tokenDiv,\n        address _tokenMul\n    ) internal view returns (uint256) {\n        uint256 decimalsDiv = tokenDecimals[_tokenDiv];\n        uint256 decimalsMul = tokenDecimals[_tokenMul];\n        return (_amount * 10**decimalsMul) / 10**decimalsDiv;\n    }\n\n    function hasVaultEnoughBal(address _token, uint256 _amount) private view returns (bool) {\n        return IERC20(_token).balanceOf(vault) >= _amount;\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal view override returns (uint256) {\n        if (\n            _amountIn == 0 ||\n            _tokenIn == _tokenOut ||\n            !IStabilityFund(vault).isStableToken(_tokenIn) ||\n            !IStabilityFund(vault).isStableToken(_tokenOut) ||\n            IStabilityFund(vault).isTokenDisabled(_tokenIn) ||\n            IStabilityFund(vault).isTokenDisabled(_tokenOut) ||\n            !IStabilityFund(vault).swapEnabled()\n        ) {\n            return 0;\n        }\n\n        uint256 amountOut = adjustForDecimals(_amountIn, _tokenIn, _tokenOut);\n        uint256 swapFee = IStabilityFund(vault).swapFee();\n        uint256 swapFeeDivisor = 1 ether;\n        uint256 feeAmount = (amountOut * swapFee) / swapFeeDivisor;\n        uint256 amountOutAfterFees = amountOut - feeAmount;\n        if (!hasVaultEnoughBal(_tokenOut, amountOutAfterFees)) {\n            return 0;\n        }\n\n        return amountOutAfterFees;\n    }\n\n    function _swap(\n        uint256 _amountIn,\n        uint256 _amountOut,\n        address _tokenIn,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        IStabilityFund(vault).swap(_tokenIn, _amountIn, _tokenOut);\n        // Confidently transfer amount-out\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    },
    "src/contracts/interface/IStabilityFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IStabilityFund {\n    function swap(\n        address token0,\n        uint256 amount,\n        address token1\n    ) external;\n\n    function swapEnabled() external view returns (bool);\n\n    function isStableToken(address) external view returns (bool);\n\n    function isTokenDisabled(address) external view returns (bool);\n\n    function getStableTokens() external view returns (address[] memory);\n\n    function getStableTokensCount() external view returns (uint256);\n\n    function swapFee() external view returns (uint256);\n}\n"
    },
    "src/contracts/adapters/WAvaxAdapter.sol": {
      "content": "//       ╟╗                                                                      ╔╬\n//       ╞╬╬                                                                    ╬╠╬\n//      ╔╣╬╬╬                                                                  ╠╠╠╠╦\n//     ╬╬╬╬╬╩                                                                  ╘╠╠╠╠╬\n//    ║╬╬╬╬╬                                                                    ╘╠╠╠╠╬\n//    ╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬      ╒╬╬╬╬╬╬╬╜   ╠╠╬╬╬╬╬╬╬         ╠╬╬╬╬╬╬╬    ╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╠\n//    ╙╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬╕    ╬╬╬╬╬╬╬╜   ╣╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬   ╬╬╬╬╬╬╬╬╬╠╠╠╠╠╠╠╩\n//     ╙╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬╬  ╔╬╬╬╬╬╬╬    ╔╠╠╠╬╬╬╬╬╬╬╬        ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬╬╬╬╬╠╠╠╠╝╙\n//               ╘╣╬╬╬╬╬╬╬╬╬╬╬╬╬╬    ╒╠╠╠╬╠╬╩╬╬╬╬╬╬       ╠╬╬╬╬╬╬╬╣╬╬╬╬╬╬╬╙\n//                 ╣╬╬╬╬╬╬╬╬╬╬╠╣     ╣╬╠╠╠╬╩ ╚╬╬╬╬╬╬      ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                  ╣╬╬╬╬╬╬╬╬╬╣     ╣╬╠╠╠╬╬   ╣╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╬╬╬╬╬╬╬\n//                   ╟╬╬╬╬╬╬╬╩      ╬╬╠╠╠╠╬╬╬╬╬╬╬╬╬╬╬     ╠╬╬╬╬╬╬╬╠╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╒╬╬╠╠╬╠╠╬╬╬╬╬╬╬╬╬╬╬╬    ╠╬╬╬╬╬╬╬ ╣╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬     ╬╬╬╠╠╠╠╝╝╝╝╝╝╝╠╬╬╬╬╬╬   ╠╬╬╬╬╬╬╬  ╚╬╬╬╬╬╬╬╬\n//                    ╬╬╬╬╬╬╬    ╣╬╬╬╬╠╠╩       ╘╬╬╬╬╬╬╬  ╠╬╬╬╬╬╬╬   ╙╬╬╬╬╬╬╬╬\n//\n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\nimport \"../YakAdapter.sol\";\n\ncontract WAvaxAdapter is YakAdapter {\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n\n    constructor(uint256 _swapGasEstimate) YakAdapter(\"WAvaxAdapter\", _swapGasEstimate) {\n        setSwapGasEstimate(_swapGasEstimate);\n    }\n\n    function _query(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) internal pure override returns (uint256 amountOut) {\n        if (_tokenIn == WAVAX && _tokenOut == WAVAX) {\n            amountOut = _amountIn;\n        }\n    }\n\n    function _swap(\n        uint256,\n        uint256 _amountOut,\n        address,\n        address _tokenOut,\n        address _to\n    ) internal override {\n        _returnTo(_tokenOut, _amountOut, _to);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}